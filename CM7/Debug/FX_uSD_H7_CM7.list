
FX_uSD_H7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001601c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080162bc  080162bc  000262bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080163f0  080163f0  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  080163f0  080163f0  000263f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080163f8  080163f8  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080163f8  080163f8  000263f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080163fc  080163fc  000263fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  24000000  08016400  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015444  24000080  08016470  00030080  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  240154c4  08016470  000354c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005a1f1  00000000  00000000  0003009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b73f  00000000  00000000  0008a28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  000959d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001968  00000000  00000000  00097aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004c144  00000000  00000000  00099410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000460e8  00000000  00000000  000e5554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b3fde  00000000  00000000  0012b63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002df61a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bd4  00000000  00000000  002df66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080162a4 	.word	0x080162a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	080162a4 	.word	0x080162a4

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	24014eb8 	.word	0x24014eb8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	0009c3ff 	.word	0x0009c3ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	24014f54 	.word	0x24014f54
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	24014ebc 	.word	0x24014ebc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	24014ec0 	.word	0x24014ec0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	240154c0 	.word	0x240154c0

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f015 f805 	bl	80154c8 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f014 fef0 	bl	80152a8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	24014f60 	.word	0x24014f60
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	240154c0 	.word	0x240154c0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	24014f64 	.word	0x24014f64
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	24014ff0 	.word	0x24014ff0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24014ff4 	.word	0x24014ff4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	24014fec 	.word	0x24014fec
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	24014fe8 	.word	0x24014fe8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	24014f54 	.word	0x24014f54
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	24014ebc 	.word	0x24014ebc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	24014ec0 	.word	0x24014ec0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04

08000518 <__aeabi_uldivmod>:
 8000518:	b953      	cbnz	r3, 8000530 <__aeabi_uldivmod+0x18>
 800051a:	b94a      	cbnz	r2, 8000530 <__aeabi_uldivmod+0x18>
 800051c:	2900      	cmp	r1, #0
 800051e:	bf08      	it	eq
 8000520:	2800      	cmpeq	r0, #0
 8000522:	bf1c      	itt	ne
 8000524:	f04f 31ff 	movne.w	r1, #4294967295
 8000528:	f04f 30ff 	movne.w	r0, #4294967295
 800052c:	f000 b974 	b.w	8000818 <__aeabi_idiv0>
 8000530:	f1ad 0c08 	sub.w	ip, sp, #8
 8000534:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000538:	f000 f806 	bl	8000548 <__udivmoddi4>
 800053c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000544:	b004      	add	sp, #16
 8000546:	4770      	bx	lr

08000548 <__udivmoddi4>:
 8000548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800054c:	9d08      	ldr	r5, [sp, #32]
 800054e:	4604      	mov	r4, r0
 8000550:	468e      	mov	lr, r1
 8000552:	2b00      	cmp	r3, #0
 8000554:	d14d      	bne.n	80005f2 <__udivmoddi4+0xaa>
 8000556:	428a      	cmp	r2, r1
 8000558:	4694      	mov	ip, r2
 800055a:	d969      	bls.n	8000630 <__udivmoddi4+0xe8>
 800055c:	fab2 f282 	clz	r2, r2
 8000560:	b152      	cbz	r2, 8000578 <__udivmoddi4+0x30>
 8000562:	fa01 f302 	lsl.w	r3, r1, r2
 8000566:	f1c2 0120 	rsb	r1, r2, #32
 800056a:	fa20 f101 	lsr.w	r1, r0, r1
 800056e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000572:	ea41 0e03 	orr.w	lr, r1, r3
 8000576:	4094      	lsls	r4, r2
 8000578:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800057c:	0c21      	lsrs	r1, r4, #16
 800057e:	fbbe f6f8 	udiv	r6, lr, r8
 8000582:	fa1f f78c 	uxth.w	r7, ip
 8000586:	fb08 e316 	mls	r3, r8, r6, lr
 800058a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800058e:	fb06 f107 	mul.w	r1, r6, r7
 8000592:	4299      	cmp	r1, r3
 8000594:	d90a      	bls.n	80005ac <__udivmoddi4+0x64>
 8000596:	eb1c 0303 	adds.w	r3, ip, r3
 800059a:	f106 30ff 	add.w	r0, r6, #4294967295
 800059e:	f080 811f 	bcs.w	80007e0 <__udivmoddi4+0x298>
 80005a2:	4299      	cmp	r1, r3
 80005a4:	f240 811c 	bls.w	80007e0 <__udivmoddi4+0x298>
 80005a8:	3e02      	subs	r6, #2
 80005aa:	4463      	add	r3, ip
 80005ac:	1a5b      	subs	r3, r3, r1
 80005ae:	b2a4      	uxth	r4, r4
 80005b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80005b4:	fb08 3310 	mls	r3, r8, r0, r3
 80005b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005bc:	fb00 f707 	mul.w	r7, r0, r7
 80005c0:	42a7      	cmp	r7, r4
 80005c2:	d90a      	bls.n	80005da <__udivmoddi4+0x92>
 80005c4:	eb1c 0404 	adds.w	r4, ip, r4
 80005c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80005cc:	f080 810a 	bcs.w	80007e4 <__udivmoddi4+0x29c>
 80005d0:	42a7      	cmp	r7, r4
 80005d2:	f240 8107 	bls.w	80007e4 <__udivmoddi4+0x29c>
 80005d6:	4464      	add	r4, ip
 80005d8:	3802      	subs	r0, #2
 80005da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005de:	1be4      	subs	r4, r4, r7
 80005e0:	2600      	movs	r6, #0
 80005e2:	b11d      	cbz	r5, 80005ec <__udivmoddi4+0xa4>
 80005e4:	40d4      	lsrs	r4, r2
 80005e6:	2300      	movs	r3, #0
 80005e8:	e9c5 4300 	strd	r4, r3, [r5]
 80005ec:	4631      	mov	r1, r6
 80005ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d909      	bls.n	800060a <__udivmoddi4+0xc2>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	f000 80ef 	beq.w	80007da <__udivmoddi4+0x292>
 80005fc:	2600      	movs	r6, #0
 80005fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000602:	4630      	mov	r0, r6
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	fab3 f683 	clz	r6, r3
 800060e:	2e00      	cmp	r6, #0
 8000610:	d14a      	bne.n	80006a8 <__udivmoddi4+0x160>
 8000612:	428b      	cmp	r3, r1
 8000614:	d302      	bcc.n	800061c <__udivmoddi4+0xd4>
 8000616:	4282      	cmp	r2, r0
 8000618:	f200 80f9 	bhi.w	800080e <__udivmoddi4+0x2c6>
 800061c:	1a84      	subs	r4, r0, r2
 800061e:	eb61 0303 	sbc.w	r3, r1, r3
 8000622:	2001      	movs	r0, #1
 8000624:	469e      	mov	lr, r3
 8000626:	2d00      	cmp	r5, #0
 8000628:	d0e0      	beq.n	80005ec <__udivmoddi4+0xa4>
 800062a:	e9c5 4e00 	strd	r4, lr, [r5]
 800062e:	e7dd      	b.n	80005ec <__udivmoddi4+0xa4>
 8000630:	b902      	cbnz	r2, 8000634 <__udivmoddi4+0xec>
 8000632:	deff      	udf	#255	; 0xff
 8000634:	fab2 f282 	clz	r2, r2
 8000638:	2a00      	cmp	r2, #0
 800063a:	f040 8092 	bne.w	8000762 <__udivmoddi4+0x21a>
 800063e:	eba1 010c 	sub.w	r1, r1, ip
 8000642:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000646:	fa1f fe8c 	uxth.w	lr, ip
 800064a:	2601      	movs	r6, #1
 800064c:	0c20      	lsrs	r0, r4, #16
 800064e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000652:	fb07 1113 	mls	r1, r7, r3, r1
 8000656:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800065a:	fb0e f003 	mul.w	r0, lr, r3
 800065e:	4288      	cmp	r0, r1
 8000660:	d908      	bls.n	8000674 <__udivmoddi4+0x12c>
 8000662:	eb1c 0101 	adds.w	r1, ip, r1
 8000666:	f103 38ff 	add.w	r8, r3, #4294967295
 800066a:	d202      	bcs.n	8000672 <__udivmoddi4+0x12a>
 800066c:	4288      	cmp	r0, r1
 800066e:	f200 80cb 	bhi.w	8000808 <__udivmoddi4+0x2c0>
 8000672:	4643      	mov	r3, r8
 8000674:	1a09      	subs	r1, r1, r0
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb1 f0f7 	udiv	r0, r1, r7
 800067c:	fb07 1110 	mls	r1, r7, r0, r1
 8000680:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000684:	fb0e fe00 	mul.w	lr, lr, r0
 8000688:	45a6      	cmp	lr, r4
 800068a:	d908      	bls.n	800069e <__udivmoddi4+0x156>
 800068c:	eb1c 0404 	adds.w	r4, ip, r4
 8000690:	f100 31ff 	add.w	r1, r0, #4294967295
 8000694:	d202      	bcs.n	800069c <__udivmoddi4+0x154>
 8000696:	45a6      	cmp	lr, r4
 8000698:	f200 80bb 	bhi.w	8000812 <__udivmoddi4+0x2ca>
 800069c:	4608      	mov	r0, r1
 800069e:	eba4 040e 	sub.w	r4, r4, lr
 80006a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x9a>
 80006a8:	f1c6 0720 	rsb	r7, r6, #32
 80006ac:	40b3      	lsls	r3, r6
 80006ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80006b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80006b6:	fa20 f407 	lsr.w	r4, r0, r7
 80006ba:	fa01 f306 	lsl.w	r3, r1, r6
 80006be:	431c      	orrs	r4, r3
 80006c0:	40f9      	lsrs	r1, r7
 80006c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006c6:	fa00 f306 	lsl.w	r3, r0, r6
 80006ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80006ce:	0c20      	lsrs	r0, r4, #16
 80006d0:	fa1f fe8c 	uxth.w	lr, ip
 80006d4:	fb09 1118 	mls	r1, r9, r8, r1
 80006d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006dc:	fb08 f00e 	mul.w	r0, r8, lr
 80006e0:	4288      	cmp	r0, r1
 80006e2:	fa02 f206 	lsl.w	r2, r2, r6
 80006e6:	d90b      	bls.n	8000700 <__udivmoddi4+0x1b8>
 80006e8:	eb1c 0101 	adds.w	r1, ip, r1
 80006ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80006f0:	f080 8088 	bcs.w	8000804 <__udivmoddi4+0x2bc>
 80006f4:	4288      	cmp	r0, r1
 80006f6:	f240 8085 	bls.w	8000804 <__udivmoddi4+0x2bc>
 80006fa:	f1a8 0802 	sub.w	r8, r8, #2
 80006fe:	4461      	add	r1, ip
 8000700:	1a09      	subs	r1, r1, r0
 8000702:	b2a4      	uxth	r4, r4
 8000704:	fbb1 f0f9 	udiv	r0, r1, r9
 8000708:	fb09 1110 	mls	r1, r9, r0, r1
 800070c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000710:	fb00 fe0e 	mul.w	lr, r0, lr
 8000714:	458e      	cmp	lr, r1
 8000716:	d908      	bls.n	800072a <__udivmoddi4+0x1e2>
 8000718:	eb1c 0101 	adds.w	r1, ip, r1
 800071c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000720:	d26c      	bcs.n	80007fc <__udivmoddi4+0x2b4>
 8000722:	458e      	cmp	lr, r1
 8000724:	d96a      	bls.n	80007fc <__udivmoddi4+0x2b4>
 8000726:	3802      	subs	r0, #2
 8000728:	4461      	add	r1, ip
 800072a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800072e:	fba0 9402 	umull	r9, r4, r0, r2
 8000732:	eba1 010e 	sub.w	r1, r1, lr
 8000736:	42a1      	cmp	r1, r4
 8000738:	46c8      	mov	r8, r9
 800073a:	46a6      	mov	lr, r4
 800073c:	d356      	bcc.n	80007ec <__udivmoddi4+0x2a4>
 800073e:	d053      	beq.n	80007e8 <__udivmoddi4+0x2a0>
 8000740:	b15d      	cbz	r5, 800075a <__udivmoddi4+0x212>
 8000742:	ebb3 0208 	subs.w	r2, r3, r8
 8000746:	eb61 010e 	sbc.w	r1, r1, lr
 800074a:	fa01 f707 	lsl.w	r7, r1, r7
 800074e:	fa22 f306 	lsr.w	r3, r2, r6
 8000752:	40f1      	lsrs	r1, r6
 8000754:	431f      	orrs	r7, r3
 8000756:	e9c5 7100 	strd	r7, r1, [r5]
 800075a:	2600      	movs	r6, #0
 800075c:	4631      	mov	r1, r6
 800075e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000762:	f1c2 0320 	rsb	r3, r2, #32
 8000766:	40d8      	lsrs	r0, r3
 8000768:	fa0c fc02 	lsl.w	ip, ip, r2
 800076c:	fa21 f303 	lsr.w	r3, r1, r3
 8000770:	4091      	lsls	r1, r2
 8000772:	4301      	orrs	r1, r0
 8000774:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000778:	fa1f fe8c 	uxth.w	lr, ip
 800077c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000780:	fb07 3610 	mls	r6, r7, r0, r3
 8000784:	0c0b      	lsrs	r3, r1, #16
 8000786:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800078a:	fb00 f60e 	mul.w	r6, r0, lr
 800078e:	429e      	cmp	r6, r3
 8000790:	fa04 f402 	lsl.w	r4, r4, r2
 8000794:	d908      	bls.n	80007a8 <__udivmoddi4+0x260>
 8000796:	eb1c 0303 	adds.w	r3, ip, r3
 800079a:	f100 38ff 	add.w	r8, r0, #4294967295
 800079e:	d22f      	bcs.n	8000800 <__udivmoddi4+0x2b8>
 80007a0:	429e      	cmp	r6, r3
 80007a2:	d92d      	bls.n	8000800 <__udivmoddi4+0x2b8>
 80007a4:	3802      	subs	r0, #2
 80007a6:	4463      	add	r3, ip
 80007a8:	1b9b      	subs	r3, r3, r6
 80007aa:	b289      	uxth	r1, r1
 80007ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80007b0:	fb07 3316 	mls	r3, r7, r6, r3
 80007b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007b8:	fb06 f30e 	mul.w	r3, r6, lr
 80007bc:	428b      	cmp	r3, r1
 80007be:	d908      	bls.n	80007d2 <__udivmoddi4+0x28a>
 80007c0:	eb1c 0101 	adds.w	r1, ip, r1
 80007c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80007c8:	d216      	bcs.n	80007f8 <__udivmoddi4+0x2b0>
 80007ca:	428b      	cmp	r3, r1
 80007cc:	d914      	bls.n	80007f8 <__udivmoddi4+0x2b0>
 80007ce:	3e02      	subs	r6, #2
 80007d0:	4461      	add	r1, ip
 80007d2:	1ac9      	subs	r1, r1, r3
 80007d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007d8:	e738      	b.n	800064c <__udivmoddi4+0x104>
 80007da:	462e      	mov	r6, r5
 80007dc:	4628      	mov	r0, r5
 80007de:	e705      	b.n	80005ec <__udivmoddi4+0xa4>
 80007e0:	4606      	mov	r6, r0
 80007e2:	e6e3      	b.n	80005ac <__udivmoddi4+0x64>
 80007e4:	4618      	mov	r0, r3
 80007e6:	e6f8      	b.n	80005da <__udivmoddi4+0x92>
 80007e8:	454b      	cmp	r3, r9
 80007ea:	d2a9      	bcs.n	8000740 <__udivmoddi4+0x1f8>
 80007ec:	ebb9 0802 	subs.w	r8, r9, r2
 80007f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007f4:	3801      	subs	r0, #1
 80007f6:	e7a3      	b.n	8000740 <__udivmoddi4+0x1f8>
 80007f8:	4646      	mov	r6, r8
 80007fa:	e7ea      	b.n	80007d2 <__udivmoddi4+0x28a>
 80007fc:	4620      	mov	r0, r4
 80007fe:	e794      	b.n	800072a <__udivmoddi4+0x1e2>
 8000800:	4640      	mov	r0, r8
 8000802:	e7d1      	b.n	80007a8 <__udivmoddi4+0x260>
 8000804:	46d0      	mov	r8, sl
 8000806:	e77b      	b.n	8000700 <__udivmoddi4+0x1b8>
 8000808:	3b02      	subs	r3, #2
 800080a:	4461      	add	r1, ip
 800080c:	e732      	b.n	8000674 <__udivmoddi4+0x12c>
 800080e:	4630      	mov	r0, r6
 8000810:	e709      	b.n	8000626 <__udivmoddi4+0xde>
 8000812:	4464      	add	r4, ip
 8000814:	3802      	subs	r0, #2
 8000816:	e742      	b.n	800069e <__udivmoddi4+0x156>

08000818 <__aeabi_idiv0>:
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop

0800081c <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af02      	add	r7, sp, #8
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000828:	2334      	movs	r3, #52	; 0x34
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000830:	4a15      	ldr	r2, [pc, #84]	; (8000888 <tx_application_define+0x6c>)
 8000832:	4916      	ldr	r1, [pc, #88]	; (800088c <tx_application_define+0x70>)
 8000834:	4816      	ldr	r0, [pc, #88]	; (8000890 <tx_application_define+0x74>)
 8000836:	f015 f8f1 	bl	8015a1c <_txe_byte_pool_create>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d109      	bne.n	8000854 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <tx_application_define+0x74>)
 8000842:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000844:	68b8      	ldr	r0, [r7, #8]
 8000846:	f000 f8c1 	bl	80009cc <App_ThreadX_Init>
 800084a:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d000      	beq.n	8000854 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000852:	e7fe      	b.n	8000852 <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000854:	2334      	movs	r3, #52	; 0x34
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <tx_application_define+0x78>)
 800085e:	490e      	ldr	r1, [pc, #56]	; (8000898 <tx_application_define+0x7c>)
 8000860:	480e      	ldr	r0, [pc, #56]	; (800089c <tx_application_define+0x80>)
 8000862:	f015 f8db 	bl	8015a1c <_txe_byte_pool_create>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d109      	bne.n	8000880 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&fx_app_byte_pool;
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <tx_application_define+0x80>)
 800086e:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000870:	68b8      	ldr	r0, [r7, #8]
 8000872:	f008 fc47 	bl	8009104 <MX_FileX_Init>
 8000876:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d000      	beq.n	8000880 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 800087e:	e7fe      	b.n	800087e <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2400009c 	.word	0x2400009c
 800088c:	080162bc 	.word	0x080162bc
 8000890:	2400809c 	.word	0x2400809c
 8000894:	240080d0 	.word	0x240080d0
 8000898:	080162d0 	.word	0x080162d0
 800089c:	240120d0 	.word	0x240120d0

080008a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008a4:	4b3d      	ldr	r3, [pc, #244]	; (800099c <SystemInit+0xfc>)
 80008a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008aa:	4a3c      	ldr	r2, [pc, #240]	; (800099c <SystemInit+0xfc>)
 80008ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80008b4:	4b39      	ldr	r3, [pc, #228]	; (800099c <SystemInit+0xfc>)
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	4a38      	ldr	r2, [pc, #224]	; (800099c <SystemInit+0xfc>)
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008c0:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <SystemInit+0x100>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f003 030f 	and.w	r3, r3, #15
 80008c8:	2b06      	cmp	r3, #6
 80008ca:	d807      	bhi.n	80008dc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008cc:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <SystemInit+0x100>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f023 030f 	bic.w	r3, r3, #15
 80008d4:	4a32      	ldr	r2, [pc, #200]	; (80009a0 <SystemInit+0x100>)
 80008d6:	f043 0307 	orr.w	r3, r3, #7
 80008da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008dc:	4b31      	ldr	r3, [pc, #196]	; (80009a4 <SystemInit+0x104>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a30      	ldr	r2, [pc, #192]	; (80009a4 <SystemInit+0x104>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <SystemInit+0x104>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008ee:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <SystemInit+0x104>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	492c      	ldr	r1, [pc, #176]	; (80009a4 <SystemInit+0x104>)
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <SystemInit+0x108>)
 80008f6:	4013      	ands	r3, r2
 80008f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008fa:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <SystemInit+0x100>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	2b00      	cmp	r3, #0
 8000904:	d007      	beq.n	8000916 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000906:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <SystemInit+0x100>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f023 030f 	bic.w	r3, r3, #15
 800090e:	4a24      	ldr	r2, [pc, #144]	; (80009a0 <SystemInit+0x100>)
 8000910:	f043 0307 	orr.w	r3, r3, #7
 8000914:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <SystemInit+0x104>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <SystemInit+0x104>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <SystemInit+0x104>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <SystemInit+0x104>)
 800092a:	4a20      	ldr	r2, [pc, #128]	; (80009ac <SystemInit+0x10c>)
 800092c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <SystemInit+0x104>)
 8000930:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <SystemInit+0x110>)
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <SystemInit+0x104>)
 8000936:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <SystemInit+0x114>)
 8000938:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <SystemInit+0x104>)
 800093c:	2200      	movs	r2, #0
 800093e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <SystemInit+0x104>)
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <SystemInit+0x114>)
 8000944:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <SystemInit+0x104>)
 8000948:	2200      	movs	r2, #0
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <SystemInit+0x104>)
 800094e:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <SystemInit+0x114>)
 8000950:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <SystemInit+0x104>)
 8000954:	2200      	movs	r2, #0
 8000956:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <SystemInit+0x104>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a11      	ldr	r2, [pc, #68]	; (80009a4 <SystemInit+0x104>)
 800095e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000962:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <SystemInit+0x104>)
 8000966:	2200      	movs	r2, #0
 8000968:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <SystemInit+0x118>)
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <SystemInit+0x118>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <SystemInit+0x11c>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <SystemInit+0x120>)
 800097c:	4013      	ands	r3, r2
 800097e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000982:	d202      	bcs.n	800098a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <SystemInit+0x124>)
 8000986:	2201      	movs	r2, #1
 8000988:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <SystemInit+0x128>)
 800098c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000990:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00
 80009a0:	52002000 	.word	0x52002000
 80009a4:	58024400 	.word	0x58024400
 80009a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80009ac:	02020200 	.word	0x02020200
 80009b0:	01ff0000 	.word	0x01ff0000
 80009b4:	01010280 	.word	0x01010280
 80009b8:	580000c0 	.word	0x580000c0
 80009bc:	5c001000 	.word	0x5c001000
 80009c0:	ffff0000 	.word	0xffff0000
 80009c4:	51008108 	.word	0x51008108
 80009c8:	52004000 	.word	0x52004000

080009cc <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80009d8:	68fb      	ldr	r3, [r7, #12]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80009ea:	f012 fabb 	bl	8012f64 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80009fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a00:	bf00      	nop
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <main+0x9c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d004      	beq.n	8000a18 <main+0x24>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	1e5a      	subs	r2, r3, #1
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	dcf4      	bgt.n	8000a02 <main+0xe>
  if ( timeout < 0 )
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	da01      	bge.n	8000a22 <main+0x2e>
  {
  Error_Handler();
 8000a1e:	f000 f9fd 	bl	8000e1c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a22:	f000 fbe3 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f835 	bl	8000a94 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <main+0x9c>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <main+0x9c>)
 8000a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <main+0x9c>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 ff51 	bl	80018f0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 ff67 	bl	8001924 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a5a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a5c:	bf00      	nop
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <main+0x9c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d104      	bne.n	8000a74 <main+0x80>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	1e5a      	subs	r2, r3, #1
 8000a6e:	607a      	str	r2, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	dcf4      	bgt.n	8000a5e <main+0x6a>
if ( timeout < 0 )
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	da01      	bge.n	8000a7e <main+0x8a>
{
Error_Handler();
 8000a7a:	f000 f9cf 	bl	8000e1c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f000 f8fb 	bl	8000c78 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a82:	f000 f8ad 	bl	8000be0 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000a86:	f000 f889 	bl	8000b9c <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000a8a:	f7ff ffac 	bl	80009e6 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <main+0x9a>
 8000a90:	58024400 	.word	0x58024400

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09c      	sub	sp, #112	; 0x70
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	224c      	movs	r2, #76	; 0x4c
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f015 fbf6 	bl	8016294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2220      	movs	r2, #32
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f015 fbf0 	bl	8016294 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ab4:	2004      	movs	r0, #4
 8000ab6:	f000 ff49 	bl	800194c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <SystemClock_Config+0x100>)
 8000ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac2:	4a34      	ldr	r2, [pc, #208]	; (8000b94 <SystemClock_Config+0x100>)
 8000ac4:	f023 0301 	bic.w	r3, r3, #1
 8000ac8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aca:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <SystemClock_Config+0x100>)
 8000acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <SystemClock_Config+0x104>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a2f      	ldr	r2, [pc, #188]	; (8000b98 <SystemClock_Config+0x104>)
 8000ada:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <SystemClock_Config+0x104>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aec:	bf00      	nop
 8000aee:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <SystemClock_Config+0x104>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000afa:	d1f8      	bne.n	8000aee <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000afc:	2303      	movs	r3, #3
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b12:	2302      	movs	r3, #2
 8000b14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b16:	2305      	movs	r3, #5
 8000b18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000b1a:	2330      	movs	r3, #48	; 0x30
 8000b1c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b22:	2305      	movs	r3, #5
 8000b24:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b2a:	2308      	movs	r3, #8
 8000b2c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 ff60 	bl	8001a00 <HAL_RCC_OscConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b46:	f000 f969 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4a:	233f      	movs	r3, #63	; 0x3f
 8000b4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 fba0 	bl	80022b4 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000b7a:	f000 f94f 	bl	8000e1c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000b7e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b82:	2100      	movs	r1, #0
 8000b84:	2000      	movs	r0, #0
 8000b86:	f001 fd4b 	bl	8002620 <HAL_RCC_MCOConfig>
}
 8000b8a:	bf00      	nop
 8000b8c:	3770      	adds	r7, #112	; 0x70
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	58000400 	.word	0x58000400
 8000b98:	58024800 	.word	0x58024800

08000b9c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <MX_SDMMC1_SD_Init+0x40>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_SDMMC1_SD_Init+0x3c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_SDMMC1_SD_Init+0x3c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_SDMMC1_SD_Init+0x3c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_SDMMC1_SD_Init+0x3c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_SDMMC1_SD_Init+0x3c>)
 8000bc6:	f004 fceb 	bl	80055a0 <HAL_SD_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000bd0:	f000 f924 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	24012104 	.word	0x24012104
 8000bdc:	52007000 	.word	0x52007000

08000be0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000be6:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <MX_USART1_UART_Init+0x94>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c2a:	f006 fbcb 	bl	80073c4 <HAL_UART_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c34:	f000 f8f2 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c3c:	f007 fbcd 	bl	80083da <HAL_UARTEx_SetTxFifoThreshold>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c46:	f000 f8e9 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c4e:	f007 fc02 	bl	8008456 <HAL_UARTEx_SetRxFifoThreshold>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c58:	f000 f8e0 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_USART1_UART_Init+0x90>)
 8000c5e:	f007 fb83 	bl	8008368 <HAL_UARTEx_DisableFifoMode>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 f8d8 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	24012180 	.word	0x24012180
 8000c74:	40011000 	.word	0x40011000

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b56      	ldr	r3, [pc, #344]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a54      	ldr	r2, [pc, #336]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b52      	ldr	r3, [pc, #328]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cac:	4b4e      	ldr	r3, [pc, #312]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a4d      	ldr	r2, [pc, #308]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b4a      	ldr	r3, [pc, #296]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b47      	ldr	r3, [pc, #284]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	4a45      	ldr	r2, [pc, #276]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cda:	4b43      	ldr	r3, [pc, #268]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce8:	4b3f      	ldr	r3, [pc, #252]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	4a3e      	ldr	r2, [pc, #248]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf8:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d06:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	4a36      	ldr	r2, [pc, #216]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d24:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d34:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <MX_GPIO_Init+0x170>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d48:	4828      	ldr	r0, [pc, #160]	; (8000dec <MX_GPIO_Init+0x174>)
 8000d4a:	f000 fd83 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_Reset_GPIO_Port, DSI_Reset_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2108      	movs	r1, #8
 8000d52:	4827      	ldr	r0, [pc, #156]	; (8000df0 <MX_GPIO_Init+0x178>)
 8000d54:	f000 fd7e 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d5e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481f      	ldr	r0, [pc, #124]	; (8000dec <MX_GPIO_Init+0x174>)
 8000d70:	f000 fba8 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4818      	ldr	r0, [pc, #96]	; (8000df4 <MX_GPIO_Init+0x17c>)
 8000d92:	f000 fb97 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000d96:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000da0:	2302      	movs	r3, #2
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	480f      	ldr	r0, [pc, #60]	; (8000dec <MX_GPIO_Init+0x174>)
 8000db0:	f000 fb88 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_Reset_Pin */
  GPIO_InitStruct.Pin = DSI_Reset_Pin;
 8000db4:	2308      	movs	r3, #8
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DSI_Reset_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4809      	ldr	r0, [pc, #36]	; (8000df0 <MX_GPIO_Init+0x178>)
 8000dcc:	f000 fb7a 	bl	80014c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	210e      	movs	r1, #14
 8000dd4:	2017      	movs	r0, #23
 8000dd6:	f000 fb4d 	bl	8001474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dda:	2017      	movs	r0, #23
 8000ddc:	f000 fb64 	bl	80014a8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de0:	bf00      	nop
 8000de2:	3730      	adds	r7, #48	; 0x30
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58022000 	.word	0x58022000
 8000df0:	58021800 	.word	0x58021800
 8000df4:	58020000 	.word	0x58020000

08000df8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d101      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e0a:	f000 fa2b 	bl	8001264 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40001000 	.word	0x40001000

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_MspInit+0x30>)
 8000e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e34:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <HAL_MspInit+0x30>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_MspInit+0x30>)
 8000e40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	58024400 	.word	0x58024400

08000e5c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0be      	sub	sp, #248	; 0xf8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	22c8      	movs	r2, #200	; 0xc8
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f015 fa09 	bl	8016294 <memset>
  if(hsd->Instance==SDMMC1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a3c      	ldr	r2, [pc, #240]	; (8000f78 <HAL_SD_MspInit+0x11c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d171      	bne.n	8000f70 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000e8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f001 fe3f 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000eac:	f7ff ffb6 	bl	8000e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000eb0:	4b32      	ldr	r3, [pc, #200]	; (8000f7c <HAL_SD_MspInit+0x120>)
 8000eb2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000eb6:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <HAL_SD_MspInit+0x120>)
 8000eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ebc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <HAL_SD_MspInit+0x120>)
 8000ec2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <HAL_SD_MspInit+0x120>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed4:	4a29      	ldr	r2, [pc, #164]	; (8000f7c <HAL_SD_MspInit+0x120>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <HAL_SD_MspInit+0x120>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eec:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <HAL_SD_MspInit+0x120>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef2:	4a22      	ldr	r2, [pc, #136]	; (8000f7c <HAL_SD_MspInit+0x120>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_SD_MspInit+0x120>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000f0a:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f24:	230c      	movs	r3, #12
 8000f26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4813      	ldr	r0, [pc, #76]	; (8000f80 <HAL_SD_MspInit+0x124>)
 8000f32:	f000 fac7 	bl	80014c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000f36:	2304      	movs	r3, #4
 8000f38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f4e:	230c      	movs	r3, #12
 8000f50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480a      	ldr	r0, [pc, #40]	; (8000f84 <HAL_SD_MspInit+0x128>)
 8000f5c:	f000 fab2 	bl	80014c4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2031      	movs	r0, #49	; 0x31
 8000f66:	f000 fa85 	bl	8001474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000f6a:	2031      	movs	r0, #49	; 0x31
 8000f6c:	f000 fa9c 	bl	80014a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000f70:	bf00      	nop
 8000f72:	37f8      	adds	r7, #248	; 0xf8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	52007000 	.word	0x52007000
 8000f7c:	58024400 	.word	0x58024400
 8000f80:	58020800 	.word	0x58020800
 8000f84:	58020c00 	.word	0x58020c00

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0bc      	sub	sp, #240	; 0xf0
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	22c8      	movs	r2, #200	; 0xc8
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f015 f973 	bl	8016294 <memset>
  if(huart->Instance==USART1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a27      	ldr	r2, [pc, #156]	; (8001050 <HAL_UART_MspInit+0xc8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d146      	bne.n	8001046 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fb8:	f04f 0201 	mov.w	r2, #1
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fda8 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fda:	f7ff ff1f 	bl	8000e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_UART_MspInit+0xcc>)
 8000fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <HAL_UART_MspInit+0xcc>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_UART_MspInit+0xcc>)
 8000ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_UART_MspInit+0xcc>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <HAL_UART_MspInit+0xcc>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_UART_MspInit+0xcc>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800101a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800101e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001034:	2307      	movs	r3, #7
 8001036:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_UART_MspInit+0xd0>)
 8001042:	f000 fa3f 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	37f0      	adds	r7, #240	; 0xf0
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40011000 	.word	0x40011000
 8001054:	58024400 	.word	0x58024400
 8001058:	58020000 	.word	0x58020000

0800105c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b090      	sub	sp, #64	; 0x40
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	d827      	bhi.n	80010ba <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800106a:	2200      	movs	r2, #0
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	2036      	movs	r0, #54	; 0x36
 8001070:	f000 fa00 	bl	8001474 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001074:	2036      	movs	r0, #54	; 0x36
 8001076:	f000 fa17 	bl	80014a8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800107a:	4a29      	ldr	r2, [pc, #164]	; (8001120 <HAL_InitTick+0xc4>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <HAL_InitTick+0xc8>)
 8001082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001086:	4a27      	ldr	r2, [pc, #156]	; (8001124 <HAL_InitTick+0xc8>)
 8001088:	f043 0310 	orr.w	r3, r3, #16
 800108c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <HAL_InitTick+0xc8>)
 8001092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800109e:	f107 0210 	add.w	r2, r7, #16
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 fcf9 	bl	8002aa0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d106      	bne.n	80010c6 <HAL_InitTick+0x6a>
 80010b8:	e001      	b.n	80010be <HAL_InitTick+0x62>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e02b      	b.n	8001116 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010be:	f001 fcc3 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 80010c2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80010c4:	e004      	b.n	80010d0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010c6:	f001 fcbf 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 80010ca:	4603      	mov	r3, r0
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <HAL_InitTick+0xcc>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	0c9b      	lsrs	r3, r3, #18
 80010da:	3b01      	subs	r3, #1
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_InitTick+0xd0>)
 80010e0:	4a13      	ldr	r2, [pc, #76]	; (8001130 <HAL_InitTick+0xd4>)
 80010e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_InitTick+0xd0>)
 80010e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010ec:	4a0f      	ldr	r2, [pc, #60]	; (800112c <HAL_InitTick+0xd0>)
 80010ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_InitTick+0xd0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_InitTick+0xd0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <HAL_InitTick+0xd0>)
 8001100:	f005 fe86 	bl	8006e10 <HAL_TIM_Base_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d104      	bne.n	8001114 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800110a:	4808      	ldr	r0, [pc, #32]	; (800112c <HAL_InitTick+0xd0>)
 800110c:	f005 fee2 	bl	8006ed4 <HAL_TIM_Base_Start_IT>
 8001110:	4603      	mov	r3, r0
 8001112:	e000      	b.n	8001116 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
}
 8001116:	4618      	mov	r0, r3
 8001118:	3740      	adds	r7, #64	; 0x40
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	24000008 	.word	0x24000008
 8001124:	58024400 	.word	0x58024400
 8001128:	431bde83 	.word	0x431bde83
 800112c:	24012214 	.word	0x24012214
 8001130:	40001000 	.word	0x40001000

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(uSD_Detect_Pin);
 8001164:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001168:	f000 fba7 	bl	80018ba <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <SDMMC1_IRQHandler+0x10>)
 8001176:	f004 fc83 	bl	8005a80 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	24012104 	.word	0x24012104

08001184 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <TIM6_DAC_IRQHandler+0x10>)
 800118a:	f005 ff1b 	bl	8006fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	24012214 	.word	0x24012214

08001198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800119c:	f7ff fb80 	bl	80008a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	; (80011d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	; (80011e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c6:	f015 f833 	bl	8016230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ca:	f7ff fc13 	bl	80009f4 <main>
  bx  lr
 80011ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011d8:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 80011dc:	08016400 	.word	0x08016400
  ldr r2, =_sbss
 80011e0:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80011e4:	240154c4 	.word	0x240154c4

080011e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC3_IRQHandler>
	...

080011ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f2:	2003      	movs	r0, #3
 80011f4:	f000 f933 	bl	800145e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011f8:	f001 fa7c 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80011fc:	4602      	mov	r2, r0
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_Init+0x68>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	0a1b      	lsrs	r3, r3, #8
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	4913      	ldr	r1, [pc, #76]	; (8001258 <HAL_Init+0x6c>)
 800120a:	5ccb      	ldrb	r3, [r1, r3]
 800120c:	f003 031f 	and.w	r3, r3, #31
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_Init+0x68>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_Init+0x6c>)
 8001220:	5cd3      	ldrb	r3, [r2, r3]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	fa22 f303 	lsr.w	r3, r2, r3
 800122c:	4a0b      	ldr	r2, [pc, #44]	; (800125c <HAL_Init+0x70>)
 800122e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001230:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <HAL_Init+0x74>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001236:	200f      	movs	r0, #15
 8001238:	f7ff ff10 	bl	800105c <HAL_InitTick>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e002      	b.n	800124c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001246:	f7ff fdef 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	58024400 	.word	0x58024400
 8001258:	080163b8 	.word	0x080163b8
 800125c:	24000004 	.word	0x24000004
 8001260:	24000000 	.word	0x24000000

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2400000c 	.word	0x2400000c
 8001288:	24012260 	.word	0x24012260

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	24012260 	.word	0x24012260

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2400000c 	.word	0x2400000c

080012ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetREVID+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0c1b      	lsrs	r3, r3, #16
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	5c001000 	.word	0x5c001000

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <__NVIC_SetPriorityGrouping+0x40>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	4313      	orrs	r3, r2
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <__NVIC_SetPriorityGrouping+0x40>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00
 8001348:	05fa0000 	.word	0x05fa0000

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <__NVIC_EnableIRQ+0x38>)
 8001382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff4c 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001482:	f7ff ff63 	bl	800134c <__NVIC_GetPriorityGrouping>
 8001486:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	6978      	ldr	r0, [r7, #20]
 800148e:	f7ff ffb3 	bl	80013f8 <NVIC_EncodePriority>
 8001492:	4602      	mov	r2, r0
 8001494:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff82 	bl	80013a4 <__NVIC_SetPriority>
}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff56 	bl	8001368 <__NVIC_EnableIRQ>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014d2:	4b89      	ldr	r3, [pc, #548]	; (80016f8 <HAL_GPIO_Init+0x234>)
 80014d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014d6:	e194      	b.n	8001802 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2101      	movs	r1, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8186 	beq.w	80017fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d005      	beq.n	8001508 <HAL_GPIO_Init+0x44>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d130      	bne.n	800156a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800153e:	2201      	movs	r2, #1
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	f003 0201 	and.w	r2, r3, #1
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b03      	cmp	r3, #3
 8001574:	d017      	beq.n	80015a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d123      	bne.n	80015fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	08da      	lsrs	r2, r3, #3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3208      	adds	r2, #8
 80015f4:	69b9      	ldr	r1, [r7, #24]
 80015f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0203 	and.w	r2, r3, #3
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 80e0 	beq.w	80017fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163c:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <HAL_GPIO_Init+0x238>)
 800163e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001642:	4a2e      	ldr	r2, [pc, #184]	; (80016fc <HAL_GPIO_Init+0x238>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_GPIO_Init+0x238>)
 800164e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165a:	4a29      	ldr	r2, [pc, #164]	; (8001700 <HAL_GPIO_Init+0x23c>)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	220f      	movs	r2, #15
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a20      	ldr	r2, [pc, #128]	; (8001704 <HAL_GPIO_Init+0x240>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d052      	beq.n	800172c <HAL_GPIO_Init+0x268>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <HAL_GPIO_Init+0x244>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d031      	beq.n	80016f2 <HAL_GPIO_Init+0x22e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a1e      	ldr	r2, [pc, #120]	; (800170c <HAL_GPIO_Init+0x248>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d02b      	beq.n	80016ee <HAL_GPIO_Init+0x22a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <HAL_GPIO_Init+0x24c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d025      	beq.n	80016ea <HAL_GPIO_Init+0x226>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <HAL_GPIO_Init+0x250>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01f      	beq.n	80016e6 <HAL_GPIO_Init+0x222>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <HAL_GPIO_Init+0x254>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0x21e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a1a      	ldr	r2, [pc, #104]	; (800171c <HAL_GPIO_Init+0x258>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x21a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_GPIO_Init+0x25c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x216>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a18      	ldr	r2, [pc, #96]	; (8001724 <HAL_GPIO_Init+0x260>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x212>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a17      	ldr	r2, [pc, #92]	; (8001728 <HAL_GPIO_Init+0x264>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x20e>
 80016ce:	2309      	movs	r3, #9
 80016d0:	e02d      	b.n	800172e <HAL_GPIO_Init+0x26a>
 80016d2:	230a      	movs	r3, #10
 80016d4:	e02b      	b.n	800172e <HAL_GPIO_Init+0x26a>
 80016d6:	2308      	movs	r3, #8
 80016d8:	e029      	b.n	800172e <HAL_GPIO_Init+0x26a>
 80016da:	2307      	movs	r3, #7
 80016dc:	e027      	b.n	800172e <HAL_GPIO_Init+0x26a>
 80016de:	2306      	movs	r3, #6
 80016e0:	e025      	b.n	800172e <HAL_GPIO_Init+0x26a>
 80016e2:	2305      	movs	r3, #5
 80016e4:	e023      	b.n	800172e <HAL_GPIO_Init+0x26a>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e021      	b.n	800172e <HAL_GPIO_Init+0x26a>
 80016ea:	2303      	movs	r3, #3
 80016ec:	e01f      	b.n	800172e <HAL_GPIO_Init+0x26a>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e01d      	b.n	800172e <HAL_GPIO_Init+0x26a>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e01b      	b.n	800172e <HAL_GPIO_Init+0x26a>
 80016f6:	bf00      	nop
 80016f8:	58000080 	.word	0x58000080
 80016fc:	58024400 	.word	0x58024400
 8001700:	58000400 	.word	0x58000400
 8001704:	58020000 	.word	0x58020000
 8001708:	58020400 	.word	0x58020400
 800170c:	58020800 	.word	0x58020800
 8001710:	58020c00 	.word	0x58020c00
 8001714:	58021000 	.word	0x58021000
 8001718:	58021400 	.word	0x58021400
 800171c:	58021800 	.word	0x58021800
 8001720:	58021c00 	.word	0x58021c00
 8001724:	58022000 	.word	0x58022000
 8001728:	58022400 	.word	0x58022400
 800172c:	2300      	movs	r3, #0
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	f002 0203 	and.w	r2, r2, #3
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	4093      	lsls	r3, r2
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800173e:	4938      	ldr	r1, [pc, #224]	; (8001820 <HAL_GPIO_Init+0x35c>)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	3301      	adds	r3, #1
 8001800:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	f47f ae63 	bne.w	80014d8 <HAL_GPIO_Init+0x14>
  }
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	3724      	adds	r7, #36	; 0x24
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	58000400 	.word	0x58000400

08001824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e001      	b.n	8001846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001870:	e003      	b.n	800187a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001886:	b480      	push	{r7}
 8001888:	b085      	sub	sp, #20
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001898:	887a      	ldrh	r2, [r7, #2]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4013      	ands	r3, r2
 800189e:	041a      	lsls	r2, r3, #16
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	400b      	ands	r3, r1
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	619a      	str	r2, [r3, #24]
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f007 fd87 	bl	80093f4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80018f8:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_HSEM_FastTake+0x2c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3320      	adds	r3, #32
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <HAL_HSEM_FastTake+0x30>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	e000      	b.n	800190e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	58026400 	.word	0x58026400
 8001920:	80000300 	.word	0x80000300

08001924 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800192e:	4906      	ldr	r1, [pc, #24]	; (8001948 <HAL_HSEM_Release+0x24>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	58026400 	.word	0x58026400

0800194c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_PWREx_ConfigSupply+0xb0>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	2b06      	cmp	r3, #6
 800195e:	d00a      	beq.n	8001976 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_PWREx_ConfigSupply+0xb0>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	d001      	beq.n	8001972 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e040      	b.n	80019f4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e03e      	b.n	80019f4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_PWREx_ConfigSupply+0xb0>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800197e:	491f      	ldr	r1, [pc, #124]	; (80019fc <HAL_PWREx_ConfigSupply+0xb0>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4313      	orrs	r3, r2
 8001984:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001986:	f7ff fc81 	bl	800128c <HAL_GetTick>
 800198a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800198c:	e009      	b.n	80019a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800198e:	f7ff fc7d 	bl	800128c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800199c:	d901      	bls.n	80019a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e028      	b.n	80019f4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_PWREx_ConfigSupply+0xb0>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ae:	d1ee      	bne.n	800198e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b1e      	cmp	r3, #30
 80019b4:	d008      	beq.n	80019c8 <HAL_PWREx_ConfigSupply+0x7c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b2e      	cmp	r3, #46	; 0x2e
 80019ba:	d005      	beq.n	80019c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b1d      	cmp	r3, #29
 80019c0:	d002      	beq.n	80019c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b2d      	cmp	r3, #45	; 0x2d
 80019c6:	d114      	bne.n	80019f2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80019c8:	f7ff fc60 	bl	800128c <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80019ce:	e009      	b.n	80019e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019d0:	f7ff fc5c 	bl	800128c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019de:	d901      	bls.n	80019e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e007      	b.n	80019f4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_PWREx_ConfigSupply+0xb0>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d1ee      	bne.n	80019d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	58024800 	.word	0x58024800

08001a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	; 0x30
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f000 bc48 	b.w	80022a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8088 	beq.w	8001b32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a22:	4b99      	ldr	r3, [pc, #612]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a2c:	4b96      	ldr	r3, [pc, #600]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a34:	2b10      	cmp	r3, #16
 8001a36:	d007      	beq.n	8001a48 <HAL_RCC_OscConfig+0x48>
 8001a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3a:	2b18      	cmp	r3, #24
 8001a3c:	d111      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62>
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d10c      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a48:	4b8f      	ldr	r3, [pc, #572]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d06d      	beq.n	8001b30 <HAL_RCC_OscConfig+0x130>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d169      	bne.n	8001b30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f000 bc21 	b.w	80022a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x7a>
 8001a6c:	4b86      	ldr	r3, [pc, #536]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a85      	ldr	r2, [pc, #532]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e02e      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd8>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x9c>
 8001a82:	4b81      	ldr	r3, [pc, #516]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a80      	ldr	r2, [pc, #512]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b7e      	ldr	r3, [pc, #504]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a7d      	ldr	r2, [pc, #500]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e01d      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xc0>
 8001aa6:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a77      	ldr	r2, [pc, #476]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a74      	ldr	r2, [pc, #464]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd8>
 8001ac0:	4b71      	ldr	r3, [pc, #452]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a70      	ldr	r2, [pc, #448]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b6e      	ldr	r3, [pc, #440]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a6d      	ldr	r2, [pc, #436]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fbd4 	bl	800128c <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fbd0 	bl	800128c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e3d4      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xe8>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff fbc0 	bl	800128c <HAL_GetTick>
 8001b0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff fbbc 	bl	800128c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e3c0      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b22:	4b59      	ldr	r3, [pc, #356]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x110>
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80ca 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b40:	4b51      	ldr	r3, [pc, #324]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b4a:	4b4f      	ldr	r3, [pc, #316]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_RCC_OscConfig+0x166>
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	2b18      	cmp	r3, #24
 8001b5a:	d156      	bne.n	8001c0a <HAL_RCC_OscConfig+0x20a>
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d151      	bne.n	8001c0a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b66:	4b48      	ldr	r3, [pc, #288]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_RCC_OscConfig+0x17e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e392      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b7e:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0219 	bic.w	r2, r3, #25
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	493f      	ldr	r1, [pc, #252]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb7c 	bl	800128c <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b98:	f7ff fb78 	bl	800128c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e37c      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb6:	f7ff fb99 	bl	80012ec <HAL_GetREVID>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d817      	bhi.n	8001bf4 <HAL_RCC_OscConfig+0x1f4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b40      	cmp	r3, #64	; 0x40
 8001bca:	d108      	bne.n	8001bde <HAL_RCC_OscConfig+0x1de>
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bda:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bdc:	e07a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	031b      	lsls	r3, r3, #12
 8001bec:	4926      	ldr	r1, [pc, #152]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf2:	e06f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	4921      	ldr	r1, [pc, #132]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c08:	e064      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d047      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0219 	bic.w	r2, r3, #25
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	491a      	ldr	r1, [pc, #104]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff fb32 	bl	800128c <HAL_GetTick>
 8001c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fb2e 	bl	800128c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e332      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	f7ff fb4f 	bl	80012ec <HAL_GetREVID>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d819      	bhi.n	8001c8c <HAL_RCC_OscConfig+0x28c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d108      	bne.n	8001c72 <HAL_RCC_OscConfig+0x272>
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c68:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6e:	6053      	str	r3, [r2, #4]
 8001c70:	e030      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2d4>
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	031b      	lsls	r3, r3, #12
 8001c80:	4901      	ldr	r1, [pc, #4]	; (8001c88 <HAL_RCC_OscConfig+0x288>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
 8001c86:	e025      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2d4>
 8001c88:	58024400 	.word	0x58024400
 8001c8c:	4b9a      	ldr	r3, [pc, #616]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	4997      	ldr	r1, [pc, #604]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
 8001ca0:	e018      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca2:	4b95      	ldr	r3, [pc, #596]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a94      	ldr	r2, [pc, #592]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7ff faed 	bl	800128c <HAL_GetTick>
 8001cb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff fae9 	bl	800128c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e2ed      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cc8:	4b8b      	ldr	r3, [pc, #556]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80a9 	beq.w	8001e34 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce2:	4b85      	ldr	r3, [pc, #532]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cec:	4b82      	ldr	r3, [pc, #520]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d007      	beq.n	8001d08 <HAL_RCC_OscConfig+0x308>
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b18      	cmp	r3, #24
 8001cfc:	d13a      	bne.n	8001d74 <HAL_RCC_OscConfig+0x374>
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d135      	bne.n	8001d74 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d08:	4b7b      	ldr	r3, [pc, #492]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_OscConfig+0x320>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	2b80      	cmp	r3, #128	; 0x80
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e2c1      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d20:	f7ff fae4 	bl	80012ec <HAL_GetREVID>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d817      	bhi.n	8001d5e <HAL_RCC_OscConfig+0x35e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d108      	bne.n	8001d48 <HAL_RCC_OscConfig+0x348>
 8001d36:	4b70      	ldr	r3, [pc, #448]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d44:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d46:	e075      	b.n	8001e34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d48:	4b6b      	ldr	r3, [pc, #428]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	069b      	lsls	r3, r3, #26
 8001d56:	4968      	ldr	r1, [pc, #416]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d5c:	e06a      	b.n	8001e34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d5e:	4b66      	ldr	r3, [pc, #408]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	061b      	lsls	r3, r3, #24
 8001d6c:	4962      	ldr	r1, [pc, #392]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d72:	e05f      	b.n	8001e34 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d042      	beq.n	8001e02 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a5d      	ldr	r2, [pc, #372]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff fa80 	bl	800128c <HAL_GetTick>
 8001d8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d90:	f7ff fa7c 	bl	800128c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e280      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001da2:	4b55      	ldr	r3, [pc, #340]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dae:	f7ff fa9d 	bl	80012ec <HAL_GetREVID>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d817      	bhi.n	8001dec <HAL_RCC_OscConfig+0x3ec>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d108      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3d6>
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001dce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dd2:	6053      	str	r3, [r2, #4]
 8001dd4:	e02e      	b.n	8001e34 <HAL_RCC_OscConfig+0x434>
 8001dd6:	4b48      	ldr	r3, [pc, #288]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	069b      	lsls	r3, r3, #26
 8001de4:	4944      	ldr	r1, [pc, #272]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
 8001dea:	e023      	b.n	8001e34 <HAL_RCC_OscConfig+0x434>
 8001dec:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	493f      	ldr	r1, [pc, #252]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60cb      	str	r3, [r1, #12]
 8001e00:	e018      	b.n	8001e34 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e02:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a3c      	ldr	r2, [pc, #240]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fa3d 	bl	800128c <HAL_GetTick>
 8001e12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e16:	f7ff fa39 	bl	800128c <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e23d      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e28:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d036      	beq.n	8001eae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d019      	beq.n	8001e7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e4c:	4a2a      	ldr	r2, [pc, #168]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff fa1a 	bl	800128c <HAL_GetTick>
 8001e58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fa16 	bl	800128c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e21a      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e6e:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x45c>
 8001e7a:	e018      	b.n	8001eae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	f023 0301 	bic.w	r3, r3, #1
 8001e86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7ff fa00 	bl	800128c <HAL_GetTick>
 8001e8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7ff f9fc 	bl	800128c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e200      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d039      	beq.n	8001f2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01c      	beq.n	8001efc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001ec8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ecc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ece:	f7ff f9dd 	bl	800128c <HAL_GetTick>
 8001ed2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed6:	f7ff f9d9 	bl	800128c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1dd      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x4d6>
 8001ef4:	e01b      	b.n	8001f2e <HAL_RCC_OscConfig+0x52e>
 8001ef6:	bf00      	nop
 8001ef8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001efc:	4b9b      	ldr	r3, [pc, #620]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a9a      	ldr	r2, [pc, #616]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f08:	f7ff f9c0 	bl	800128c <HAL_GetTick>
 8001f0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f10:	f7ff f9bc 	bl	800128c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e1c0      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f22:	4b92      	ldr	r3, [pc, #584]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8081 	beq.w	800203e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f3c:	4b8c      	ldr	r3, [pc, #560]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a8b      	ldr	r2, [pc, #556]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f48:	f7ff f9a0 	bl	800128c <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f50:	f7ff f99c 	bl	800128c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1a0      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f62:	4b83      	ldr	r3, [pc, #524]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d106      	bne.n	8001f84 <HAL_RCC_OscConfig+0x584>
 8001f76:	4b7d      	ldr	r3, [pc, #500]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	4a7c      	ldr	r2, [pc, #496]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6713      	str	r3, [r2, #112]	; 0x70
 8001f82:	e02d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x5e0>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10c      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x5a6>
 8001f8c:	4b77      	ldr	r3, [pc, #476]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a76      	ldr	r2, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
 8001f98:	4b74      	ldr	r3, [pc, #464]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	4a73      	ldr	r2, [pc, #460]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001f9e:	f023 0304 	bic.w	r3, r3, #4
 8001fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa4:	e01c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x5e0>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x5c8>
 8001fae:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	4a6e      	ldr	r2, [pc, #440]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fba:	4b6c      	ldr	r3, [pc, #432]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	4a6b      	ldr	r2, [pc, #428]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc6:	e00b      	b.n	8001fe0 <HAL_RCC_OscConfig+0x5e0>
 8001fc8:	4b68      	ldr	r3, [pc, #416]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4a67      	ldr	r2, [pc, #412]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd4:	4b65      	ldr	r3, [pc, #404]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	4a64      	ldr	r2, [pc, #400]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8001fda:	f023 0304 	bic.w	r3, r3, #4
 8001fde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d015      	beq.n	8002014 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7ff f950 	bl	800128c <HAL_GetTick>
 8001fec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7ff f94c 	bl	800128c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e14e      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002006:	4b59      	ldr	r3, [pc, #356]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0ee      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x5f0>
 8002012:	e014      	b.n	800203e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7ff f93a 	bl	800128c <HAL_GetTick>
 8002018:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800201a:	e00a      	b.n	8002032 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201c:	f7ff f936 	bl	800128c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	; 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e138      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002032:	4b4e      	ldr	r3, [pc, #312]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1ee      	bne.n	800201c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 812d 	beq.w	80022a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002048:	4b48      	ldr	r3, [pc, #288]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002050:	2b18      	cmp	r3, #24
 8002052:	f000 80bd 	beq.w	80021d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	2b02      	cmp	r3, #2
 800205c:	f040 809e 	bne.w	800219c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002060:	4b42      	ldr	r3, [pc, #264]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a41      	ldr	r2, [pc, #260]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800206a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7ff f90e 	bl	800128c <HAL_GetTick>
 8002070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff f90a 	bl	800128c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e10e      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002086:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002092:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002096:	4b37      	ldr	r3, [pc, #220]	; (8002174 <HAL_RCC_OscConfig+0x774>)
 8002098:	4013      	ands	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	430a      	orrs	r2, r1
 80020a6:	4931      	ldr	r1, [pc, #196]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	628b      	str	r3, [r1, #40]	; 0x28
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	3b01      	subs	r3, #1
 80020b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	3b01      	subs	r3, #1
 80020bc:	025b      	lsls	r3, r3, #9
 80020be:	b29b      	uxth	r3, r3
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	3b01      	subs	r3, #1
 80020c8:	041b      	lsls	r3, r3, #16
 80020ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	3b01      	subs	r3, #1
 80020d6:	061b      	lsls	r3, r3, #24
 80020d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80020dc:	4923      	ldr	r1, [pc, #140]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80020e2:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	4a21      	ldr	r2, [pc, #132]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 80020f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f2:	4b21      	ldr	r3, [pc, #132]	; (8002178 <HAL_RCC_OscConfig+0x778>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020fa:	00d2      	lsls	r2, r2, #3
 80020fc:	491b      	ldr	r1, [pc, #108]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f023 020c 	bic.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4917      	ldr	r1, [pc, #92]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002110:	4313      	orrs	r3, r2
 8002112:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f023 0202 	bic.w	r2, r3, #2
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	4912      	ldr	r1, [pc, #72]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002122:	4313      	orrs	r3, r2
 8002124:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	4a0d      	ldr	r2, [pc, #52]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002148:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_RCC_OscConfig+0x76c>)
 800215c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7ff f893 	bl	800128c <HAL_GetTick>
 8002166:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002168:	e011      	b.n	800218e <HAL_RCC_OscConfig+0x78e>
 800216a:	bf00      	nop
 800216c:	58024400 	.word	0x58024400
 8002170:	58024800 	.word	0x58024800
 8002174:	fffffc0c 	.word	0xfffffc0c
 8002178:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217c:	f7ff f886 	bl	800128c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e08a      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x77c>
 800219a:	e082      	b.n	80022a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219c:	4b43      	ldr	r3, [pc, #268]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a42      	ldr	r2, [pc, #264]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 80021a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7ff f870 	bl	800128c <HAL_GetTick>
 80021ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7ff f86c 	bl	800128c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e070      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021c2:	4b3a      	ldr	r3, [pc, #232]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x7b0>
 80021ce:	e068      	b.n	80022a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021d0:	4b36      	ldr	r3, [pc, #216]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021d6:	4b35      	ldr	r3, [pc, #212]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d031      	beq.n	8002248 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f003 0203 	and.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d12a      	bne.n	8002248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d122      	bne.n	8002248 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d11a      	bne.n	8002248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	0a5b      	lsrs	r3, r3, #9
 8002216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d111      	bne.n	8002248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	0c1b      	lsrs	r3, r3, #16
 8002228:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d108      	bne.n	8002248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	0e1b      	lsrs	r3, r3, #24
 800223a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e02b      	b.n	80022a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800224c:	4b17      	ldr	r3, [pc, #92]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	08db      	lsrs	r3, r3, #3
 8002252:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002256:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	429a      	cmp	r2, r3
 8002260:	d01f      	beq.n	80022a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800226e:	f7ff f80d 	bl	800128c <HAL_GetTick>
 8002272:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002274:	bf00      	nop
 8002276:	f7ff f809 	bl	800128c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	4293      	cmp	r3, r2
 8002280:	d0f9      	beq.n	8002276 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 8002284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_RCC_OscConfig+0x8b0>)
 8002288:	4013      	ands	r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800228e:	00d2      	lsls	r2, r2, #3
 8002290:	4906      	ldr	r1, [pc, #24]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 8002292:	4313      	orrs	r3, r2
 8002294:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <HAL_RCC_OscConfig+0x8ac>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3730      	adds	r7, #48	; 0x30
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	58024400 	.word	0x58024400
 80022b0:	ffff0007 	.word	0xffff0007

080022b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e19c      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b8a      	ldr	r3, [pc, #552]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d910      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b87      	ldr	r3, [pc, #540]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 020f 	bic.w	r2, r3, #15
 80022de:	4985      	ldr	r1, [pc, #532]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b83      	ldr	r3, [pc, #524]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e184      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d010      	beq.n	8002326 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	4b7b      	ldr	r3, [pc, #492]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002310:	429a      	cmp	r2, r3
 8002312:	d908      	bls.n	8002326 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002314:	4b78      	ldr	r3, [pc, #480]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	4975      	ldr	r1, [pc, #468]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002322:	4313      	orrs	r3, r2
 8002324:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d010      	beq.n	8002354 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	4b70      	ldr	r3, [pc, #448]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800233e:	429a      	cmp	r2, r3
 8002340:	d908      	bls.n	8002354 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002342:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	496a      	ldr	r1, [pc, #424]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002350:	4313      	orrs	r3, r2
 8002352:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d010      	beq.n	8002382 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	4b64      	ldr	r3, [pc, #400]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800236c:	429a      	cmp	r2, r3
 800236e:	d908      	bls.n	8002382 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002370:	4b61      	ldr	r3, [pc, #388]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	495e      	ldr	r1, [pc, #376]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 800237e:	4313      	orrs	r3, r2
 8002380:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	4b59      	ldr	r3, [pc, #356]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800239a:	429a      	cmp	r2, r3
 800239c:	d908      	bls.n	80023b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800239e:	4b56      	ldr	r3, [pc, #344]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4953      	ldr	r1, [pc, #332]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d010      	beq.n	80023de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d908      	bls.n	80023de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f023 020f 	bic.w	r2, r3, #15
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4947      	ldr	r1, [pc, #284]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d055      	beq.n	8002496 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023ea:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4940      	ldr	r1, [pc, #256]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d107      	bne.n	8002414 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002404:	4b3c      	ldr	r3, [pc, #240]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d121      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0f6      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d107      	bne.n	800242c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800241c:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d115      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0ea      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d107      	bne.n	8002444 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002434:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d109      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0de      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002444:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d6      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002454:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f023 0207 	bic.w	r2, r3, #7
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4925      	ldr	r1, [pc, #148]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002462:	4313      	orrs	r3, r2
 8002464:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002466:	f7fe ff11 	bl	800128c <HAL_GetTick>
 800246a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246c:	e00a      	b.n	8002484 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246e:	f7fe ff0d 	bl	800128c <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0be      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002484:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	429a      	cmp	r2, r3
 8002494:	d1eb      	bne.n	800246e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d010      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d208      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f023 020f 	bic.w	r2, r3, #15
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	490e      	ldr	r1, [pc, #56]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d214      	bcs.n	80024fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 020f 	bic.w	r2, r3, #15
 80024da:	4906      	ldr	r1, [pc, #24]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e086      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
 80024f4:	52002000 	.word	0x52002000
 80024f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d010      	beq.n	800252a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	4b3f      	ldr	r3, [pc, #252]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002514:	429a      	cmp	r2, r3
 8002516:	d208      	bcs.n	800252a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002518:	4b3c      	ldr	r3, [pc, #240]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	4939      	ldr	r1, [pc, #228]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 8002526:	4313      	orrs	r3, r2
 8002528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d010      	beq.n	8002558 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	4b34      	ldr	r3, [pc, #208]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002542:	429a      	cmp	r2, r3
 8002544:	d208      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002546:	4b31      	ldr	r3, [pc, #196]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	492e      	ldr	r1, [pc, #184]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 8002554:	4313      	orrs	r3, r2
 8002556:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d010      	beq.n	8002586 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	4b28      	ldr	r3, [pc, #160]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002570:	429a      	cmp	r2, r3
 8002572:	d208      	bcs.n	8002586 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	4922      	ldr	r1, [pc, #136]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 8002582:	4313      	orrs	r3, r2
 8002584:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d010      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69da      	ldr	r2, [r3, #28]
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800259e:	429a      	cmp	r2, r3
 80025a0:	d208      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4917      	ldr	r1, [pc, #92]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025b4:	f000 f89e 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	4912      	ldr	r1, [pc, #72]	; (8002610 <HAL_RCC_ClockConfig+0x35c>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <HAL_RCC_ClockConfig+0x35c>)
 80025dc:	5cd3      	ldrb	r3, [r2, r3]
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
 80025e8:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <HAL_RCC_ClockConfig+0x360>)
 80025ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025ec:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <HAL_RCC_ClockConfig+0x364>)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_RCC_ClockConfig+0x368>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fd30 	bl	800105c <HAL_InitTick>
 80025fc:	4603      	mov	r3, r0
 80025fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	58024400 	.word	0x58024400
 8002610:	080163b8 	.word	0x080163b8
 8002614:	24000004 	.word	0x24000004
 8002618:	24000000 	.word	0x24000000
 800261c:	24000008 	.word	0x24000008

08002620 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08c      	sub	sp, #48	; 0x30
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d12a      	bne.n	8002688 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002632:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_RCC_MCOConfig+0xc8>)
 8002634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002638:	4a2b      	ldr	r2, [pc, #172]	; (80026e8 <HAL_RCC_MCOConfig+0xc8>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002642:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_RCC_MCOConfig+0xc8>)
 8002644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265a:	2303      	movs	r3, #3
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002662:	2300      	movs	r3, #0
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	481f      	ldr	r0, [pc, #124]	; (80026ec <HAL_RCC_MCOConfig+0xcc>)
 800266e:	f7fe ff29 	bl	80014c4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCC_MCOConfig+0xc8>)
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	430b      	orrs	r3, r1
 8002680:	4919      	ldr	r1, [pc, #100]	; (80026e8 <HAL_RCC_MCOConfig+0xc8>)
 8002682:	4313      	orrs	r3, r2
 8002684:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002686:	e02a      	b.n	80026de <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002688:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <HAL_RCC_MCOConfig+0xc8>)
 800268a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268e:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <HAL_RCC_MCOConfig+0xc8>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_RCC_MCOConfig+0xc8>)
 800269a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80026a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	2302      	movs	r3, #2
 80026ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80026bc:	f107 031c 	add.w	r3, r7, #28
 80026c0:	4619      	mov	r1, r3
 80026c2:	480b      	ldr	r0, [pc, #44]	; (80026f0 <HAL_RCC_MCOConfig+0xd0>)
 80026c4:	f7fe fefe 	bl	80014c4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <HAL_RCC_MCOConfig+0xc8>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	01d9      	lsls	r1, r3, #7
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	430b      	orrs	r3, r1
 80026d8:	4903      	ldr	r1, [pc, #12]	; (80026e8 <HAL_RCC_MCOConfig+0xc8>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	610b      	str	r3, [r1, #16]
}
 80026de:	bf00      	nop
 80026e0:	3730      	adds	r7, #48	; 0x30
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	58024400 	.word	0x58024400
 80026ec:	58020000 	.word	0x58020000
 80026f0:	58020800 	.word	0x58020800

080026f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026fa:	4bb3      	ldr	r3, [pc, #716]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002702:	2b18      	cmp	r3, #24
 8002704:	f200 8155 	bhi.w	80029b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002708:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <HAL_RCC_GetSysClockFreq+0x1c>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	08002775 	.word	0x08002775
 8002714:	080029b3 	.word	0x080029b3
 8002718:	080029b3 	.word	0x080029b3
 800271c:	080029b3 	.word	0x080029b3
 8002720:	080029b3 	.word	0x080029b3
 8002724:	080029b3 	.word	0x080029b3
 8002728:	080029b3 	.word	0x080029b3
 800272c:	080029b3 	.word	0x080029b3
 8002730:	0800279b 	.word	0x0800279b
 8002734:	080029b3 	.word	0x080029b3
 8002738:	080029b3 	.word	0x080029b3
 800273c:	080029b3 	.word	0x080029b3
 8002740:	080029b3 	.word	0x080029b3
 8002744:	080029b3 	.word	0x080029b3
 8002748:	080029b3 	.word	0x080029b3
 800274c:	080029b3 	.word	0x080029b3
 8002750:	080027a1 	.word	0x080027a1
 8002754:	080029b3 	.word	0x080029b3
 8002758:	080029b3 	.word	0x080029b3
 800275c:	080029b3 	.word	0x080029b3
 8002760:	080029b3 	.word	0x080029b3
 8002764:	080029b3 	.word	0x080029b3
 8002768:	080029b3 	.word	0x080029b3
 800276c:	080029b3 	.word	0x080029b3
 8002770:	080027a7 	.word	0x080027a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002774:	4b94      	ldr	r3, [pc, #592]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d009      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002780:	4b91      	ldr	r3, [pc, #580]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	08db      	lsrs	r3, r3, #3
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	4a90      	ldr	r2, [pc, #576]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
 8002790:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002792:	e111      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002794:	4b8d      	ldr	r3, [pc, #564]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002796:	61bb      	str	r3, [r7, #24]
      break;
 8002798:	e10e      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800279a:	4b8d      	ldr	r3, [pc, #564]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800279c:	61bb      	str	r3, [r7, #24]
      break;
 800279e:	e10b      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80027a0:	4b8c      	ldr	r3, [pc, #560]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80027a2:	61bb      	str	r3, [r7, #24]
      break;
 80027a4:	e108      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027a6:	4b88      	ldr	r3, [pc, #544]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80027b0:	4b85      	ldr	r3, [pc, #532]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80027bc:	4b82      	ldr	r3, [pc, #520]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80027c6:	4b80      	ldr	r3, [pc, #512]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ca:	08db      	lsrs	r3, r3, #3
 80027cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80e1 	beq.w	80029ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	f000 8083 	beq.w	80028f8 <HAL_RCC_GetSysClockFreq+0x204>
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	f200 80a1 	bhi.w	800293c <HAL_RCC_GetSysClockFreq+0x248>
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x114>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d056      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002806:	e099      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002808:	4b6f      	ldr	r3, [pc, #444]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d02d      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002814:	4b6c      	ldr	r3, [pc, #432]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	08db      	lsrs	r3, r3, #3
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	4a6b      	ldr	r2, [pc, #428]	; (80029cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	ee07 3a90 	vmov	s15, r3
 800282c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800283e:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800284e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002852:	eddf 5a61 	vldr	s11, [pc, #388]	; 80029d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800285a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800285e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800286e:	e087      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80029dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800287e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002882:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002892:	ed97 6a02 	vldr	s12, [r7, #8]
 8002896:	eddf 5a50 	vldr	s11, [pc, #320]	; 80029d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800289a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800289e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028b2:	e065      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	ee07 3a90 	vmov	s15, r3
 80028ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80029e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028c6:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80029d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028f6:	e043      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	ee07 3a90 	vmov	s15, r3
 80028fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002902:	eddf 6a38 	vldr	s13, [pc, #224]	; 80029e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800290a:	4b2f      	ldr	r3, [pc, #188]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800291a:	ed97 6a02 	vldr	s12, [r7, #8]
 800291e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80029d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800292a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800292e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002936:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800293a:	e021      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	ee07 3a90 	vmov	s15, r3
 8002942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002946:	eddf 6a26 	vldr	s13, [pc, #152]	; 80029e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800294a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800294e:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800295e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002962:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80029d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800296a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800296e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800297e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	0a5b      	lsrs	r3, r3, #9
 8002986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800298a:	3301      	adds	r3, #1
 800298c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002998:	edd7 6a07 	vldr	s13, [r7, #28]
 800299c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a4:	ee17 3a90 	vmov	r3, s15
 80029a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80029aa:	e005      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
      break;
 80029b0:	e002      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029b4:	61bb      	str	r3, [r7, #24]
      break;
 80029b6:	bf00      	nop
  }

  return sysclockfreq;
 80029b8:	69bb      	ldr	r3, [r7, #24]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	58024400 	.word	0x58024400
 80029cc:	03d09000 	.word	0x03d09000
 80029d0:	003d0900 	.word	0x003d0900
 80029d4:	017d7840 	.word	0x017d7840
 80029d8:	46000000 	.word	0x46000000
 80029dc:	4c742400 	.word	0x4c742400
 80029e0:	4a742400 	.word	0x4a742400
 80029e4:	4bbebc20 	.word	0x4bbebc20

080029e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80029ee:	f7ff fe81 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <HAL_RCC_GetHCLKFreq+0x50>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	0a1b      	lsrs	r3, r3, #8
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	490f      	ldr	r1, [pc, #60]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x54>)
 8002a00:	5ccb      	ldrb	r3, [r1, r3]
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x54>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a22:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a26:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	58024400 	.word	0x58024400
 8002a3c:	080163b8 	.word	0x080163b8
 8002a40:	24000004 	.word	0x24000004
 8002a44:	24000000 	.word	0x24000000

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a4c:	f7ff ffcc 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4904      	ldr	r1, [pc, #16]	; (8002a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	58024400 	.word	0x58024400
 8002a70:	080163b8 	.word	0x080163b8

08002a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002a78:	f7ff ffb6 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	0a1b      	lsrs	r3, r3, #8
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	4904      	ldr	r1, [pc, #16]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a8a:	5ccb      	ldrb	r3, [r1, r3]
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	58024400 	.word	0x58024400
 8002a9c:	080163b8 	.word	0x080163b8

08002aa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	223f      	movs	r2, #63	; 0x3f
 8002aae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <HAL_RCC_GetClockConfig+0x7c>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f003 0207 	and.w	r2, r3, #7
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_RCC_GetClockConfig+0x7c>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_RCC_GetClockConfig+0x7c>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 020f 	and.w	r2, r3, #15
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_RCC_GetClockConfig+0x7c>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <HAL_RCC_GetClockConfig+0x7c>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_GetClockConfig+0x7c>)
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_RCC_GetClockConfig+0x7c>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_GetClockConfig+0x80>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 020f 	and.w	r2, r3, #15
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	601a      	str	r2, [r3, #0]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	58024400 	.word	0x58024400
 8002b20:	52002000 	.word	0x52002000

08002b24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b28:	b0cc      	sub	sp, #304	; 0x130
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b36:	2300      	movs	r3, #0
 8002b38:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b44:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002b48:	2500      	movs	r5, #0
 8002b4a:	ea54 0305 	orrs.w	r3, r4, r5
 8002b4e:	d049      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002b50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b5a:	d02f      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002b5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b60:	d828      	bhi.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b66:	d01a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b6c:	d822      	bhi.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b76:	d007      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b78:	e01c      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b7a:	4bb8      	ldr	r3, [pc, #736]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	4ab7      	ldr	r2, [pc, #732]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b86:	e01a      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	2102      	movs	r1, #2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f002 fba1 	bl	80052d8 <RCCEx_PLL2_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b9c:	e00f      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ba2:	3328      	adds	r3, #40	; 0x28
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f002 fc48 	bl	800543c <RCCEx_PLL3_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bb2:	e004      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002bba:	e000      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bbe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10a      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002bc6:	4ba5      	ldr	r3, [pc, #660]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd4:	4aa1      	ldr	r2, [pc, #644]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bd6:	430b      	orrs	r3, r1
 8002bd8:	6513      	str	r3, [r2, #80]	; 0x50
 8002bda:	e003      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bdc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002be0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002bf0:	f04f 0900 	mov.w	r9, #0
 8002bf4:	ea58 0309 	orrs.w	r3, r8, r9
 8002bf8:	d047      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d82a      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002c04:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c21 	.word	0x08002c21
 8002c10:	08002c2f 	.word	0x08002c2f
 8002c14:	08002c45 	.word	0x08002c45
 8002c18:	08002c63 	.word	0x08002c63
 8002c1c:	08002c63 	.word	0x08002c63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c20:	4b8e      	ldr	r3, [pc, #568]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	4a8d      	ldr	r2, [pc, #564]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c2c:	e01a      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c32:	3308      	adds	r3, #8
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f002 fb4e 	bl	80052d8 <RCCEx_PLL2_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c42:	e00f      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c48:	3328      	adds	r3, #40	; 0x28
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 fbf5 	bl	800543c <RCCEx_PLL3_Config>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c58:	e004      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c60:	e000      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c64:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c6c:	4b7b      	ldr	r3, [pc, #492]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c70:	f023 0107 	bic.w	r1, r3, #7
 8002c74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	4a78      	ldr	r2, [pc, #480]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6513      	str	r3, [r2, #80]	; 0x50
 8002c80:	e003      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c82:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c86:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002c96:	f04f 0b00 	mov.w	fp, #0
 8002c9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c9e:	d04c      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002ca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002caa:	d030      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb0:	d829      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8002cb4:	d02d      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8002cb8:	d825      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002cba:	2b80      	cmp	r3, #128	; 0x80
 8002cbc:	d018      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002cbe:	2b80      	cmp	r3, #128	; 0x80
 8002cc0:	d821      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	d007      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002cca:	e01c      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ccc:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	4a62      	ldr	r2, [pc, #392]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cd8:	e01c      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cde:	3308      	adds	r3, #8
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f002 faf8 	bl	80052d8 <RCCEx_PLL2_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cee:	e011      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cf4:	3328      	adds	r3, #40	; 0x28
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f002 fb9f 	bl	800543c <RCCEx_PLL3_Config>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d04:	e006      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002d0c:	e002      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d0e:	bf00      	nop
 8002d10:	e000      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d14:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d1c:	4b4f      	ldr	r3, [pc, #316]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d20:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	4a4c      	ldr	r2, [pc, #304]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	6513      	str	r3, [r2, #80]	; 0x50
 8002d30:	e003      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d36:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d42:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002d46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002d50:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002d54:	460b      	mov	r3, r1
 8002d56:	4313      	orrs	r3, r2
 8002d58:	d053      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d66:	d035      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002d68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d6c:	d82e      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d72:	d031      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d78:	d828      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7e:	d01a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d84:	d822      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d8e:	d007      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002d90:	e01c      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d92:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	4a31      	ldr	r2, [pc, #196]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d9e:	e01c      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002da4:	3308      	adds	r3, #8
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f002 fa95 	bl	80052d8 <RCCEx_PLL2_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002db4:	e011      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dba:	3328      	adds	r3, #40	; 0x28
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f002 fb3c 	bl	800543c <RCCEx_PLL3_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dca:	e006      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002dd4:	bf00      	nop
 8002dd6:	e000      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dda:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10b      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002de2:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002df2:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6593      	str	r3, [r2, #88]	; 0x58
 8002df8:	e003      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002dfe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002e0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002e18:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	d056      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e2e:	d038      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002e30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e34:	d831      	bhi.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e3a:	d034      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002e3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e40:	d82b      	bhi.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e46:	d01d      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002e48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e4c:	d825      	bhi.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d006      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002e52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e58:	e01f      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e5a:	bf00      	nop
 8002e5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e60:	4ba2      	ldr	r3, [pc, #648]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	4aa1      	ldr	r2, [pc, #644]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e6c:	e01c      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e72:	3308      	adds	r3, #8
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 fa2e 	bl	80052d8 <RCCEx_PLL2_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e82:	e011      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e88:	3328      	adds	r3, #40	; 0x28
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f002 fad5 	bl	800543c <RCCEx_PLL3_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e98:	e006      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002ea0:	e002      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10b      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002eb0:	4b8e      	ldr	r3, [pc, #568]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ec0:	4a8a      	ldr	r2, [pc, #552]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec6:	e003      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ecc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002edc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ee6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002eea:	460b      	mov	r3, r1
 8002eec:	4313      	orrs	r3, r2
 8002eee:	d03a      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002ef0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	2b30      	cmp	r3, #48	; 0x30
 8002ef8:	d01f      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d819      	bhi.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d00c      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d815      	bhi.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d019      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d111      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f0e:	4b77      	ldr	r3, [pc, #476]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	4a76      	ldr	r2, [pc, #472]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f1a:	e011      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f20:	3308      	adds	r3, #8
 8002f22:	2102      	movs	r1, #2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f002 f9d7 	bl	80052d8 <RCCEx_PLL2_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f30:	e006      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002f38:	e002      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f3a:	bf00      	nop
 8002f3c:	e000      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f48:	4b68      	ldr	r3, [pc, #416]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	4a65      	ldr	r2, [pc, #404]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f5c:	e003      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f62:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002f72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002f7c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002f80:	460b      	mov	r3, r1
 8002f82:	4313      	orrs	r3, r2
 8002f84:	d051      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f90:	d035      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f96:	d82e      	bhi.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f9c:	d031      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002f9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fa2:	d828      	bhi.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa8:	d01a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fae:	d822      	bhi.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb8:	d007      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002fba:	e01c      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fbc:	4b4b      	ldr	r3, [pc, #300]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	4a4a      	ldr	r2, [pc, #296]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fc8:	e01c      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fce:	3308      	adds	r3, #8
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 f980 	bl	80052d8 <RCCEx_PLL2_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fde:	e011      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fe4:	3328      	adds	r3, #40	; 0x28
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f002 fa27 	bl	800543c <RCCEx_PLL3_Config>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ff4:	e006      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002ffc:	e002      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003004:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800300c:	4b37      	ldr	r3, [pc, #220]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800300e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003010:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003014:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800301a:	4a34      	ldr	r2, [pc, #208]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800301c:	430b      	orrs	r3, r1
 800301e:	6513      	str	r3, [r2, #80]	; 0x50
 8003020:	e003      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003022:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003026:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800302a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003032:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003036:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800303a:	2300      	movs	r3, #0
 800303c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003040:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003044:	460b      	mov	r3, r1
 8003046:	4313      	orrs	r3, r2
 8003048:	d056      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800304a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800304e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003054:	d033      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003056:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800305a:	d82c      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800305c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003060:	d02f      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003062:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003066:	d826      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003068:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800306c:	d02b      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800306e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003072:	d820      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003078:	d012      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800307a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800307e:	d81a      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d022      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003088:	d115      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800308a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800308e:	3308      	adds	r3, #8
 8003090:	2101      	movs	r1, #1
 8003092:	4618      	mov	r0, r3
 8003094:	f002 f920 	bl	80052d8 <RCCEx_PLL2_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800309e:	e015      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030a4:	3328      	adds	r3, #40	; 0x28
 80030a6:	2101      	movs	r1, #1
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 f9c7 	bl	800543c <RCCEx_PLL3_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030b4:	e00a      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80030bc:	e006      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030be:	bf00      	nop
 80030c0:	e004      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030c2:	bf00      	nop
 80030c4:	e002      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030c6:	bf00      	nop
 80030c8:	e000      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10d      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80030dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e2:	4a02      	ldr	r2, [pc, #8]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6513      	str	r3, [r2, #80]	; 0x50
 80030e8:	e006      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80030ea:	bf00      	nop
 80030ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030f4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003104:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003108:	2300      	movs	r3, #0
 800310a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800310e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003112:	460b      	mov	r3, r1
 8003114:	4313      	orrs	r3, r2
 8003116:	d055      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003118:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800311c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003124:	d033      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800312a:	d82c      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003130:	d02f      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003136:	d826      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003138:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800313c:	d02b      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800313e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003142:	d820      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003148:	d012      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800314a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800314e:	d81a      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d022      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003154:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003158:	d115      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800315a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800315e:	3308      	adds	r3, #8
 8003160:	2101      	movs	r1, #1
 8003162:	4618      	mov	r0, r3
 8003164:	f002 f8b8 	bl	80052d8 <RCCEx_PLL2_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800316e:	e015      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003170:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003174:	3328      	adds	r3, #40	; 0x28
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f002 f95f 	bl	800543c <RCCEx_PLL3_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003184:	e00a      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800318c:	e006      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800318e:	bf00      	nop
 8003190:	e004      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003192:	bf00      	nop
 8003194:	e002      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003196:	bf00      	nop
 8003198:	e000      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800319a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800319c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10b      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80031a4:	4bb6      	ldr	r3, [pc, #728]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80031ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031b4:	4ab2      	ldr	r2, [pc, #712]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031b6:	430b      	orrs	r3, r1
 80031b8:	6593      	str	r3, [r2, #88]	; 0x58
 80031ba:	e003      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031c0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80031c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80031d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80031de:	460b      	mov	r3, r1
 80031e0:	4313      	orrs	r3, r2
 80031e2:	d02a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80031e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d011      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80031ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f2:	d10a      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031f8:	3308      	adds	r3, #8
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 f86b 	bl	80052d8 <RCCEx_PLL2_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003208:	e004      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003210:	e000      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003214:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800321c:	4b98      	ldr	r3, [pc, #608]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800321e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003220:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003224:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800322a:	4a95      	ldr	r2, [pc, #596]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800322c:	430b      	orrs	r3, r1
 800322e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003230:	e003      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003232:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003236:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800323a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800324a:	2300      	movs	r3, #0
 800324c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003250:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003254:	460b      	mov	r3, r1
 8003256:	4313      	orrs	r3, r2
 8003258:	d037      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800325a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800325e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003264:	d00e      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800326a:	d816      	bhi.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x776>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d018      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003270:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003274:	d111      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003276:	4b82      	ldr	r3, [pc, #520]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	4a81      	ldr	r2, [pc, #516]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800327c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003280:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003282:	e00f      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003284:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003288:	3308      	adds	r3, #8
 800328a:	2101      	movs	r1, #1
 800328c:	4618      	mov	r0, r3
 800328e:	f002 f823 	bl	80052d8 <RCCEx_PLL2_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003298:	e004      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80032a0:	e000      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80032a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032ac:	4b74      	ldr	r3, [pc, #464]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80032b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	4a71      	ldr	r2, [pc, #452]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032bc:	430b      	orrs	r3, r1
 80032be:	6513      	str	r3, [r2, #80]	; 0x50
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032c6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80032d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80032e0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4313      	orrs	r3, r2
 80032e8:	d03a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80032ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d81d      	bhi.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	08003339 	.word	0x08003339
 8003300:	0800330d 	.word	0x0800330d
 8003304:	0800331b 	.word	0x0800331b
 8003308:	08003339 	.word	0x08003339
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330c:	4b5c      	ldr	r3, [pc, #368]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	4a5b      	ldr	r2, [pc, #364]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003318:	e00f      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800331a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800331e:	3308      	adds	r3, #8
 8003320:	2102      	movs	r1, #2
 8003322:	4618      	mov	r0, r3
 8003324:	f001 ffd8 	bl	80052d8 <RCCEx_PLL2_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800332e:	e004      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003336:	e000      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003342:	4b4f      	ldr	r3, [pc, #316]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003346:	f023 0103 	bic.w	r1, r3, #3
 800334a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800334e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003350:	4a4b      	ldr	r2, [pc, #300]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003352:	430b      	orrs	r3, r1
 8003354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003356:	e003      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003358:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800335c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003360:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800336c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003376:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800337a:	460b      	mov	r3, r1
 800337c:	4313      	orrs	r3, r2
 800337e:	f000 80a0 	beq.w	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003382:	4b40      	ldr	r3, [pc, #256]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a3f      	ldr	r2, [pc, #252]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800338e:	f7fd ff7d 	bl	800128c <HAL_GetTick>
 8003392:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003396:	e00b      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003398:	f7fd ff78 	bl	800128c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b64      	cmp	r3, #100	; 0x64
 80033a6:	d903      	bls.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80033ae:	e005      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033b0:	4b34      	ldr	r3, [pc, #208]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ed      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80033bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d17a      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033c4:	4b2e      	ldr	r3, [pc, #184]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80033d0:	4053      	eors	r3, r2
 80033d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d015      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033da:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	4a25      	ldr	r2, [pc, #148]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033f2:	4b23      	ldr	r3, [pc, #140]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	4a22      	ldr	r2, [pc, #136]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80033fe:	4a20      	ldr	r2, [pc, #128]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003400:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003406:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800340a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800340e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003412:	d118      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd ff3a 	bl	800128c <HAL_GetTick>
 8003418:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800341c:	e00d      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7fd ff35 	bl	800128c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003428:	1ad2      	subs	r2, r2, r3
 800342a:	f241 3388 	movw	r3, #5000	; 0x1388
 800342e:	429a      	cmp	r2, r3
 8003430:	d903      	bls.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8003438:	e005      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0eb      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003446:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800344a:	2b00      	cmp	r3, #0
 800344c:	d130      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800344e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003452:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800345e:	d115      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003460:	4b07      	ldr	r3, [pc, #28]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003468:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800346c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003470:	091a      	lsrs	r2, r3, #4
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003474:	4013      	ands	r3, r2
 8003476:	4a02      	ldr	r2, [pc, #8]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003478:	430b      	orrs	r3, r1
 800347a:	6113      	str	r3, [r2, #16]
 800347c:	e00c      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800347e:	bf00      	nop
 8003480:	58024400 	.word	0x58024400
 8003484:	58024800 	.word	0x58024800
 8003488:	00ffffcf 	.word	0x00ffffcf
 800348c:	4bd4      	ldr	r3, [pc, #848]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	4ad3      	ldr	r2, [pc, #844]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003492:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003496:	6113      	str	r3, [r2, #16]
 8003498:	4bd1      	ldr	r3, [pc, #836]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800349a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800349c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a8:	4acd      	ldr	r2, [pc, #820]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034aa:	430b      	orrs	r3, r1
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70
 80034ae:	e008      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034b4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80034b8:	e003      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	f002 0301 	and.w	r3, r2, #1
 80034ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034d2:	2300      	movs	r3, #0
 80034d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034dc:	460b      	mov	r3, r1
 80034de:	4313      	orrs	r3, r2
 80034e0:	f000 808b 	beq.w	80035fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80034e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ec:	2b28      	cmp	r3, #40	; 0x28
 80034ee:	d86b      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	080035d1 	.word	0x080035d1
 80034fc:	080035c9 	.word	0x080035c9
 8003500:	080035c9 	.word	0x080035c9
 8003504:	080035c9 	.word	0x080035c9
 8003508:	080035c9 	.word	0x080035c9
 800350c:	080035c9 	.word	0x080035c9
 8003510:	080035c9 	.word	0x080035c9
 8003514:	080035c9 	.word	0x080035c9
 8003518:	0800359d 	.word	0x0800359d
 800351c:	080035c9 	.word	0x080035c9
 8003520:	080035c9 	.word	0x080035c9
 8003524:	080035c9 	.word	0x080035c9
 8003528:	080035c9 	.word	0x080035c9
 800352c:	080035c9 	.word	0x080035c9
 8003530:	080035c9 	.word	0x080035c9
 8003534:	080035c9 	.word	0x080035c9
 8003538:	080035b3 	.word	0x080035b3
 800353c:	080035c9 	.word	0x080035c9
 8003540:	080035c9 	.word	0x080035c9
 8003544:	080035c9 	.word	0x080035c9
 8003548:	080035c9 	.word	0x080035c9
 800354c:	080035c9 	.word	0x080035c9
 8003550:	080035c9 	.word	0x080035c9
 8003554:	080035c9 	.word	0x080035c9
 8003558:	080035d1 	.word	0x080035d1
 800355c:	080035c9 	.word	0x080035c9
 8003560:	080035c9 	.word	0x080035c9
 8003564:	080035c9 	.word	0x080035c9
 8003568:	080035c9 	.word	0x080035c9
 800356c:	080035c9 	.word	0x080035c9
 8003570:	080035c9 	.word	0x080035c9
 8003574:	080035c9 	.word	0x080035c9
 8003578:	080035d1 	.word	0x080035d1
 800357c:	080035c9 	.word	0x080035c9
 8003580:	080035c9 	.word	0x080035c9
 8003584:	080035c9 	.word	0x080035c9
 8003588:	080035c9 	.word	0x080035c9
 800358c:	080035c9 	.word	0x080035c9
 8003590:	080035c9 	.word	0x080035c9
 8003594:	080035c9 	.word	0x080035c9
 8003598:	080035d1 	.word	0x080035d1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800359c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035a0:	3308      	adds	r3, #8
 80035a2:	2101      	movs	r1, #1
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 fe97 	bl	80052d8 <RCCEx_PLL2_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035b0:	e00f      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035b6:	3328      	adds	r3, #40	; 0x28
 80035b8:	2101      	movs	r1, #1
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 ff3e 	bl	800543c <RCCEx_PLL3_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035c6:	e004      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80035ce:	e000      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80035d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10b      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035da:	4b81      	ldr	r3, [pc, #516]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80035e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ea:	4a7d      	ldr	r2, [pc, #500]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6553      	str	r3, [r2, #84]	; 0x54
 80035f0:	e003      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035f6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	f002 0302 	and.w	r3, r2, #2
 8003606:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800360a:	2300      	movs	r3, #0
 800360c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003610:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003614:	460b      	mov	r3, r1
 8003616:	4313      	orrs	r3, r2
 8003618:	d042      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800361a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800361e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003620:	2b05      	cmp	r3, #5
 8003622:	d825      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	08003679 	.word	0x08003679
 8003630:	08003645 	.word	0x08003645
 8003634:	0800365b 	.word	0x0800365b
 8003638:	08003679 	.word	0x08003679
 800363c:	08003679 	.word	0x08003679
 8003640:	08003679 	.word	0x08003679
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003644:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003648:	3308      	adds	r3, #8
 800364a:	2101      	movs	r1, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f001 fe43 	bl	80052d8 <RCCEx_PLL2_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003658:	e00f      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800365a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800365e:	3328      	adds	r3, #40	; 0x28
 8003660:	2101      	movs	r1, #1
 8003662:	4618      	mov	r0, r3
 8003664:	f001 feea 	bl	800543c <RCCEx_PLL3_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800366e:	e004      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003676:	e000      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003682:	4b57      	ldr	r3, [pc, #348]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	f023 0107 	bic.w	r1, r3, #7
 800368a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800368e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003690:	4a53      	ldr	r2, [pc, #332]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003692:	430b      	orrs	r3, r1
 8003694:	6553      	str	r3, [r2, #84]	; 0x54
 8003696:	e003      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800369c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f002 0304 	and.w	r3, r2, #4
 80036ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4313      	orrs	r3, r2
 80036be:	d044      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80036c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c8:	2b05      	cmp	r3, #5
 80036ca:	d825      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80036cc:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	08003721 	.word	0x08003721
 80036d8:	080036ed 	.word	0x080036ed
 80036dc:	08003703 	.word	0x08003703
 80036e0:	08003721 	.word	0x08003721
 80036e4:	08003721 	.word	0x08003721
 80036e8:	08003721 	.word	0x08003721
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036f0:	3308      	adds	r3, #8
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 fdef 	bl	80052d8 <RCCEx_PLL2_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003700:	e00f      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003702:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003706:	3328      	adds	r3, #40	; 0x28
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f001 fe96 	bl	800543c <RCCEx_PLL3_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003716:	e004      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003722:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800372a:	4b2d      	ldr	r3, [pc, #180]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	f023 0107 	bic.w	r1, r3, #7
 8003732:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800373a:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800373c:	430b      	orrs	r3, r1
 800373e:	6593      	str	r3, [r2, #88]	; 0x58
 8003740:	e003      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003742:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003746:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800374a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f002 0320 	and.w	r3, r2, #32
 8003756:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800375a:	2300      	movs	r3, #0
 800375c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003760:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003764:	460b      	mov	r3, r1
 8003766:	4313      	orrs	r3, r2
 8003768:	d057      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800376a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800376e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003776:	d035      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800377c:	d82c      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003782:	d031      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003788:	d826      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800378a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800378e:	d02d      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003790:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003794:	d820      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800379a:	d012      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800379c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037a0:	d81a      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d024      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80037a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037aa:	d115      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037b0:	3308      	adds	r3, #8
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 fd8f 	bl	80052d8 <RCCEx_PLL2_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037c0:	e017      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037c6:	3328      	adds	r3, #40	; 0x28
 80037c8:	2102      	movs	r1, #2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 fe36 	bl	800543c <RCCEx_PLL3_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037d6:	e00c      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80037de:	e008      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80037e0:	58024400 	.word	0x58024400
        break;
 80037e4:	bf00      	nop
 80037e6:	e004      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80037e8:	bf00      	nop
 80037ea:	e002      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80037ec:	bf00      	nop
 80037ee:	e000      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80037f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10b      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037fa:	4bc2      	ldr	r3, [pc, #776]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003802:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380a:	4abe      	ldr	r2, [pc, #760]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800380c:	430b      	orrs	r3, r1
 800380e:	6553      	str	r3, [r2, #84]	; 0x54
 8003810:	e003      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003812:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003816:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800381a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003830:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003834:	460b      	mov	r3, r1
 8003836:	4313      	orrs	r3, r2
 8003838:	d055      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800383a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800383e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003842:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003846:	d033      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003848:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800384c:	d82c      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003852:	d02f      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003858:	d826      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800385a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800385e:	d02b      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003860:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003864:	d820      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386a:	d012      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800386c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003870:	d81a      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d022      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8003876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387a:	d115      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800387c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003880:	3308      	adds	r3, #8
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f001 fd27 	bl	80052d8 <RCCEx_PLL2_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003890:	e015      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003892:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003896:	3328      	adds	r3, #40	; 0x28
 8003898:	2102      	movs	r1, #2
 800389a:	4618      	mov	r0, r3
 800389c:	f001 fdce 	bl	800543c <RCCEx_PLL3_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038a6:	e00a      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80038ae:	e006      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80038b0:	bf00      	nop
 80038b2:	e004      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80038b4:	bf00      	nop
 80038b6:	e002      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80038b8:	bf00      	nop
 80038ba:	e000      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80038bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10b      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038c6:	4b8f      	ldr	r3, [pc, #572]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80038ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038d6:	4a8b      	ldr	r2, [pc, #556]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	6593      	str	r3, [r2, #88]	; 0x58
 80038dc:	e003      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038e2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80038e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ee:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80038f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038fc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003900:	460b      	mov	r3, r1
 8003902:	4313      	orrs	r3, r2
 8003904:	d055      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003906:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800390a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800390e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003912:	d033      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003914:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003918:	d82c      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800391a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391e:	d02f      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003924:	d826      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003926:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800392a:	d02b      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800392c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003930:	d820      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003936:	d012      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800393c:	d81a      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d022      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003946:	d115      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003948:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800394c:	3308      	adds	r3, #8
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f001 fcc1 	bl	80052d8 <RCCEx_PLL2_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800395c:	e015      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800395e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003962:	3328      	adds	r3, #40	; 0x28
 8003964:	2102      	movs	r1, #2
 8003966:	4618      	mov	r0, r3
 8003968:	f001 fd68 	bl	800543c <RCCEx_PLL3_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003972:	e00a      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800397a:	e006      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800397c:	bf00      	nop
 800397e:	e004      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003980:	bf00      	nop
 8003982:	e002      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003984:	bf00      	nop
 8003986:	e000      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003992:	4b5c      	ldr	r3, [pc, #368]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800399a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800399e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039a2:	4a58      	ldr	r2, [pc, #352]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6593      	str	r3, [r2, #88]	; 0x58
 80039a8:	e003      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039ae:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80039b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	f002 0308 	and.w	r3, r2, #8
 80039be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039c8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80039cc:	460b      	mov	r3, r1
 80039ce:	4313      	orrs	r3, r2
 80039d0:	d01e      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80039d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	d10c      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039e4:	3328      	adds	r3, #40	; 0x28
 80039e6:	2102      	movs	r1, #2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 fd27 	bl	800543c <RCCEx_PLL3_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80039fa:	4b42      	ldr	r3, [pc, #264]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0a:	4a3e      	ldr	r2, [pc, #248]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f002 0310 	and.w	r3, r2, #16
 8003a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a26:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	d01e      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a42:	3328      	adds	r3, #40	; 0x28
 8003a44:	2102      	movs	r1, #2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 fcf8 	bl	800543c <RCCEx_PLL3_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a58:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a68:	4a26      	ldr	r2, [pc, #152]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003a7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a84:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	d040      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a9a:	d022      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aa0:	d81b      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003aac:	e015      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 fc0e 	bl	80052d8 <RCCEx_PLL2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ac2:	e00f      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ac4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ac8:	3328      	adds	r3, #40	; 0x28
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 fcb5 	bl	800543c <RCCEx_PLL3_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ad8:	e004      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10d      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003af4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003af8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003afc:	4a01      	ldr	r2, [pc, #4]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003afe:	430b      	orrs	r3, r1
 8003b00:	6593      	str	r3, [r2, #88]	; 0x58
 8003b02:	e005      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003b04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b0c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b18:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003b1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b1e:	2300      	movs	r3, #0
 8003b20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b22:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003b26:	460b      	mov	r3, r1
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	d03b      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b38:	d01f      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003b3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b3e:	d818      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b44:	d003      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003b46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b4a:	d007      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003b4c:	e011      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b4e:	4b64      	ldr	r3, [pc, #400]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	4a63      	ldr	r2, [pc, #396]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b5a:	e00f      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b60:	3328      	adds	r3, #40	; 0x28
 8003b62:	2101      	movs	r1, #1
 8003b64:	4618      	mov	r0, r3
 8003b66:	f001 fc69 	bl	800543c <RCCEx_PLL3_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b70:	e004      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003b78:	e000      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b7c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b84:	4b56      	ldr	r3, [pc, #344]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b94:	4a52      	ldr	r2, [pc, #328]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b96:	430b      	orrs	r3, r1
 8003b98:	6553      	str	r3, [r2, #84]	; 0x54
 8003b9a:	e003      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ba0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003bb0:	673b      	str	r3, [r7, #112]	; 0x70
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	677b      	str	r3, [r7, #116]	; 0x74
 8003bb6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	d031      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bce:	d007      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003bd0:	e011      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd2:	4b43      	ldr	r3, [pc, #268]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	4a42      	ldr	r2, [pc, #264]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bde:	e00e      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003be4:	3308      	adds	r3, #8
 8003be6:	2102      	movs	r1, #2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 fb75 	bl	80052d8 <RCCEx_PLL2_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bf4:	e003      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bfe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10a      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c06:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	4a32      	ldr	r2, [pc, #200]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c16:	430b      	orrs	r3, r1
 8003c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c1a:	e003      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c20:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003c30:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c32:	2300      	movs	r3, #0
 8003c34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c36:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	d00c      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c44:	3328      	adds	r3, #40	; 0x28
 8003c46:	2102      	movs	r1, #2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f001 fbf7 	bl	800543c <RCCEx_PLL3_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003c66:	663b      	str	r3, [r7, #96]	; 0x60
 8003c68:	2300      	movs	r3, #0
 8003c6a:	667b      	str	r3, [r7, #100]	; 0x64
 8003c6c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003c70:	460b      	mov	r3, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	d03a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c82:	d018      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c88:	d811      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c8e:	d014      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c94:	d80b      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d011      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c9e:	d106      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	4a0e      	ldr	r2, [pc, #56]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003cac:	e008      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003cb4:	e004      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003cb6:	bf00      	nop
 8003cb8:	e002      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003cba:	bf00      	nop
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd8:	4a01      	ldr	r2, [pc, #4]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	6553      	str	r3, [r2, #84]	; 0x54
 8003cde:	e005      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003ce0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ce8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003cf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cfe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d08:	4baa      	ldr	r3, [pc, #680]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003d10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d16:	4aa7      	ldr	r2, [pc, #668]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003d28:	653b      	str	r3, [r7, #80]	; 0x50
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	657b      	str	r3, [r7, #84]	; 0x54
 8003d2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003d32:	460b      	mov	r3, r1
 8003d34:	4313      	orrs	r3, r2
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d38:	4b9e      	ldr	r3, [pc, #632]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003d40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003d48:	4a9a      	ldr	r2, [pc, #616]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003d64:	460b      	mov	r3, r1
 8003d66:	4313      	orrs	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d6a:	4b92      	ldr	r3, [pc, #584]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a8e      	ldr	r2, [pc, #568]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003d8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003d94:	460b      	mov	r3, r1
 8003d96:	4313      	orrs	r3, r2
 8003d98:	d00e      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d9a:	4b86      	ldr	r3, [pc, #536]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	4a85      	ldr	r2, [pc, #532]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003da0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003da4:	6113      	str	r3, [r2, #16]
 8003da6:	4b83      	ldr	r3, [pc, #524]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003da8:	6919      	ldr	r1, [r3, #16]
 8003daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003db2:	4a80      	ldr	r2, [pc, #512]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003dc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003dd4:	4b77      	ldr	r3, [pc, #476]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003ddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	4a74      	ldr	r2, [pc, #464]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003de4:	430b      	orrs	r3, r1
 8003de6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003df4:	633b      	str	r3, [r7, #48]	; 0x30
 8003df6:	2300      	movs	r3, #0
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4313      	orrs	r3, r2
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e04:	4b6b      	ldr	r3, [pc, #428]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e08:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003e0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	4a67      	ldr	r2, [pc, #412]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e16:	430b      	orrs	r3, r1
 8003e18:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	2100      	movs	r1, #0
 8003e24:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003e30:	460b      	mov	r3, r1
 8003e32:	4313      	orrs	r3, r2
 8003e34:	d011      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f001 fa4a 	bl	80052d8 <RCCEx_PLL2_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003e4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e56:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	2100      	movs	r1, #0
 8003e64:	6239      	str	r1, [r7, #32]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e70:	460b      	mov	r3, r1
 8003e72:	4313      	orrs	r3, r2
 8003e74:	d011      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 fa2a 	bl	80052d8 <RCCEx_PLL2_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003e8a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e92:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e96:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003e9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	61b9      	str	r1, [r7, #24]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	d011      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003eba:	3308      	adds	r3, #8
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 fa0a 	bl	80052d8 <RCCEx_PLL2_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003eca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ed6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	6139      	str	r1, [r7, #16]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	d011      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ef6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003efa:	3328      	adds	r3, #40	; 0x28
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 fa9c 	bl	800543c <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8003f0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f12:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f16:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f22:	2100      	movs	r1, #0
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f30:	460b      	mov	r3, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d011      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f3a:	3328      	adds	r3, #40	; 0x28
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f001 fa7c 	bl	800543c <RCCEx_PLL3_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003f4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f56:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	2100      	movs	r1, #0
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	607b      	str	r3, [r7, #4]
 8003f6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f70:	460b      	mov	r3, r1
 8003f72:	4313      	orrs	r3, r2
 8003f74:	d011      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f7a:	3328      	adds	r3, #40	; 0x28
 8003f7c:	2102      	movs	r1, #2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 fa5c 	bl	800543c <RCCEx_PLL3_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003f8a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f92:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f96:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8003f9a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fb4:	58024400 	.word	0x58024400

08003fb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b090      	sub	sp, #64	; 0x40
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fc6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	f040 8094 	bne.w	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8003fd0:	4b9e      	ldr	r3, [pc, #632]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	f200 8087 	bhi.w	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8003fe2:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	08003ffd 	.word	0x08003ffd
 8003fec:	08004025 	.word	0x08004025
 8003ff0:	0800404d 	.word	0x0800404d
 8003ff4:	080040e9 	.word	0x080040e9
 8003ff8:	08004075 	.word	0x08004075
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003ffc:	4b93      	ldr	r3, [pc, #588]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004004:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004008:	d108      	bne.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800400a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800400e:	4618      	mov	r0, r3
 8004010:	f001 f810 	bl	8005034 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004018:	f000 bd45 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004020:	f000 bd41 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004024:	4b89      	ldr	r3, [pc, #548]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800402c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004030:	d108      	bne.n	8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004032:	f107 0318 	add.w	r3, r7, #24
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fd54 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004040:	f000 bd31 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004048:	f000 bd2d 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800404c:	4b7f      	ldr	r3, [pc, #508]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004058:	d108      	bne.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800405a:	f107 030c 	add.w	r3, r7, #12
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fe94 	bl	8004d8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004068:	f000 bd1d 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004070:	f000 bd19 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004074:	4b75      	ldr	r3, [pc, #468]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004078:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800407c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800407e:	4b73      	ldr	r3, [pc, #460]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b04      	cmp	r3, #4
 8004088:	d10c      	bne.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004090:	4b6e      	ldr	r3, [pc, #440]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	08db      	lsrs	r3, r3, #3
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	4a6d      	ldr	r2, [pc, #436]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
 80040a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a2:	e01f      	b.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80040a4:	4b69      	ldr	r3, [pc, #420]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b0:	d106      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80040b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040b8:	d102      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80040ba:	4b66      	ldr	r3, [pc, #408]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040be:	e011      	b.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80040c0:	4b62      	ldr	r3, [pc, #392]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040cc:	d106      	bne.n	80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80040ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d4:	d102      	bne.n	80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80040d6:	4b60      	ldr	r3, [pc, #384]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80040d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040da:	e003      	b.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80040e0:	f000 bce1 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80040e4:	f000 bcdf 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80040e8:	4b5c      	ldr	r3, [pc, #368]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80040ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80040ec:	f000 bcdb 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80040f4:	f000 bcd7 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80040f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040fc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004100:	430b      	orrs	r3, r1
 8004102:	f040 80ad 	bne.w	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004106:	4b51      	ldr	r3, [pc, #324]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800410e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004116:	d056      	beq.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800411e:	f200 8090 	bhi.w	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	2bc0      	cmp	r3, #192	; 0xc0
 8004126:	f000 8088 	beq.w	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	2bc0      	cmp	r3, #192	; 0xc0
 800412e:	f200 8088 	bhi.w	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	2b80      	cmp	r3, #128	; 0x80
 8004136:	d032      	beq.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	2b80      	cmp	r3, #128	; 0x80
 800413c:	f200 8081 	bhi.w	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d014      	beq.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800414c:	e079      	b.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800414e:	4b3f      	ldr	r3, [pc, #252]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800415a:	d108      	bne.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800415c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004160:	4618      	mov	r0, r3
 8004162:	f000 ff67 	bl	8005034 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800416a:	f000 bc9c 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004172:	f000 bc98 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004176:	4b35      	ldr	r3, [pc, #212]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004182:	d108      	bne.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004184:	f107 0318 	add.w	r3, r7, #24
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fcab 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004192:	f000 bc88 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800419a:	f000 bc84 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800419e:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041aa:	d108      	bne.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041ac:	f107 030c 	add.w	r3, r7, #12
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fdeb 	bl	8004d8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80041ba:	f000 bc74 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041c2:	f000 bc70 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80041c6:	4b21      	ldr	r3, [pc, #132]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d10c      	bne.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041e2:	4b1a      	ldr	r3, [pc, #104]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	08db      	lsrs	r3, r3, #3
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	4a18      	ldr	r2, [pc, #96]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80041ee:	fa22 f303 	lsr.w	r3, r2, r3
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f4:	e01f      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004202:	d106      	bne.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800420a:	d102      	bne.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004210:	e011      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004212:	4b0e      	ldr	r3, [pc, #56]	; (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800421e:	d106      	bne.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8004220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004226:	d102      	bne.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800422a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800422c:	e003      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004232:	f000 bc38 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004236:	f000 bc36 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800423a:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800423c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800423e:	f000 bc32 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004246:	f000 bc2e 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800424a:	bf00      	nop
 800424c:	58024400 	.word	0x58024400
 8004250:	03d09000 	.word	0x03d09000
 8004254:	003d0900 	.word	0x003d0900
 8004258:	017d7840 	.word	0x017d7840
 800425c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004264:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004268:	430b      	orrs	r3, r1
 800426a:	f040 809c 	bne.w	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800426e:	4b9e      	ldr	r3, [pc, #632]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004276:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800427e:	d054      	beq.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004286:	f200 808b 	bhi.w	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004290:	f000 8083 	beq.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800429a:	f200 8081 	bhi.w	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a4:	d02f      	beq.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ac:	d878      	bhi.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ba:	d012      	beq.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80042bc:	e070      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80042be:	4b8a      	ldr	r3, [pc, #552]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ca:	d107      	bne.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 feaf 	bl	8005034 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80042da:	e3e4      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042e0:	e3e1      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042e2:	4b81      	ldr	r3, [pc, #516]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ee:	d107      	bne.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042f0:	f107 0318 	add.w	r3, r7, #24
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fbf5 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80042fe:	e3d2      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004304:	e3cf      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004306:	4b78      	ldr	r3, [pc, #480]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800430e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004312:	d107      	bne.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004314:	f107 030c 	add.w	r3, r7, #12
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fd37 	bl	8004d8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004322:	e3c0      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004328:	e3bd      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800432a:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004332:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004334:	4b6c      	ldr	r3, [pc, #432]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b04      	cmp	r3, #4
 800433e:	d10c      	bne.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004346:	4b68      	ldr	r3, [pc, #416]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	08db      	lsrs	r3, r3, #3
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	4a66      	ldr	r2, [pc, #408]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004352:	fa22 f303 	lsr.w	r3, r2, r3
 8004356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004358:	e01e      	b.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800435a:	4b63      	ldr	r3, [pc, #396]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004366:	d106      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800436e:	d102      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004370:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004374:	e010      	b.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004376:	4b5c      	ldr	r3, [pc, #368]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004382:	d106      	bne.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8004384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800438a:	d102      	bne.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800438c:	4b59      	ldr	r3, [pc, #356]	; (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004390:	e002      	b.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004396:	e386      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004398:	e385      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800439a:	4b57      	ldr	r3, [pc, #348]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800439c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800439e:	e382      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043a4:	e37f      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80043a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043aa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80043ae:	430b      	orrs	r3, r1
 80043b0:	f040 80a7 	bne.w	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80043b4:	4b4c      	ldr	r3, [pc, #304]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043c4:	d055      	beq.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043cc:	f200 8096 	bhi.w	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043d6:	f000 8084 	beq.w	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043e0:	f200 808c 	bhi.w	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043ea:	d030      	beq.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043f2:	f200 8083 	bhi.w	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004402:	d012      	beq.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004404:	e07a      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004406:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004412:	d107      	bne.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fe0b 	bl	8005034 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004422:	e340      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004428:	e33d      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800442a:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004436:	d107      	bne.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004438:	f107 0318 	add.w	r3, r7, #24
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fb51 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004446:	e32e      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800444c:	e32b      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800445a:	d107      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800445c:	f107 030c 	add.w	r3, r7, #12
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fc93 	bl	8004d8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800446a:	e31c      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004470:	e319      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004472:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004476:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800447a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800447c:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b04      	cmp	r3, #4
 8004486:	d10c      	bne.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800448e:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	08db      	lsrs	r3, r3, #3
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	4a14      	ldr	r2, [pc, #80]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a0:	e01e      	b.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80044a2:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ae:	d106      	bne.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80044b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044b6:	d102      	bne.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044bc:	e010      	b.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ca:	d106      	bne.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80044cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d2:	d102      	bne.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80044d4:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80044d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d8:	e002      	b.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80044de:	e2e2      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80044e0:	e2e1      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044e6:	e2de      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80044e8:	58024400 	.word	0x58024400
 80044ec:	03d09000 	.word	0x03d09000
 80044f0:	003d0900 	.word	0x003d0900
 80044f4:	017d7840 	.word	0x017d7840
 80044f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004500:	e2d1      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004506:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800450a:	430b      	orrs	r3, r1
 800450c:	f040 809c 	bne.w	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004510:	4b93      	ldr	r3, [pc, #588]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004514:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004518:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004520:	d054      	beq.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004528:	f200 808b 	bhi.w	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800452c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004532:	f000 8083 	beq.w	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800453c:	f200 8081 	bhi.w	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004546:	d02f      	beq.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454e:	d878      	bhi.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004552:	2b00      	cmp	r3, #0
 8004554:	d004      	beq.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455c:	d012      	beq.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800455e:	e070      	b.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004560:	4b7f      	ldr	r3, [pc, #508]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800456c:	d107      	bne.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800456e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fd5e 	bl	8005034 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800457c:	e293      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004582:	e290      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004584:	4b76      	ldr	r3, [pc, #472]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800458c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004590:	d107      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004592:	f107 0318 	add.w	r3, r7, #24
 8004596:	4618      	mov	r0, r3
 8004598:	f000 faa4 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80045a0:	e281      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045a6:	e27e      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80045a8:	4b6d      	ldr	r3, [pc, #436]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b4:	d107      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045b6:	f107 030c 	add.w	r3, r7, #12
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fbe6 	bl	8004d8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80045c4:	e26f      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045ca:	e26c      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80045cc:	4b64      	ldr	r3, [pc, #400]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80045ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80045d6:	4b62      	ldr	r3, [pc, #392]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d10c      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80045e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045e8:	4b5d      	ldr	r3, [pc, #372]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	08db      	lsrs	r3, r3, #3
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	4a5c      	ldr	r2, [pc, #368]	; (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
 80045f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fa:	e01e      	b.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80045fc:	4b58      	ldr	r3, [pc, #352]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004608:	d106      	bne.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800460a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004610:	d102      	bne.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004612:	4b55      	ldr	r3, [pc, #340]	; (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004616:	e010      	b.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004618:	4b51      	ldr	r3, [pc, #324]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004624:	d106      	bne.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800462c:	d102      	bne.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800462e:	4b4f      	ldr	r3, [pc, #316]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004632:	e002      	b.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004638:	e235      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800463a:	e234      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800463c:	4b4c      	ldr	r3, [pc, #304]	; (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800463e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004640:	e231      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004646:	e22e      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800464c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004650:	430b      	orrs	r3, r1
 8004652:	f040 808f 	bne.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004656:	4b42      	ldr	r3, [pc, #264]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8004660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004662:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004666:	d06b      	beq.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800466e:	d874      	bhi.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004676:	d056      	beq.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800467e:	d86c      	bhi.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004686:	d03b      	beq.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8004688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800468e:	d864      	bhi.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004696:	d021      	beq.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800469e:	d85c      	bhi.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80046a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d004      	beq.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ac:	d004      	beq.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80046ae:	e054      	b.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80046b0:	f7fe f9ca 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 80046b4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80046b6:	e1f6      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046b8:	4b29      	ldr	r3, [pc, #164]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c4:	d107      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046c6:	f107 0318 	add.w	r3, r7, #24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fa0a 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046d4:	e1e7      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046da:	e1e4      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046dc:	4b20      	ldr	r3, [pc, #128]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e8:	d107      	bne.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046ea:	f107 030c 	add.w	r3, r7, #12
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fb4c 	bl	8004d8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046f8:	e1d5      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046fe:	e1d2      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004700:	4b17      	ldr	r3, [pc, #92]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b04      	cmp	r3, #4
 800470a:	d109      	bne.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800470c:	4b14      	ldr	r3, [pc, #80]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	08db      	lsrs	r3, r3, #3
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	4a13      	ldr	r2, [pc, #76]	; (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
 800471c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800471e:	e1c2      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004724:	e1bf      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004732:	d102      	bne.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004738:	e1b5      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800473e:	e1b2      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004740:	4b07      	ldr	r3, [pc, #28]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800474c:	d102      	bne.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004750:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004752:	e1a8      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004758:	e1a5      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800475e:	e1a2      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004760:	58024400 	.word	0x58024400
 8004764:	03d09000 	.word	0x03d09000
 8004768:	003d0900 	.word	0x003d0900
 800476c:	017d7840 	.word	0x017d7840
 8004770:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004778:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800477c:	430b      	orrs	r3, r1
 800477e:	d173      	bne.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004780:	4b9c      	ldr	r3, [pc, #624]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004788:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004790:	d02f      	beq.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004798:	d863      	bhi.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a6:	d012      	beq.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80047a8:	e05b      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047aa:	4b92      	ldr	r3, [pc, #584]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047b6:	d107      	bne.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047b8:	f107 0318 	add.w	r3, r7, #24
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 f991 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047c6:	e16e      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047cc:	e16b      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047ce:	4b89      	ldr	r3, [pc, #548]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047da:	d107      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fad3 	bl	8004d8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047ea:	e15c      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047f0:	e159      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80047f2:	4b80      	ldr	r3, [pc, #512]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80047f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047fc:	4b7d      	ldr	r3, [pc, #500]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b04      	cmp	r3, #4
 8004806:	d10c      	bne.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800480e:	4b79      	ldr	r3, [pc, #484]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	08db      	lsrs	r3, r3, #3
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	4a77      	ldr	r2, [pc, #476]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800481a:	fa22 f303 	lsr.w	r3, r2, r3
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004820:	e01e      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004822:	4b74      	ldr	r3, [pc, #464]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800482e:	d106      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004836:	d102      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004838:	4b70      	ldr	r3, [pc, #448]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800483a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483c:	e010      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800483e:	4b6d      	ldr	r3, [pc, #436]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800484a:	d106      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800484c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004852:	d102      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004854:	4b6a      	ldr	r3, [pc, #424]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004858:	e002      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800485e:	e122      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004860:	e121      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004866:	e11e      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800486c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004870:	430b      	orrs	r3, r1
 8004872:	d133      	bne.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004874:	4b5f      	ldr	r3, [pc, #380]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	2b00      	cmp	r3, #0
 8004882:	d004      	beq.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488a:	d012      	beq.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800488c:	e023      	b.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800488e:	4b59      	ldr	r3, [pc, #356]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800489a:	d107      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800489c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fbc7 	bl	8005034 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048aa:	e0fc      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048b0:	e0f9      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048b2:	4b50      	ldr	r3, [pc, #320]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048be:	d107      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048c0:	f107 0318 	add.w	r3, r7, #24
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 f90d 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048ce:	e0ea      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048d4:	e0e7      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048da:	e0e4      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80048dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048e0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80048e4:	430b      	orrs	r3, r1
 80048e6:	f040 808d 	bne.w	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80048ea:	4b42      	ldr	r3, [pc, #264]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80048ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80048f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048fa:	d06b      	beq.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004902:	d874      	bhi.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490a:	d056      	beq.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d86c      	bhi.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800491a:	d03b      	beq.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004922:	d864      	bhi.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800492a:	d021      	beq.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004932:	d85c      	bhi.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	2b00      	cmp	r3, #0
 8004938:	d004      	beq.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004940:	d004      	beq.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8004942:	e054      	b.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004944:	f000 f8b8 	bl	8004ab8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004948:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800494a:	e0ac      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800494c:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004958:	d107      	bne.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800495a:	f107 0318 	add.w	r3, r7, #24
 800495e:	4618      	mov	r0, r3
 8004960:	f000 f8c0 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004968:	e09d      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800496a:	2300      	movs	r3, #0
 800496c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800496e:	e09a      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004970:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800497c:	d107      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800497e:	f107 030c 	add.w	r3, r7, #12
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fa02 	bl	8004d8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800498c:	e08b      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004992:	e088      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004994:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b04      	cmp	r3, #4
 800499e:	d109      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049a0:	4b14      	ldr	r3, [pc, #80]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	08db      	lsrs	r3, r3, #3
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	4a13      	ldr	r2, [pc, #76]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
 80049b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049b2:	e078      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049b8:	e075      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80049ba:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c6:	d102      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049cc:	e06b      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049d2:	e068      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80049d4:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e0:	d102      	bne.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049e6:	e05e      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049ec:	e05b      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049f2:	e058      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80049f4:	58024400 	.word	0x58024400
 80049f8:	03d09000 	.word	0x03d09000
 80049fc:	003d0900 	.word	0x003d0900
 8004a00:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a08:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	d148      	bne.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004a10:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a20:	d02a      	beq.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a28:	d838      	bhi.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a36:	d00d      	beq.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8004a38:	e030      	b.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a46:	d102      	bne.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a4c:	e02b      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a52:	e028      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a54:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a60:	d107      	bne.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fae4 	bl	8005034 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a70:	e019      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a76:	e016      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a78:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a84:	d107      	bne.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a86:	f107 0318 	add.w	r3, r7, #24
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f82a 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a94:	e007      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a9a:	e004      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aa0:	e001      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3740      	adds	r7, #64	; 0x40
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	58024400 	.word	0x58024400
 8004ab4:	017d7840 	.word	0x017d7840

08004ab8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004abc:	f7fd ff94 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	091b      	lsrs	r3, r3, #4
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4904      	ldr	r1, [pc, #16]	; (8004ae0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	080163b8 	.word	0x080163b8

08004ae4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b089      	sub	sp, #36	; 0x24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004aec:	4ba1      	ldr	r3, [pc, #644]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004af6:	4b9f      	ldr	r3, [pc, #636]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afa:	0b1b      	lsrs	r3, r3, #12
 8004afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b02:	4b9c      	ldr	r3, [pc, #624]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b0e:	4b99      	ldr	r3, [pc, #612]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b12:	08db      	lsrs	r3, r3, #3
 8004b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8111 	beq.w	8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	f000 8083 	beq.w	8004c40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	f200 80a1 	bhi.w	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d056      	beq.n	8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b4e:	e099      	b.n	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b50:	4b88      	ldr	r3, [pc, #544]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d02d      	beq.n	8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b5c:	4b85      	ldr	r3, [pc, #532]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	08db      	lsrs	r3, r3, #3
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	4a84      	ldr	r2, [pc, #528]	; (8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	ee07 3a90 	vmov	s15, r3
 8004b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b86:	4b7b      	ldr	r3, [pc, #492]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bb6:	e087      	b.n	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bca:	4b6a      	ldr	r3, [pc, #424]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bfa:	e065      	b.n	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0e:	4b59      	ldr	r3, [pc, #356]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c3e:	e043      	b.n	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c52:	4b48      	ldr	r3, [pc, #288]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c82:	e021      	b.n	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c96:	4b37      	ldr	r3, [pc, #220]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004caa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004cc8:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	0a5b      	lsrs	r3, r3, #9
 8004cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cee:	ee17 2a90 	vmov	r2, s15
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004cf6:	4b1f      	ldr	r3, [pc, #124]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	0c1b      	lsrs	r3, r3, #16
 8004cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d1c:	ee17 2a90 	vmov	r2, s15
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d24:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	0e1b      	lsrs	r3, r3, #24
 8004d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d4a:	ee17 2a90 	vmov	r2, s15
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d52:	e008      	b.n	8004d66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	609a      	str	r2, [r3, #8]
}
 8004d66:	bf00      	nop
 8004d68:	3724      	adds	r7, #36	; 0x24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	58024400 	.word	0x58024400
 8004d78:	03d09000 	.word	0x03d09000
 8004d7c:	46000000 	.word	0x46000000
 8004d80:	4c742400 	.word	0x4c742400
 8004d84:	4a742400 	.word	0x4a742400
 8004d88:	4bbebc20 	.word	0x4bbebc20

08004d8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b089      	sub	sp, #36	; 0x24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d94:	4ba1      	ldr	r3, [pc, #644]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004d9e:	4b9f      	ldr	r3, [pc, #636]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	0d1b      	lsrs	r3, r3, #20
 8004da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004daa:	4b9c      	ldr	r3, [pc, #624]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004db6:	4b99      	ldr	r3, [pc, #612]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	08db      	lsrs	r3, r3, #3
 8004dbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8111 	beq.w	8004ffc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	f000 8083 	beq.w	8004ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	f200 80a1 	bhi.w	8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d056      	beq.n	8004ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004df6:	e099      	b.n	8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004df8:	4b88      	ldr	r3, [pc, #544]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d02d      	beq.n	8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e04:	4b85      	ldr	r3, [pc, #532]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	08db      	lsrs	r3, r3, #3
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	4a84      	ldr	r2, [pc, #528]	; (8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
 8004e14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	ee07 3a90 	vmov	s15, r3
 8004e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2e:	4b7b      	ldr	r3, [pc, #492]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e5e:	e087      	b.n	8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e72:	4b6a      	ldr	r3, [pc, #424]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ea2:	e065      	b.n	8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800502c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb6:	4b59      	ldr	r3, [pc, #356]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ee6:	e043      	b.n	8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efa:	4b48      	ldr	r3, [pc, #288]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f2a:	e021      	b.n	8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800502c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f3e:	4b37      	ldr	r3, [pc, #220]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f70:	4b2a      	ldr	r3, [pc, #168]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	0a5b      	lsrs	r3, r3, #9
 8004f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f96:	ee17 2a90 	vmov	r2, s15
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f9e:	4b1f      	ldr	r3, [pc, #124]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	0c1b      	lsrs	r3, r3, #16
 8004fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa8:	ee07 3a90 	vmov	s15, r3
 8004fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc4:	ee17 2a90 	vmov	r2, s15
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004fcc:	4b13      	ldr	r3, [pc, #76]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	0e1b      	lsrs	r3, r3, #24
 8004fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ff2:	ee17 2a90 	vmov	r2, s15
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ffa:	e008      	b.n	800500e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	609a      	str	r2, [r3, #8]
}
 800500e:	bf00      	nop
 8005010:	3724      	adds	r7, #36	; 0x24
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	58024400 	.word	0x58024400
 8005020:	03d09000 	.word	0x03d09000
 8005024:	46000000 	.word	0x46000000
 8005028:	4c742400 	.word	0x4c742400
 800502c:	4a742400 	.word	0x4a742400
 8005030:	4bbebc20 	.word	0x4bbebc20

08005034 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005034:	b480      	push	{r7}
 8005036:	b089      	sub	sp, #36	; 0x24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800503c:	4ba0      	ldr	r3, [pc, #640]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005046:	4b9e      	ldr	r3, [pc, #632]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005050:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005052:	4b9b      	ldr	r3, [pc, #620]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800505c:	4b98      	ldr	r3, [pc, #608]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800505e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005060:	08db      	lsrs	r3, r3, #3
 8005062:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	fb02 f303 	mul.w	r3, r2, r3
 800506c:	ee07 3a90 	vmov	s15, r3
 8005070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005074:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8111 	beq.w	80052a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b02      	cmp	r3, #2
 8005084:	f000 8083 	beq.w	800518e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b02      	cmp	r3, #2
 800508c:	f200 80a1 	bhi.w	80051d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d056      	beq.n	800514a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800509c:	e099      	b.n	80051d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800509e:	4b88      	ldr	r3, [pc, #544]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d02d      	beq.n	8005106 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050aa:	4b85      	ldr	r3, [pc, #532]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	08db      	lsrs	r3, r3, #3
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	4a83      	ldr	r2, [pc, #524]	; (80052c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80050b6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	ee07 3a90 	vmov	s15, r3
 80050cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d4:	4b7a      	ldr	r3, [pc, #488]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050dc:	ee07 3a90 	vmov	s15, r3
 80050e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80050e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80052c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80050ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005100:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005104:	e087      	b.n	8005216 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	ee07 3a90 	vmov	s15, r3
 800510c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005110:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80052cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005118:	4b69      	ldr	r3, [pc, #420]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005120:	ee07 3a90 	vmov	s15, r3
 8005124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005128:	ed97 6a03 	vldr	s12, [r7, #12]
 800512c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80052c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005130:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005134:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005144:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005148:	e065      	b.n	8005216 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005154:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80052d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005158:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515c:	4b58      	ldr	r3, [pc, #352]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005164:	ee07 3a90 	vmov	s15, r3
 8005168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005170:	eddf 5a55 	vldr	s11, [pc, #340]	; 80052c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005174:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005178:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005188:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800518c:	e043      	b.n	8005216 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	ee07 3a90 	vmov	s15, r3
 8005194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005198:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80052d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800519c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a0:	4b47      	ldr	r3, [pc, #284]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a8:	ee07 3a90 	vmov	s15, r3
 80051ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80052c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80051b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051d0:	e021      	b.n	8005216 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	ee07 3a90 	vmov	s15, r3
 80051d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80052cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80051e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e4:	4b36      	ldr	r3, [pc, #216]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80051f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80052c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80051fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005210:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005214:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005216:	4b2a      	ldr	r3, [pc, #168]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	0a5b      	lsrs	r3, r3, #9
 800521c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005220:	ee07 3a90 	vmov	s15, r3
 8005224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800522c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005230:	edd7 6a07 	vldr	s13, [r7, #28]
 8005234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800523c:	ee17 2a90 	vmov	r2, s15
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005244:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	0c1b      	lsrs	r3, r3, #16
 800524a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800525a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800525e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800526a:	ee17 2a90 	vmov	r2, s15
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005272:	4b13      	ldr	r3, [pc, #76]	; (80052c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	0e1b      	lsrs	r3, r3, #24
 8005278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800527c:	ee07 3a90 	vmov	s15, r3
 8005280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005288:	ee37 7a87 	vadd.f32	s14, s15, s14
 800528c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005298:	ee17 2a90 	vmov	r2, s15
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80052a0:	e008      	b.n	80052b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	609a      	str	r2, [r3, #8]
}
 80052b4:	bf00      	nop
 80052b6:	3724      	adds	r7, #36	; 0x24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	58024400 	.word	0x58024400
 80052c4:	03d09000 	.word	0x03d09000
 80052c8:	46000000 	.word	0x46000000
 80052cc:	4c742400 	.word	0x4c742400
 80052d0:	4a742400 	.word	0x4a742400
 80052d4:	4bbebc20 	.word	0x4bbebc20

080052d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052e6:	4b53      	ldr	r3, [pc, #332]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d101      	bne.n	80052f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e099      	b.n	800542a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052f6:	4b4f      	ldr	r3, [pc, #316]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a4e      	ldr	r2, [pc, #312]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80052fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005302:	f7fb ffc3 	bl	800128c <HAL_GetTick>
 8005306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005308:	e008      	b.n	800531c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800530a:	f7fb ffbf 	bl	800128c <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e086      	b.n	800542a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800531c:	4b45      	ldr	r3, [pc, #276]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f0      	bne.n	800530a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005328:	4b42      	ldr	r3, [pc, #264]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	031b      	lsls	r3, r3, #12
 8005336:	493f      	ldr	r1, [pc, #252]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 8005338:	4313      	orrs	r3, r2
 800533a:	628b      	str	r3, [r1, #40]	; 0x28
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	3b01      	subs	r3, #1
 8005342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	3b01      	subs	r3, #1
 800534c:	025b      	lsls	r3, r3, #9
 800534e:	b29b      	uxth	r3, r3
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	3b01      	subs	r3, #1
 8005358:	041b      	lsls	r3, r3, #16
 800535a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	3b01      	subs	r3, #1
 8005366:	061b      	lsls	r3, r3, #24
 8005368:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800536c:	4931      	ldr	r1, [pc, #196]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005372:	4b30      	ldr	r3, [pc, #192]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	492d      	ldr	r1, [pc, #180]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 8005380:	4313      	orrs	r3, r2
 8005382:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005384:	4b2b      	ldr	r3, [pc, #172]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	f023 0220 	bic.w	r2, r3, #32
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	4928      	ldr	r1, [pc, #160]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 8005392:	4313      	orrs	r3, r2
 8005394:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005396:	4b27      	ldr	r3, [pc, #156]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	4a26      	ldr	r2, [pc, #152]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 800539c:	f023 0310 	bic.w	r3, r3, #16
 80053a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053a2:	4b24      	ldr	r3, [pc, #144]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a6:	4b24      	ldr	r3, [pc, #144]	; (8005438 <RCCEx_PLL2_Config+0x160>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	69d2      	ldr	r2, [r2, #28]
 80053ae:	00d2      	lsls	r2, r2, #3
 80053b0:	4920      	ldr	r1, [pc, #128]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053b6:	4b1f      	ldr	r3, [pc, #124]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	4a1e      	ldr	r2, [pc, #120]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053bc:	f043 0310 	orr.w	r3, r3, #16
 80053c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053c8:	4b1a      	ldr	r3, [pc, #104]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	4a19      	ldr	r2, [pc, #100]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053d4:	e00f      	b.n	80053f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d106      	bne.n	80053ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053dc:	4b15      	ldr	r3, [pc, #84]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	4a14      	ldr	r2, [pc, #80]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053e8:	e005      	b.n	80053f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	4a11      	ldr	r2, [pc, #68]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005402:	f7fb ff43 	bl	800128c <HAL_GetTick>
 8005406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005408:	e008      	b.n	800541c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800540a:	f7fb ff3f 	bl	800128c <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e006      	b.n	800542a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800541c:	4b05      	ldr	r3, [pc, #20]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005428:	7bfb      	ldrb	r3, [r7, #15]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	58024400 	.word	0x58024400
 8005438:	ffff0007 	.word	0xffff0007

0800543c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800544a:	4b53      	ldr	r3, [pc, #332]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b03      	cmp	r3, #3
 8005454:	d101      	bne.n	800545a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e099      	b.n	800558e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800545a:	4b4f      	ldr	r3, [pc, #316]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a4e      	ldr	r2, [pc, #312]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005466:	f7fb ff11 	bl	800128c <HAL_GetTick>
 800546a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800546c:	e008      	b.n	8005480 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800546e:	f7fb ff0d 	bl	800128c <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e086      	b.n	800558e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005480:	4b45      	ldr	r3, [pc, #276]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f0      	bne.n	800546e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800548c:	4b42      	ldr	r3, [pc, #264]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	051b      	lsls	r3, r3, #20
 800549a:	493f      	ldr	r1, [pc, #252]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800549c:	4313      	orrs	r3, r2
 800549e:	628b      	str	r3, [r1, #40]	; 0x28
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	025b      	lsls	r3, r3, #9
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	041b      	lsls	r3, r3, #16
 80054be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	061b      	lsls	r3, r3, #24
 80054cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054d0:	4931      	ldr	r1, [pc, #196]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054d6:	4b30      	ldr	r3, [pc, #192]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	492d      	ldr	r1, [pc, #180]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054e8:	4b2b      	ldr	r3, [pc, #172]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	4928      	ldr	r1, [pc, #160]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054fa:	4b27      	ldr	r3, [pc, #156]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	4a26      	ldr	r2, [pc, #152]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005504:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005506:	4b24      	ldr	r3, [pc, #144]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800550a:	4b24      	ldr	r3, [pc, #144]	; (800559c <RCCEx_PLL3_Config+0x160>)
 800550c:	4013      	ands	r3, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	69d2      	ldr	r2, [r2, #28]
 8005512:	00d2      	lsls	r2, r2, #3
 8005514:	4920      	ldr	r1, [pc, #128]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005516:	4313      	orrs	r3, r2
 8005518:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800551a:	4b1f      	ldr	r3, [pc, #124]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	4a19      	ldr	r2, [pc, #100]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005532:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005536:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005538:	e00f      	b.n	800555a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d106      	bne.n	800554e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005540:	4b15      	ldr	r3, [pc, #84]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	4a14      	ldr	r2, [pc, #80]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005546:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800554a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800554c:	e005      	b.n	800555a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800554e:	4b12      	ldr	r3, [pc, #72]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	4a11      	ldr	r2, [pc, #68]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005554:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005558:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800555a:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a0e      	ldr	r2, [pc, #56]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005566:	f7fb fe91 	bl	800128c <HAL_GetTick>
 800556a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800556c:	e008      	b.n	8005580 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800556e:	f7fb fe8d 	bl	800128c <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e006      	b.n	800558e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	58024400 	.word	0x58024400
 800559c:	ffff0007 	.word	0xffff0007

080055a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e075      	b.n	800569e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d105      	bne.n	80055ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7fb fc49 	bl	8000e5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2204      	movs	r2, #4
 80055ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f868 	bl	80056a8 <HAL_SD_InitCard>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e05d      	b.n	800569e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80055e2:	f107 0308 	add.w	r3, r7, #8
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fdaf 	bl	800614c <HAL_SD_GetCardStatus>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e052      	b.n	800569e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80055f8:	7e3b      	ldrb	r3, [r7, #24]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80055fe:	7e7b      	ldrb	r3, [r7, #25]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	2b01      	cmp	r3, #1
 800560a:	d10a      	bne.n	8005622 <HAL_SD_Init+0x82>
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	2b00      	cmp	r3, #0
 8005610:	d102      	bne.n	8005618 <HAL_SD_Init+0x78>
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d004      	beq.n	8005622 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800561e:	659a      	str	r2, [r3, #88]	; 0x58
 8005620:	e00b      	b.n	800563a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	2b01      	cmp	r3, #1
 8005628:	d104      	bne.n	8005634 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005630:	659a      	str	r2, [r3, #88]	; 0x58
 8005632:	e002      	b.n	800563a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fe41 	bl	80062c8 <HAL_SD_ConfigWideBusOperation>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e026      	b.n	800569e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005650:	f7fb fe1c 	bl	800128c <HAL_GetTick>
 8005654:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005656:	e011      	b.n	800567c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005658:	f7fb fe18 	bl	800128c <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d109      	bne.n	800567c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800566e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e010      	b.n	800569e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 ff35 	bl	80064ec <HAL_SD_GetCardState>
 8005682:	4603      	mov	r3, r0
 8005684:	2b04      	cmp	r3, #4
 8005686:	d1e7      	bne.n	8005658 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3728      	adds	r7, #40	; 0x28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b08d      	sub	sp, #52	; 0x34
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80056b4:	2300      	movs	r3, #0
 80056b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80056bc:	2300      	movs	r3, #0
 80056be:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80056c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80056c4:	f04f 0100 	mov.w	r1, #0
 80056c8:	f7fe fc76 	bl	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq>
 80056cc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056e2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e070      	b.n	80057ca <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	0a1b      	lsrs	r3, r3, #8
 80056ec:	4a39      	ldr	r2, [pc, #228]	; (80057d4 <HAL_SD_InitCard+0x12c>)
 80056ee:	fba2 2303 	umull	r2, r3, r2, r3
 80056f2:	091b      	lsrs	r3, r3, #4
 80056f4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681c      	ldr	r4, [r3, #0]
 80056fa:	466a      	mov	r2, sp
 80056fc:	f107 0318 	add.w	r3, r7, #24
 8005700:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005704:	e882 0003 	stmia.w	r2, {r0, r1}
 8005708:	f107 030c 	add.w	r3, r7, #12
 800570c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800570e:	4620      	mov	r0, r4
 8005710:	f002 ff2e 	bl	8008570 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4618      	mov	r0, r3
 800571a:	f002 ff71 	bl	8008600 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572a:	fbb2 f3f3 	udiv	r3, r2, r3
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005736:	4a28      	ldr	r2, [pc, #160]	; (80057d8 <HAL_SD_InitCard+0x130>)
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	fbb2 f3f3 	udiv	r3, r2, r3
 800573e:	3301      	adds	r3, #1
 8005740:	4618      	mov	r0, r3
 8005742:	f7fb fdaf 	bl	80012a4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 ffbe 	bl	80066c8 <SD_PowerON>
 800574c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e02e      	b.n	80057ca <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fedd 	bl	800652c <SD_InitCard>
 8005772:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00b      	beq.n	8005792 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e01b      	b.n	80057ca <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800579a:	4618      	mov	r0, r3
 800579c:	f002 ffc6 	bl	800872c <SDMMC_CmdBlockLength>
 80057a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00f      	beq.n	80057c8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a0b      	ldr	r2, [pc, #44]	; (80057dc <HAL_SD_InitCard+0x134>)
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	372c      	adds	r7, #44	; 0x2c
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd90      	pop	{r4, r7, pc}
 80057d2:	bf00      	nop
 80057d4:	014f8b59 	.word	0x014f8b59
 80057d8:	00012110 	.word	0x00012110
 80057dc:	1fe00fff 	.word	0x1fe00fff

080057e0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08c      	sub	sp, #48	; 0x30
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d107      	bne.n	8005808 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e08d      	b.n	8005924 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	f040 8086 	bne.w	8005922 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800581c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	441a      	add	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005826:	429a      	cmp	r2, r3
 8005828:	d907      	bls.n	800583a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e074      	b.n	8005924 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2203      	movs	r2, #3
 800583e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2200      	movs	r2, #0
 8005848:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	025a      	lsls	r2, r3, #9
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	2b01      	cmp	r3, #1
 800585e:	d002      	beq.n	8005866 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	025b      	lsls	r3, r3, #9
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005866:	f04f 33ff 	mov.w	r3, #4294967295
 800586a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	025b      	lsls	r3, r3, #9
 8005870:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005872:	2390      	movs	r3, #144	; 0x90
 8005874:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005876:	2302      	movs	r3, #2
 8005878:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800587a:	2300      	movs	r3, #0
 800587c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800587e:	2300      	movs	r3, #0
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f107 0210 	add.w	r2, r7, #16
 800588a:	4611      	mov	r1, r2
 800588c:	4618      	mov	r0, r3
 800588e:	f002 ff21 	bl	80086d4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2201      	movs	r2, #1
 80058b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d90a      	bls.n	80058ce <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2282      	movs	r2, #130	; 0x82
 80058bc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058c4:	4618      	mov	r0, r3
 80058c6:	f002 ff77 	bl	80087b8 <SDMMC_CmdReadMultiBlock>
 80058ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 80058cc:	e009      	b.n	80058e2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2281      	movs	r2, #129	; 0x81
 80058d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058da:	4618      	mov	r0, r3
 80058dc:	f002 ff49 	bl	8008772 <SDMMC_CmdReadSingleBlock>
 80058e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d012      	beq.n	800590e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a0f      	ldr	r2, [pc, #60]	; (800592c <HAL_SD_ReadBlocks_DMA+0x14c>)
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e00a      	b.n	8005924 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800591c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e000      	b.n	8005924 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005922:	2302      	movs	r3, #2
  }
}
 8005924:	4618      	mov	r0, r3
 8005926:	3730      	adds	r7, #48	; 0x30
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	1fe00fff 	.word	0x1fe00fff

08005930 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08c      	sub	sp, #48	; 0x30
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d107      	bne.n	8005958 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e08d      	b.n	8005a74 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b01      	cmp	r3, #1
 8005962:	f040 8086 	bne.w	8005a72 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800596c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	441a      	add	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005976:	429a      	cmp	r2, r3
 8005978:	d907      	bls.n	800598a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e074      	b.n	8005a74 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2203      	movs	r2, #3
 800598e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2200      	movs	r2, #0
 8005998:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	025a      	lsls	r2, r3, #9
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d002      	beq.n	80059b6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	025b      	lsls	r3, r3, #9
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80059b6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ba:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	025b      	lsls	r3, r3, #9
 80059c0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80059c2:	2390      	movs	r3, #144	; 0x90
 80059c4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f107 0210 	add.w	r2, r7, #16
 80059da:	4611      	mov	r1, r2
 80059dc:	4618      	mov	r0, r3
 80059de:	f002 fe79 	bl	80086d4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d90a      	bls.n	8005a1e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	22a0      	movs	r2, #160	; 0xa0
 8005a0c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a14:	4618      	mov	r0, r3
 8005a16:	f002 ff15 	bl	8008844 <SDMMC_CmdWriteMultiBlock>
 8005a1a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005a1c:	e009      	b.n	8005a32 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2290      	movs	r2, #144	; 0x90
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f002 fee7 	bl	80087fe <SDMMC_CmdWriteSingleBlock>
 8005a30:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d012      	beq.n	8005a5e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a0f      	ldr	r2, [pc, #60]	; (8005a7c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	431a      	orrs	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e00a      	b.n	8005a74 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8005a6c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e000      	b.n	8005a74 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
  }
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3730      	adds	r7, #48	; 0x30
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	1fe00fff 	.word	0x1fe00fff

08005a80 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_SD_IRQHandler+0x2e>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f001 f8fa 	bl	8006ca0 <SD_Read_IT>
 8005aac:	e19a      	b.n	8005de4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 80ac 	beq.w	8005c16 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4b59      	ldr	r3, [pc, #356]	; (8005c38 <HAL_SD_IRQHandler+0x1b8>)
 8005ad4:	400b      	ands	r3, r1
 8005ad6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005ae6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d038      	beq.n	8005b74 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d104      	bne.n	8005b16 <HAL_SD_IRQHandler+0x96>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d011      	beq.n	8005b3a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f002 feb6 	bl	800888c <SDMMC_CmdStopTransfer>
 8005b20:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f95b 	bl	8005df0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a3f      	ldr	r2, [pc, #252]	; (8005c3c <HAL_SD_IRQHandler+0x1bc>)
 8005b40:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d104      	bne.n	8005b64 <HAL_SD_IRQHandler+0xe4>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f003 fcb9 	bl	80094dc <HAL_SD_RxCpltCallback>
 8005b6a:	e13b      	b.n	8005de4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f003 fca7 	bl	80094c0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b72:	e137      	b.n	8005de4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8132 	beq.w	8005de4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2200      	movs	r2, #0
 8005b86:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2200      	movs	r2, #0
 8005b96:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d104      	bne.n	8005bac <HAL_SD_IRQHandler+0x12c>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d011      	beq.n	8005bd0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f002 fe6b 	bl	800888c <SDMMC_CmdStopTransfer>
 8005bb6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f910 	bl	8005df0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d104      	bne.n	8005bf2 <HAL_SD_IRQHandler+0x172>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f003 fc64 	bl	80094c0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d105      	bne.n	8005c0e <HAL_SD_IRQHandler+0x18e>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80eb 	beq.w	8005de4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f003 fc64 	bl	80094dc <HAL_SD_RxCpltCallback>
}
 8005c14:	e0e6      	b.n	8005de4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <HAL_SD_IRQHandler+0x1c0>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d008      	beq.n	8005c40 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f001 f87c 	bl	8006d2c <SD_Write_IT>
 8005c34:	e0d6      	b.n	8005de4 <HAL_SD_IRQHandler+0x364>
 8005c36:	bf00      	nop
 8005c38:	ffff3ec5 	.word	0xffff3ec5
 8005c3c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c46:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 809d 	beq.w	8005d8a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c62:	f043 0202 	orr.w	r2, r3, #2
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7c:	f043 0208 	orr.w	r2, r3, #8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c96:	f043 0220 	orr.w	r2, r3, #32
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb0:	f043 0210 	orr.w	r2, r3, #16
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a4b      	ldr	r2, [pc, #300]	; (8005dec <HAL_SD_IRQHandler+0x36c>)
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005cce:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cde:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cfe:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f002 fdc1 	bl	800888c <SDMMC_CmdStopTransfer>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d24:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f851 	bl	8005df0 <HAL_SD_ErrorCallback>
}
 8005d4e:	e049      	b.n	8005de4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d044      	beq.n	8005de4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d040      	beq.n	8005de4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005d70:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2200      	movs	r2, #0
 8005d78:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f834 	bl	8005df0 <HAL_SD_ErrorCallback>
}
 8005d88:	e02c      	b.n	8005de4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d025      	beq.n	8005de4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10c      	bne.n	8005dca <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f001 f81e 	bl	8006dfc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8005dc0:	e010      	b.n	8005de4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f001 f806 	bl	8006dd4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8005dc8:	e00c      	b.n	8005de4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 f807 	bl	8006de8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8005dda:	e003      	b.n	8005de4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 ffef 	bl	8006dc0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8005de2:	e7ff      	b.n	8005de4 <HAL_SD_IRQHandler+0x364>
 8005de4:	bf00      	nop
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	18000f3a 	.word	0x18000f3a

08005df0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e12:	0f9b      	lsrs	r3, r3, #30
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1e:	0e9b      	lsrs	r3, r3, #26
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e30:	0e1b      	lsrs	r3, r3, #24
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e42:	0c1b      	lsrs	r3, r3, #16
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e64:	0d1b      	lsrs	r3, r3, #20
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e70:	0c1b      	lsrs	r3, r3, #16
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e82:	0bdb      	lsrs	r3, r3, #15
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e94:	0b9b      	lsrs	r3, r3, #14
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea6:	0b5b      	lsrs	r3, r3, #13
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb8:	0b1b      	lsrs	r3, r3, #12
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d163      	bne.n	8005f9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed8:	009a      	lsls	r2, r3, #2
 8005eda:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ede:	4013      	ands	r3, r2
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005ee4:	0f92      	lsrs	r2, r2, #30
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ef0:	0edb      	lsrs	r3, r3, #27
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f02:	0e1b      	lsrs	r3, r3, #24
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f14:	0d5b      	lsrs	r3, r3, #21
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f26:	0c9b      	lsrs	r3, r3, #18
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f38:	0bdb      	lsrs	r3, r3, #15
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	7e1b      	ldrb	r3, [r3, #24]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	3302      	adds	r3, #2
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f66:	fb03 f202 	mul.w	r2, r3, r2
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	7a1b      	ldrb	r3, [r3, #8]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	2201      	movs	r2, #1
 8005f7a:	409a      	lsls	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005f88:	0a52      	lsrs	r2, r2, #9
 8005f8a:	fb03 f202 	mul.w	r2, r3, r2
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f98:	655a      	str	r2, [r3, #84]	; 0x54
 8005f9a:	e031      	b.n	8006000 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d11d      	bne.n	8005fe0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb2:	0c1b      	lsrs	r3, r3, #16
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	029a      	lsls	r2, r3, #10
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
 8005fde:	e00f      	b.n	8006000 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a58      	ldr	r2, [pc, #352]	; (8006148 <HAL_SD_GetCardCSD+0x344>)
 8005fe6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e09d      	b.n	800613c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006004:	0b9b      	lsrs	r3, r3, #14
 8006006:	b2db      	uxtb	r3, r3
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	b2da      	uxtb	r2, r3
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006016:	09db      	lsrs	r3, r3, #7
 8006018:	b2db      	uxtb	r3, r3
 800601a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800601e:	b2da      	uxtb	r2, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006028:	b2db      	uxtb	r3, r3
 800602a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800602e:	b2da      	uxtb	r2, r3
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006038:	0fdb      	lsrs	r3, r3, #31
 800603a:	b2da      	uxtb	r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006044:	0f5b      	lsrs	r3, r3, #29
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f003 0303 	and.w	r3, r3, #3
 800604c:	b2da      	uxtb	r2, r3
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006056:	0e9b      	lsrs	r3, r3, #26
 8006058:	b2db      	uxtb	r3, r3
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	b2da      	uxtb	r2, r3
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006068:	0d9b      	lsrs	r3, r3, #22
 800606a:	b2db      	uxtb	r3, r3
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	b2da      	uxtb	r2, r3
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800607a:	0d5b      	lsrs	r3, r3, #21
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	b2da      	uxtb	r2, r3
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006096:	0c1b      	lsrs	r3, r3, #16
 8006098:	b2db      	uxtb	r3, r3
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060aa:	0bdb      	lsrs	r3, r3, #15
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060be:	0b9b      	lsrs	r3, r3, #14
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d2:	0b5b      	lsrs	r3, r3, #13
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e6:	0b1b      	lsrs	r3, r3, #12
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060fa:	0a9b      	lsrs	r3, r3, #10
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	b2da      	uxtb	r2, r3
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800610e:	0a1b      	lsrs	r3, r3, #8
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	b2da      	uxtb	r2, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006122:	085b      	lsrs	r3, r3, #1
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612a:	b2da      	uxtb	r2, r3
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	1fe00fff 	.word	0x1fe00fff

0800614c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b094      	sub	sp, #80	; 0x50
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b03      	cmp	r3, #3
 8006166:	d101      	bne.n	800616c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e0a7      	b.n	80062bc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800616c:	f107 0308 	add.w	r3, r7, #8
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fb36 	bl	80067e4 <SD_SendSDStatus>
 8006178:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800617a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617c:	2b00      	cmp	r3, #0
 800617e:	d011      	beq.n	80061a4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a4f      	ldr	r2, [pc, #316]	; (80062c4 <HAL_SD_GetCardStatus+0x178>)
 8006186:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800618c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80061a2:	e070      	b.n	8006286 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	099b      	lsrs	r3, r3, #6
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	0a1b      	lsrs	r3, r3, #8
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	0e1b      	lsrs	r3, r3, #24
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	4313      	orrs	r3, r2
 80061d8:	b29a      	uxth	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	061a      	lsls	r2, r3, #24
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061ea:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	0a1b      	lsrs	r3, r3, #8
 80061f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80061f4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	0e1b      	lsrs	r3, r3, #24
 80061fa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	b2da      	uxtb	r2, r3
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	0a1b      	lsrs	r3, r3, #8
 800620c:	b2da      	uxtb	r2, r3
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	0d1b      	lsrs	r3, r3, #20
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	b2da      	uxtb	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	0c1b      	lsrs	r3, r3, #16
 8006226:	b29b      	uxth	r3, r3
 8006228:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800622c:	b29a      	uxth	r2, r3
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	b29b      	uxth	r3, r3
 8006232:	b2db      	uxtb	r3, r3
 8006234:	b29b      	uxth	r3, r3
 8006236:	4313      	orrs	r3, r2
 8006238:	b29a      	uxth	r2, r3
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	0a9b      	lsrs	r3, r3, #10
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006248:	b2da      	uxtb	r2, r3
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	0a1b      	lsrs	r3, r3, #8
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	b2da      	uxtb	r2, r3
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	091b      	lsrs	r3, r3, #4
 8006262:	b2db      	uxtb	r3, r3
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	b2da      	uxtb	r2, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	f003 030f 	and.w	r3, r3, #15
 8006276:	b2da      	uxtb	r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	0e1b      	lsrs	r3, r3, #24
 8006280:	b2da      	uxtb	r2, r3
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800628e:	4618      	mov	r0, r3
 8006290:	f002 fa4c 	bl	800872c <SDMMC_CmdBlockLength>
 8006294:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00d      	beq.n	80062b8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a08      	ldr	r2, [pc, #32]	; (80062c4 <HAL_SD_GetCardStatus+0x178>)
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062a8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80062b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3750      	adds	r7, #80	; 0x50
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	1fe00fff 	.word	0x1fe00fff

080062c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b08d      	sub	sp, #52	; 0x34
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2203      	movs	r2, #3
 80062dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d02e      	beq.n	8006346 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ee:	d106      	bne.n	80062fe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	635a      	str	r2, [r3, #52]	; 0x34
 80062fc:	e029      	b.n	8006352 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006304:	d10a      	bne.n	800631c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fb64 	bl	80069d4 <SD_WideBus_Enable>
 800630c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	635a      	str	r2, [r3, #52]	; 0x34
 800631a:	e01a      	b.n	8006352 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fba1 	bl	8006a6a <SD_WideBus_Disable>
 8006328:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	635a      	str	r2, [r3, #52]	; 0x34
 8006336:	e00c      	b.n	8006352 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	635a      	str	r2, [r3, #52]	; 0x34
 8006344:	e005      	b.n	8006352 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a5f      	ldr	r2, [pc, #380]	; (80064dc <HAL_SD_ConfigWideBusOperation+0x214>)
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006368:	e096      	b.n	8006498 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800636a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800636e:	f04f 0100 	mov.w	r1, #0
 8006372:	f7fd fe21 	bl	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006376:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 8083 	beq.w	8006486 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695a      	ldr	r2, [r3, #20]
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4950      	ldr	r1, [pc, #320]	; (80064e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800639e:	fba1 1303 	umull	r1, r3, r1, r3
 80063a2:	0e1b      	lsrs	r3, r3, #24
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d303      	bcc.n	80063b0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	e05a      	b.n	8006466 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b8:	d103      	bne.n	80063c2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	e051      	b.n	8006466 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ca:	d126      	bne.n	800641a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10e      	bne.n	80063f2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4a43      	ldr	r2, [pc, #268]	; (80064e4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d906      	bls.n	80063ea <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4a40      	ldr	r2, [pc, #256]	; (80064e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80063e0:	fba2 2303 	umull	r2, r3, r2, r3
 80063e4:	0e5b      	lsrs	r3, r3, #25
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	e03d      	b.n	8006466 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	e039      	b.n	8006466 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fe:	4a39      	ldr	r2, [pc, #228]	; (80064e4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d906      	bls.n	8006412 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	4a36      	ldr	r2, [pc, #216]	; (80064e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006408:	fba2 2303 	umull	r2, r3, r2, r3
 800640c:	0e5b      	lsrs	r3, r3, #25
 800640e:	61bb      	str	r3, [r7, #24]
 8006410:	e029      	b.n	8006466 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	61bb      	str	r3, [r7, #24]
 8006418:	e025      	b.n	8006466 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10e      	bne.n	8006440 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4a30      	ldr	r2, [pc, #192]	; (80064e8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d906      	bls.n	8006438 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	4a2c      	ldr	r2, [pc, #176]	; (80064e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	0e1b      	lsrs	r3, r3, #24
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	e016      	b.n	8006466 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	e012      	b.n	8006466 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	fbb2 f3f3 	udiv	r3, r2, r3
 800644c:	4a26      	ldr	r2, [pc, #152]	; (80064e8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d906      	bls.n	8006460 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4a22      	ldr	r2, [pc, #136]	; (80064e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006456:	fba2 2303 	umull	r2, r3, r2, r3
 800645a:	0e1b      	lsrs	r3, r3, #24
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	e002      	b.n	8006466 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681c      	ldr	r4, [r3, #0]
 800646a:	466a      	mov	r2, sp
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006474:	e882 0003 	stmia.w	r2, {r0, r1}
 8006478:	f107 0308 	add.w	r3, r7, #8
 800647c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800647e:	4620      	mov	r0, r4
 8006480:	f002 f876 	bl	8008570 <SDMMC_Init>
 8006484:	e008      	b.n	8006498 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064a0:	4618      	mov	r0, r3
 80064a2:	f002 f943 	bl	800872c <SDMMC_CmdBlockLength>
 80064a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00c      	beq.n	80064c8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a0a      	ldr	r2, [pc, #40]	; (80064dc <HAL_SD_ConfigWideBusOperation+0x214>)
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80064d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	372c      	adds	r7, #44	; 0x2c
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd90      	pop	{r4, r7, pc}
 80064dc:	1fe00fff 	.word	0x1fe00fff
 80064e0:	55e63b89 	.word	0x55e63b89
 80064e4:	02faf080 	.word	0x02faf080
 80064e8:	017d7840 	.word	0x017d7840

080064ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80064f8:	f107 030c 	add.w	r3, r7, #12
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa40 	bl	8006984 <SD_SendStatus>
 8006504:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	0a5b      	lsrs	r3, r3, #9
 800651c:	f003 030f 	and.w	r3, r3, #15
 8006520:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006522:	693b      	ldr	r3, [r7, #16]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b090      	sub	sp, #64	; 0x40
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006538:	f7fa fea8 	bl	800128c <HAL_GetTick>
 800653c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f002 f86d 	bl	8008622 <SDMMC_GetPowerState>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800654e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006552:	e0b5      	b.n	80066c0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	2b03      	cmp	r3, #3
 800655a:	d02e      	beq.n	80065ba <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4618      	mov	r0, r3
 8006562:	f002 fab8 	bl	8008ad6 <SDMMC_CmdSendCID>
 8006566:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <SD_InitCard+0x46>
    {
      return errorstate;
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	e0a6      	b.n	80066c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2100      	movs	r1, #0
 8006578:	4618      	mov	r0, r3
 800657a:	f002 f898 	bl	80086ae <SDMMC_GetResponse>
 800657e:	4602      	mov	r2, r0
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2104      	movs	r1, #4
 800658a:	4618      	mov	r0, r3
 800658c:	f002 f88f 	bl	80086ae <SDMMC_GetResponse>
 8006590:	4602      	mov	r2, r0
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2108      	movs	r1, #8
 800659c:	4618      	mov	r0, r3
 800659e:	f002 f886 	bl	80086ae <SDMMC_GetResponse>
 80065a2:	4602      	mov	r2, r0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	210c      	movs	r1, #12
 80065ae:	4618      	mov	r0, r3
 80065b0:	f002 f87d 	bl	80086ae <SDMMC_GetResponse>
 80065b4:	4602      	mov	r2, r0
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d01d      	beq.n	80065fe <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80065c2:	e019      	b.n	80065f8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f107 020a 	add.w	r2, r7, #10
 80065cc:	4611      	mov	r1, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f002 fac0 	bl	8008b54 <SDMMC_CmdSetRelAdd>
 80065d4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80065dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065de:	e06f      	b.n	80066c0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80065e0:	f7fa fe54 	bl	800128c <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f241 3287 	movw	r2, #4999	; 0x1387
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d902      	bls.n	80065f8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80065f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065f6:	e063      	b.n	80066c0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80065f8:	897b      	ldrh	r3, [r7, #10]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0e2      	beq.n	80065c4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	2b03      	cmp	r3, #3
 8006604:	d036      	beq.n	8006674 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006606:	897b      	ldrh	r3, [r7, #10]
 8006608:	461a      	mov	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006616:	041b      	lsls	r3, r3, #16
 8006618:	4619      	mov	r1, r3
 800661a:	4610      	mov	r0, r2
 800661c:	f002 fa7a 	bl	8008b14 <SDMMC_CmdSendCSD>
 8006620:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <SD_InitCard+0x100>
    {
      return errorstate;
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	e049      	b.n	80066c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2100      	movs	r1, #0
 8006632:	4618      	mov	r0, r3
 8006634:	f002 f83b 	bl	80086ae <SDMMC_GetResponse>
 8006638:	4602      	mov	r2, r0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2104      	movs	r1, #4
 8006644:	4618      	mov	r0, r3
 8006646:	f002 f832 	bl	80086ae <SDMMC_GetResponse>
 800664a:	4602      	mov	r2, r0
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2108      	movs	r1, #8
 8006656:	4618      	mov	r0, r3
 8006658:	f002 f829 	bl	80086ae <SDMMC_GetResponse>
 800665c:	4602      	mov	r2, r0
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	210c      	movs	r1, #12
 8006668:	4618      	mov	r0, r3
 800666a:	f002 f820 	bl	80086ae <SDMMC_GetResponse>
 800666e:	4602      	mov	r2, r0
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2104      	movs	r1, #4
 800667a:	4618      	mov	r0, r3
 800667c:	f002 f817 	bl	80086ae <SDMMC_GetResponse>
 8006680:	4603      	mov	r3, r0
 8006682:	0d1a      	lsrs	r2, r3, #20
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006688:	f107 030c 	add.w	r3, r7, #12
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff fbb8 	bl	8005e04 <HAL_SD_GetCardCSD>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800669a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800669e:	e00f      	b.n	80066c0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a8:	041b      	lsls	r3, r3, #16
 80066aa:	4619      	mov	r1, r3
 80066ac:	4610      	mov	r0, r2
 80066ae:	f002 f929 	bl	8008904 <SDMMC_CmdSelDesel>
 80066b2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <SD_InitCard+0x192>
  {
    return errorstate;
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	e000      	b.n	80066c0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3740      	adds	r7, #64	; 0x40
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f002 f932 	bl	800894a <SDMMC_CmdGoIdleState>
 80066e6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	e072      	b.n	80067d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f002 f945 	bl	8008986 <SDMMC_CmdOperCond>
 80066fc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006704:	d10d      	bne.n	8006722 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f002 f91a 	bl	800894a <SDMMC_CmdGoIdleState>
 8006716:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d004      	beq.n	8006728 <SD_PowerON+0x60>
    {
      return errorstate;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	e05a      	b.n	80067d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d137      	bne.n	80067a0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2100      	movs	r1, #0
 8006736:	4618      	mov	r0, r3
 8006738:	f002 f945 	bl	80089c6 <SDMMC_CmdAppCommand>
 800673c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d02d      	beq.n	80067a0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006744:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006748:	e046      	b.n	80067d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2100      	movs	r1, #0
 8006750:	4618      	mov	r0, r3
 8006752:	f002 f938 	bl	80089c6 <SDMMC_CmdAppCommand>
 8006756:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <SD_PowerON+0x9a>
    {
      return errorstate;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	e03a      	b.n	80067d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	491e      	ldr	r1, [pc, #120]	; (80067e0 <SD_PowerON+0x118>)
 8006768:	4618      	mov	r0, r3
 800676a:	f002 f94f 	bl	8008a0c <SDMMC_CmdAppOperCommand>
 800676e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006776:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800677a:	e02d      	b.n	80067d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2100      	movs	r1, #0
 8006782:	4618      	mov	r0, r3
 8006784:	f001 ff93 	bl	80086ae <SDMMC_GetResponse>
 8006788:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	0fdb      	lsrs	r3, r3, #31
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <SD_PowerON+0xce>
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <SD_PowerON+0xd0>
 8006796:	2300      	movs	r3, #0
 8006798:	613b      	str	r3, [r7, #16]

    count++;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	3301      	adds	r3, #1
 800679e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d802      	bhi.n	80067b0 <SD_PowerON+0xe8>
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0cc      	beq.n	800674a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d902      	bls.n	80067c0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80067ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067be:	e00b      	b.n	80067d8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	c1100000 	.word	0xc1100000

080067e4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08c      	sub	sp, #48	; 0x30
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80067ee:	f7fa fd4d 	bl	800128c <HAL_GetTick>
 80067f2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2100      	movs	r1, #0
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 ff55 	bl	80086ae <SDMMC_GetResponse>
 8006804:	4603      	mov	r3, r0
 8006806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800680e:	d102      	bne.n	8006816 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006814:	e0b0      	b.n	8006978 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2140      	movs	r1, #64	; 0x40
 800681c:	4618      	mov	r0, r3
 800681e:	f001 ff85 	bl	800872c <SDMMC_CmdBlockLength>
 8006822:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	e0a0      	b.n	8006978 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	041b      	lsls	r3, r3, #16
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f002 f8bf 	bl	80089c6 <SDMMC_CmdAppCommand>
 8006848:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	e08d      	b.n	8006978 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800685c:	f04f 33ff 	mov.w	r3, #4294967295
 8006860:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006862:	2340      	movs	r3, #64	; 0x40
 8006864:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006866:	2360      	movs	r3, #96	; 0x60
 8006868:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800686a:	2302      	movs	r3, #2
 800686c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800686e:	2300      	movs	r3, #0
 8006870:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006872:	2301      	movs	r3, #1
 8006874:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f107 0208 	add.w	r2, r7, #8
 800687e:	4611      	mov	r1, r2
 8006880:	4618      	mov	r0, r3
 8006882:	f001 ff27 	bl	80086d4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f002 f9a7 	bl	8008bde <SDMMC_CmdStatusRegister>
 8006890:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d02b      	beq.n	80068f0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	e069      	b.n	8006978 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d013      	beq.n	80068da <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80068b2:	2300      	movs	r3, #0
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068b6:	e00d      	b.n	80068d4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 fe81 	bl	80085c4 <SDMMC_ReadFIFO>
 80068c2:	4602      	mov	r2, r0
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	601a      	str	r2, [r3, #0]
        pData++;
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	3304      	adds	r3, #4
 80068cc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	3301      	adds	r3, #1
 80068d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	2b07      	cmp	r3, #7
 80068d8:	d9ee      	bls.n	80068b8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80068da:	f7fa fcd7 	bl	800128c <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e8:	d102      	bne.n	80068f0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80068ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068ee:	e043      	b.n	8006978 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0d2      	beq.n	80068a4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006904:	f003 0308 	and.w	r3, r3, #8
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800690c:	2308      	movs	r3, #8
 800690e:	e033      	b.n	8006978 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800691e:	2302      	movs	r3, #2
 8006920:	e02a      	b.n	8006978 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006928:	f003 0320 	and.w	r3, r3, #32
 800692c:	2b00      	cmp	r3, #0
 800692e:	d017      	beq.n	8006960 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006930:	2320      	movs	r3, #32
 8006932:	e021      	b.n	8006978 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f001 fe43 	bl	80085c4 <SDMMC_ReadFIFO>
 800693e:	4602      	mov	r2, r0
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	601a      	str	r2, [r3, #0]
    pData++;
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	3304      	adds	r3, #4
 8006948:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800694a:	f7fa fc9f 	bl	800128c <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d102      	bne.n	8006960 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800695a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800695e:	e00b      	b.n	8006978 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e2      	bne.n	8006934 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a03      	ldr	r2, [pc, #12]	; (8006980 <SD_SendSDStatus+0x19c>)
 8006974:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3730      	adds	r7, #48	; 0x30
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	18000f3a 	.word	0x18000f3a

08006984 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006994:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006998:	e018      	b.n	80069cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a2:	041b      	lsls	r3, r3, #16
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f002 f8f6 	bl	8008b98 <SDMMC_CmdSendStatus>
 80069ac:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	e009      	b.n	80069cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 fe75 	bl	80086ae <SDMMC_GetResponse>
 80069c4:	4602      	mov	r2, r0
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	2300      	movs	r3, #0
 80069e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2100      	movs	r1, #0
 80069ea:	4618      	mov	r0, r3
 80069ec:	f001 fe5f 	bl	80086ae <SDMMC_GetResponse>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069fa:	d102      	bne.n	8006a02 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80069fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a00:	e02f      	b.n	8006a62 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a02:	f107 030c 	add.w	r3, r7, #12
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f879 	bl	8006b00 <SD_FindSCR>
 8006a0e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	e023      	b.n	8006a62 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01c      	beq.n	8006a5e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2c:	041b      	lsls	r3, r3, #16
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	f001 ffc8 	bl	80089c6 <SDMMC_CmdAppCommand>
 8006a36:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	e00f      	b.n	8006a62 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2102      	movs	r1, #2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 ffff 	bl	8008a4c <SDMMC_CmdBusWidth>
 8006a4e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	e003      	b.n	8006a62 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e001      	b.n	8006a62 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b086      	sub	sp, #24
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	2300      	movs	r3, #0
 8006a78:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2100      	movs	r1, #0
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 fe14 	bl	80086ae <SDMMC_GetResponse>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a90:	d102      	bne.n	8006a98 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a96:	e02f      	b.n	8006af8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a98:	f107 030c 	add.w	r3, r7, #12
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f82e 	bl	8006b00 <SD_FindSCR>
 8006aa4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	e023      	b.n	8006af8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d01c      	beq.n	8006af4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac2:	041b      	lsls	r3, r3, #16
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	f001 ff7d 	bl	80089c6 <SDMMC_CmdAppCommand>
 8006acc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	e00f      	b.n	8006af8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 ffb4 	bl	8008a4c <SDMMC_CmdBusWidth>
 8006ae4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	e003      	b.n	8006af8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e001      	b.n	8006af8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006af4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08e      	sub	sp, #56	; 0x38
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b0a:	f7fa fbbf 	bl	800128c <HAL_GetTick>
 8006b0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006b14:	2300      	movs	r3, #0
 8006b16:	60bb      	str	r3, [r7, #8]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2108      	movs	r1, #8
 8006b26:	4618      	mov	r0, r3
 8006b28:	f001 fe00 	bl	800872c <SDMMC_CmdBlockLength>
 8006b2c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	e0ad      	b.n	8006c94 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b40:	041b      	lsls	r3, r3, #16
 8006b42:	4619      	mov	r1, r3
 8006b44:	4610      	mov	r0, r2
 8006b46:	f001 ff3e 	bl	80089c6 <SDMMC_CmdAppCommand>
 8006b4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	e09e      	b.n	8006c94 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b56:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006b5c:	2308      	movs	r3, #8
 8006b5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006b60:	2330      	movs	r3, #48	; 0x30
 8006b62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b64:	2302      	movs	r3, #2
 8006b66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f107 0210 	add.w	r2, r7, #16
 8006b78:	4611      	mov	r1, r2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 fdaa 	bl	80086d4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 ff84 	bl	8008a92 <SDMMC_CmdSendSCR>
 8006b8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d027      	beq.n	8006be2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	e07e      	b.n	8006c94 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d113      	bne.n	8006bcc <SD_FindSCR+0xcc>
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d110      	bne.n	8006bcc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 fd08 	bl	80085c4 <SDMMC_ReadFIFO>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f001 fd01 	bl	80085c4 <SDMMC_ReadFIFO>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	60fb      	str	r3, [r7, #12]
      index++;
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc8:	3301      	adds	r3, #1
 8006bca:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006bcc:	f7fa fb5e 	bl	800128c <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d102      	bne.n	8006be2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006bdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006be0:	e058      	b.n	8006c94 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be8:	f240 532a 	movw	r3, #1322	; 0x52a
 8006bec:	4013      	ands	r3, r2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0d1      	beq.n	8006b96 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2208      	movs	r2, #8
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006c08:	2308      	movs	r3, #8
 8006c0a:	e043      	b.n	8006c94 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d005      	beq.n	8006c26 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c22:	2302      	movs	r3, #2
 8006c24:	e036      	b.n	8006c94 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006c3c:	2320      	movs	r3, #32
 8006c3e:	e029      	b.n	8006c94 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a15      	ldr	r2, [pc, #84]	; (8006c9c <SD_FindSCR+0x19c>)
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	061a      	lsls	r2, r3, #24
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	021b      	lsls	r3, r3, #8
 8006c50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c54:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006c5e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	0e1b      	lsrs	r3, r3, #24
 8006c64:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	601a      	str	r2, [r3, #0]
    scr++;
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	061a      	lsls	r2, r3, #24
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	021b      	lsls	r3, r3, #8
 8006c78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c7c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	0a1b      	lsrs	r3, r3, #8
 8006c82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006c86:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	0e1b      	lsrs	r3, r3, #24
 8006c8c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3738      	adds	r7, #56	; 0x38
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	18000f3a 	.word	0x18000f3a

08006ca0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb2:	2b1f      	cmp	r3, #31
 8006cb4:	d936      	bls.n	8006d24 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	e027      	b.n	8006d0c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f001 fc7f 	bl	80085c4 <SDMMC_ReadFIFO>
 8006cc6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	0a1b      	lsrs	r3, r3, #8
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	0c1b      	lsrs	r3, r3, #16
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	0e1b      	lsrs	r3, r3, #24
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	3301      	adds	r3, #1
 8006d04:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2b07      	cmp	r3, #7
 8006d10:	d9d4      	bls.n	8006cbc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	f1a3 0220 	sub.w	r2, r3, #32
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8006d24:	bf00      	nop
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	2b1f      	cmp	r3, #31
 8006d40:	d93a      	bls.n	8006db8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	e02b      	b.n	8006da0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	3301      	adds	r3, #1
 8006d52:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	021a      	lsls	r2, r3, #8
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	3301      	adds	r3, #1
 8006d64:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	041a      	lsls	r2, r3, #16
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	3301      	adds	r3, #1
 8006d76:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	061a      	lsls	r2, r3, #24
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	3301      	adds	r3, #1
 8006d88:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f107 020c 	add.w	r2, r7, #12
 8006d92:	4611      	mov	r1, r2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 fc22 	bl	80085de <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b07      	cmp	r3, #7
 8006da4:	d9d0      	bls.n	8006d48 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	f1a3 0220 	sub.w	r2, r3, #32
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	621a      	str	r2, [r3, #32]
  }
}
 8006db8:	bf00      	nop
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e049      	b.n	8006eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f841 	bl	8006ebe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4610      	mov	r0, r2
 8006e50:	f000 fa00 	bl	8007254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
	...

08006ed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d001      	beq.n	8006eec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e054      	b.n	8006f96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0201 	orr.w	r2, r2, #1
 8006f02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a26      	ldr	r2, [pc, #152]	; (8006fa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d022      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x80>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f16:	d01d      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x80>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a22      	ldr	r2, [pc, #136]	; (8006fa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d018      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x80>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a21      	ldr	r2, [pc, #132]	; (8006fac <HAL_TIM_Base_Start_IT+0xd8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d013      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x80>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1f      	ldr	r2, [pc, #124]	; (8006fb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00e      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x80>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1e      	ldr	r2, [pc, #120]	; (8006fb4 <HAL_TIM_Base_Start_IT+0xe0>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d009      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x80>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1c      	ldr	r2, [pc, #112]	; (8006fb8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d004      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x80>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a1b      	ldr	r2, [pc, #108]	; (8006fbc <HAL_TIM_Base_Start_IT+0xe8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d115      	bne.n	8006f80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	4b19      	ldr	r3, [pc, #100]	; (8006fc0 <HAL_TIM_Base_Start_IT+0xec>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b06      	cmp	r3, #6
 8006f64:	d015      	beq.n	8006f92 <HAL_TIM_Base_Start_IT+0xbe>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f6c:	d011      	beq.n	8006f92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0201 	orr.w	r2, r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f7e:	e008      	b.n	8006f92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0201 	orr.w	r2, r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	e000      	b.n	8006f94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40010000 	.word	0x40010000
 8006fa8:	40000400 	.word	0x40000400
 8006fac:	40000800 	.word	0x40000800
 8006fb0:	40000c00 	.word	0x40000c00
 8006fb4:	40010400 	.word	0x40010400
 8006fb8:	40001800 	.word	0x40001800
 8006fbc:	40014000 	.word	0x40014000
 8006fc0:	00010007 	.word	0x00010007

08006fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d122      	bne.n	8007020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d11b      	bne.n	8007020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f06f 0202 	mvn.w	r2, #2
 8006ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	f003 0303 	and.w	r3, r3, #3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f905 	bl	8007216 <HAL_TIM_IC_CaptureCallback>
 800700c:	e005      	b.n	800701a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f8f7 	bl	8007202 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f908 	bl	800722a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b04      	cmp	r3, #4
 800702c:	d122      	bne.n	8007074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b04      	cmp	r3, #4
 800703a:	d11b      	bne.n	8007074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0204 	mvn.w	r2, #4
 8007044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2202      	movs	r2, #2
 800704a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f8db 	bl	8007216 <HAL_TIM_IC_CaptureCallback>
 8007060:	e005      	b.n	800706e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f8cd 	bl	8007202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f8de 	bl	800722a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0308 	and.w	r3, r3, #8
 800707e:	2b08      	cmp	r3, #8
 8007080:	d122      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b08      	cmp	r3, #8
 800708e:	d11b      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0208 	mvn.w	r2, #8
 8007098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2204      	movs	r2, #4
 800709e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f8b1 	bl	8007216 <HAL_TIM_IC_CaptureCallback>
 80070b4:	e005      	b.n	80070c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f8a3 	bl	8007202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f8b4 	bl	800722a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0310 	and.w	r3, r3, #16
 80070d2:	2b10      	cmp	r3, #16
 80070d4:	d122      	bne.n	800711c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f003 0310 	and.w	r3, r3, #16
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d11b      	bne.n	800711c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f06f 0210 	mvn.w	r2, #16
 80070ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2208      	movs	r2, #8
 80070f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f887 	bl	8007216 <HAL_TIM_IC_CaptureCallback>
 8007108:	e005      	b.n	8007116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f879 	bl	8007202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f88a 	bl	800722a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b01      	cmp	r3, #1
 8007128:	d10e      	bne.n	8007148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b01      	cmp	r3, #1
 8007136:	d107      	bne.n	8007148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f06f 0201 	mvn.w	r2, #1
 8007140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7f9 fe58 	bl	8000df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d10e      	bne.n	8007174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007160:	2b80      	cmp	r3, #128	; 0x80
 8007162:	d107      	bne.n	8007174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800716c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f914 	bl	800739c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007182:	d10e      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718e:	2b80      	cmp	r3, #128	; 0x80
 8007190:	d107      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800719a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f907 	bl	80073b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ac:	2b40      	cmp	r3, #64	; 0x40
 80071ae:	d10e      	bne.n	80071ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ba:	2b40      	cmp	r3, #64	; 0x40
 80071bc:	d107      	bne.n	80071ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f838 	bl	800723e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b20      	cmp	r3, #32
 80071da:	d10e      	bne.n	80071fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f003 0320 	and.w	r3, r3, #32
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	d107      	bne.n	80071fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f06f 0220 	mvn.w	r2, #32
 80071f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f8c7 	bl	8007388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007232:	bf00      	nop
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
	...

08007254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a40      	ldr	r2, [pc, #256]	; (8007368 <TIM_Base_SetConfig+0x114>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d013      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007272:	d00f      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a3d      	ldr	r2, [pc, #244]	; (800736c <TIM_Base_SetConfig+0x118>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00b      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a3c      	ldr	r2, [pc, #240]	; (8007370 <TIM_Base_SetConfig+0x11c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d007      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a3b      	ldr	r2, [pc, #236]	; (8007374 <TIM_Base_SetConfig+0x120>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a3a      	ldr	r2, [pc, #232]	; (8007378 <TIM_Base_SetConfig+0x124>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d108      	bne.n	80072a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a2f      	ldr	r2, [pc, #188]	; (8007368 <TIM_Base_SetConfig+0x114>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01f      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b4:	d01b      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a2c      	ldr	r2, [pc, #176]	; (800736c <TIM_Base_SetConfig+0x118>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d017      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a2b      	ldr	r2, [pc, #172]	; (8007370 <TIM_Base_SetConfig+0x11c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d013      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a2a      	ldr	r2, [pc, #168]	; (8007374 <TIM_Base_SetConfig+0x120>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00f      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a29      	ldr	r2, [pc, #164]	; (8007378 <TIM_Base_SetConfig+0x124>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00b      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a28      	ldr	r2, [pc, #160]	; (800737c <TIM_Base_SetConfig+0x128>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d007      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a27      	ldr	r2, [pc, #156]	; (8007380 <TIM_Base_SetConfig+0x12c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d003      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a26      	ldr	r2, [pc, #152]	; (8007384 <TIM_Base_SetConfig+0x130>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d108      	bne.n	8007300 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a10      	ldr	r2, [pc, #64]	; (8007368 <TIM_Base_SetConfig+0x114>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d00f      	beq.n	800734c <TIM_Base_SetConfig+0xf8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a12      	ldr	r2, [pc, #72]	; (8007378 <TIM_Base_SetConfig+0x124>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00b      	beq.n	800734c <TIM_Base_SetConfig+0xf8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a11      	ldr	r2, [pc, #68]	; (800737c <TIM_Base_SetConfig+0x128>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d007      	beq.n	800734c <TIM_Base_SetConfig+0xf8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a10      	ldr	r2, [pc, #64]	; (8007380 <TIM_Base_SetConfig+0x12c>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d003      	beq.n	800734c <TIM_Base_SetConfig+0xf8>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a0f      	ldr	r2, [pc, #60]	; (8007384 <TIM_Base_SetConfig+0x130>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d103      	bne.n	8007354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	615a      	str	r2, [r3, #20]
}
 800735a:	bf00      	nop
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40010000 	.word	0x40010000
 800736c:	40000400 	.word	0x40000400
 8007370:	40000800 	.word	0x40000800
 8007374:	40000c00 	.word	0x40000c00
 8007378:	40010400 	.word	0x40010400
 800737c:	40014000 	.word	0x40014000
 8007380:	40014400 	.word	0x40014400
 8007384:	40014800 	.word	0x40014800

08007388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e042      	b.n	800745c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7f9 fdcd 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2224      	movs	r2, #36	; 0x24
 80073f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0201 	bic.w	r2, r2, #1
 8007404:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f82c 	bl	8007464 <UART_SetConfig>
 800740c:	4603      	mov	r3, r0
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e022      	b.n	800745c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fd88 	bl	8007f34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689a      	ldr	r2, [r3, #8]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0201 	orr.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fe0f 	bl	8008078 <UART_CheckIdleState>
 800745a:	4603      	mov	r3, r0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007468:	b092      	sub	sp, #72	; 0x48
 800746a:	af00      	add	r7, sp, #0
 800746c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	431a      	orrs	r2, r3
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	431a      	orrs	r2, r3
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	4313      	orrs	r3, r2
 800748a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4bbe      	ldr	r3, [pc, #760]	; (800778c <UART_SetConfig+0x328>)
 8007494:	4013      	ands	r3, r2
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	6812      	ldr	r2, [r2, #0]
 800749a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800749c:	430b      	orrs	r3, r1
 800749e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4ab3      	ldr	r2, [pc, #716]	; (8007790 <UART_SetConfig+0x32c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d004      	beq.n	80074d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074cc:	4313      	orrs	r3, r2
 80074ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	4baf      	ldr	r3, [pc, #700]	; (8007794 <UART_SetConfig+0x330>)
 80074d8:	4013      	ands	r3, r2
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074e0:	430b      	orrs	r3, r1
 80074e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	f023 010f 	bic.w	r1, r3, #15
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4aa6      	ldr	r2, [pc, #664]	; (8007798 <UART_SetConfig+0x334>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d177      	bne.n	80075f4 <UART_SetConfig+0x190>
 8007504:	4ba5      	ldr	r3, [pc, #660]	; (800779c <UART_SetConfig+0x338>)
 8007506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800750c:	2b28      	cmp	r3, #40	; 0x28
 800750e:	d86d      	bhi.n	80075ec <UART_SetConfig+0x188>
 8007510:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <UART_SetConfig+0xb4>)
 8007512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007516:	bf00      	nop
 8007518:	080075bd 	.word	0x080075bd
 800751c:	080075ed 	.word	0x080075ed
 8007520:	080075ed 	.word	0x080075ed
 8007524:	080075ed 	.word	0x080075ed
 8007528:	080075ed 	.word	0x080075ed
 800752c:	080075ed 	.word	0x080075ed
 8007530:	080075ed 	.word	0x080075ed
 8007534:	080075ed 	.word	0x080075ed
 8007538:	080075c5 	.word	0x080075c5
 800753c:	080075ed 	.word	0x080075ed
 8007540:	080075ed 	.word	0x080075ed
 8007544:	080075ed 	.word	0x080075ed
 8007548:	080075ed 	.word	0x080075ed
 800754c:	080075ed 	.word	0x080075ed
 8007550:	080075ed 	.word	0x080075ed
 8007554:	080075ed 	.word	0x080075ed
 8007558:	080075cd 	.word	0x080075cd
 800755c:	080075ed 	.word	0x080075ed
 8007560:	080075ed 	.word	0x080075ed
 8007564:	080075ed 	.word	0x080075ed
 8007568:	080075ed 	.word	0x080075ed
 800756c:	080075ed 	.word	0x080075ed
 8007570:	080075ed 	.word	0x080075ed
 8007574:	080075ed 	.word	0x080075ed
 8007578:	080075d5 	.word	0x080075d5
 800757c:	080075ed 	.word	0x080075ed
 8007580:	080075ed 	.word	0x080075ed
 8007584:	080075ed 	.word	0x080075ed
 8007588:	080075ed 	.word	0x080075ed
 800758c:	080075ed 	.word	0x080075ed
 8007590:	080075ed 	.word	0x080075ed
 8007594:	080075ed 	.word	0x080075ed
 8007598:	080075dd 	.word	0x080075dd
 800759c:	080075ed 	.word	0x080075ed
 80075a0:	080075ed 	.word	0x080075ed
 80075a4:	080075ed 	.word	0x080075ed
 80075a8:	080075ed 	.word	0x080075ed
 80075ac:	080075ed 	.word	0x080075ed
 80075b0:	080075ed 	.word	0x080075ed
 80075b4:	080075ed 	.word	0x080075ed
 80075b8:	080075e5 	.word	0x080075e5
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c2:	e222      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80075c4:	2304      	movs	r3, #4
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ca:	e21e      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80075cc:	2308      	movs	r3, #8
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075d2:	e21a      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80075d4:	2310      	movs	r3, #16
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075da:	e216      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80075dc:	2320      	movs	r3, #32
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e2:	e212      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80075e4:	2340      	movs	r3, #64	; 0x40
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ea:	e20e      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80075ec:	2380      	movs	r3, #128	; 0x80
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f2:	e20a      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a69      	ldr	r2, [pc, #420]	; (80077a0 <UART_SetConfig+0x33c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d130      	bne.n	8007660 <UART_SetConfig+0x1fc>
 80075fe:	4b67      	ldr	r3, [pc, #412]	; (800779c <UART_SetConfig+0x338>)
 8007600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	2b05      	cmp	r3, #5
 8007608:	d826      	bhi.n	8007658 <UART_SetConfig+0x1f4>
 800760a:	a201      	add	r2, pc, #4	; (adr r2, 8007610 <UART_SetConfig+0x1ac>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007629 	.word	0x08007629
 8007614:	08007631 	.word	0x08007631
 8007618:	08007639 	.word	0x08007639
 800761c:	08007641 	.word	0x08007641
 8007620:	08007649 	.word	0x08007649
 8007624:	08007651 	.word	0x08007651
 8007628:	2300      	movs	r3, #0
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762e:	e1ec      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007630:	2304      	movs	r3, #4
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007636:	e1e8      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007638:	2308      	movs	r3, #8
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763e:	e1e4      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007640:	2310      	movs	r3, #16
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007646:	e1e0      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007648:	2320      	movs	r3, #32
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764e:	e1dc      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007650:	2340      	movs	r3, #64	; 0x40
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007656:	e1d8      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007658:	2380      	movs	r3, #128	; 0x80
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765e:	e1d4      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a4f      	ldr	r2, [pc, #316]	; (80077a4 <UART_SetConfig+0x340>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d130      	bne.n	80076cc <UART_SetConfig+0x268>
 800766a:	4b4c      	ldr	r3, [pc, #304]	; (800779c <UART_SetConfig+0x338>)
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	2b05      	cmp	r3, #5
 8007674:	d826      	bhi.n	80076c4 <UART_SetConfig+0x260>
 8007676:	a201      	add	r2, pc, #4	; (adr r2, 800767c <UART_SetConfig+0x218>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	08007695 	.word	0x08007695
 8007680:	0800769d 	.word	0x0800769d
 8007684:	080076a5 	.word	0x080076a5
 8007688:	080076ad 	.word	0x080076ad
 800768c:	080076b5 	.word	0x080076b5
 8007690:	080076bd 	.word	0x080076bd
 8007694:	2300      	movs	r3, #0
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769a:	e1b6      	b.n	8007a0a <UART_SetConfig+0x5a6>
 800769c:	2304      	movs	r3, #4
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a2:	e1b2      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80076a4:	2308      	movs	r3, #8
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076aa:	e1ae      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80076ac:	2310      	movs	r3, #16
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076b2:	e1aa      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80076b4:	2320      	movs	r3, #32
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ba:	e1a6      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80076bc:	2340      	movs	r3, #64	; 0x40
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c2:	e1a2      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80076c4:	2380      	movs	r3, #128	; 0x80
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ca:	e19e      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a35      	ldr	r2, [pc, #212]	; (80077a8 <UART_SetConfig+0x344>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d130      	bne.n	8007738 <UART_SetConfig+0x2d4>
 80076d6:	4b31      	ldr	r3, [pc, #196]	; (800779c <UART_SetConfig+0x338>)
 80076d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	2b05      	cmp	r3, #5
 80076e0:	d826      	bhi.n	8007730 <UART_SetConfig+0x2cc>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <UART_SetConfig+0x284>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	08007701 	.word	0x08007701
 80076ec:	08007709 	.word	0x08007709
 80076f0:	08007711 	.word	0x08007711
 80076f4:	08007719 	.word	0x08007719
 80076f8:	08007721 	.word	0x08007721
 80076fc:	08007729 	.word	0x08007729
 8007700:	2300      	movs	r3, #0
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007706:	e180      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007708:	2304      	movs	r3, #4
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770e:	e17c      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007710:	2308      	movs	r3, #8
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007716:	e178      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007718:	2310      	movs	r3, #16
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771e:	e174      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007720:	2320      	movs	r3, #32
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007726:	e170      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007728:	2340      	movs	r3, #64	; 0x40
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772e:	e16c      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007730:	2380      	movs	r3, #128	; 0x80
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007736:	e168      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1b      	ldr	r2, [pc, #108]	; (80077ac <UART_SetConfig+0x348>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d142      	bne.n	80077c8 <UART_SetConfig+0x364>
 8007742:	4b16      	ldr	r3, [pc, #88]	; (800779c <UART_SetConfig+0x338>)
 8007744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b05      	cmp	r3, #5
 800774c:	d838      	bhi.n	80077c0 <UART_SetConfig+0x35c>
 800774e:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <UART_SetConfig+0x2f0>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	0800776d 	.word	0x0800776d
 8007758:	08007775 	.word	0x08007775
 800775c:	0800777d 	.word	0x0800777d
 8007760:	08007785 	.word	0x08007785
 8007764:	080077b1 	.word	0x080077b1
 8007768:	080077b9 	.word	0x080077b9
 800776c:	2300      	movs	r3, #0
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007772:	e14a      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007774:	2304      	movs	r3, #4
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777a:	e146      	b.n	8007a0a <UART_SetConfig+0x5a6>
 800777c:	2308      	movs	r3, #8
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007782:	e142      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007784:	2310      	movs	r3, #16
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778a:	e13e      	b.n	8007a0a <UART_SetConfig+0x5a6>
 800778c:	cfff69f3 	.word	0xcfff69f3
 8007790:	58000c00 	.word	0x58000c00
 8007794:	11fff4ff 	.word	0x11fff4ff
 8007798:	40011000 	.word	0x40011000
 800779c:	58024400 	.word	0x58024400
 80077a0:	40004400 	.word	0x40004400
 80077a4:	40004800 	.word	0x40004800
 80077a8:	40004c00 	.word	0x40004c00
 80077ac:	40005000 	.word	0x40005000
 80077b0:	2320      	movs	r3, #32
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b6:	e128      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80077b8:	2340      	movs	r3, #64	; 0x40
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077be:	e124      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80077c0:	2380      	movs	r3, #128	; 0x80
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c6:	e120      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4acb      	ldr	r2, [pc, #812]	; (8007afc <UART_SetConfig+0x698>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d176      	bne.n	80078c0 <UART_SetConfig+0x45c>
 80077d2:	4bcb      	ldr	r3, [pc, #812]	; (8007b00 <UART_SetConfig+0x69c>)
 80077d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077da:	2b28      	cmp	r3, #40	; 0x28
 80077dc:	d86c      	bhi.n	80078b8 <UART_SetConfig+0x454>
 80077de:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <UART_SetConfig+0x380>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	08007889 	.word	0x08007889
 80077e8:	080078b9 	.word	0x080078b9
 80077ec:	080078b9 	.word	0x080078b9
 80077f0:	080078b9 	.word	0x080078b9
 80077f4:	080078b9 	.word	0x080078b9
 80077f8:	080078b9 	.word	0x080078b9
 80077fc:	080078b9 	.word	0x080078b9
 8007800:	080078b9 	.word	0x080078b9
 8007804:	08007891 	.word	0x08007891
 8007808:	080078b9 	.word	0x080078b9
 800780c:	080078b9 	.word	0x080078b9
 8007810:	080078b9 	.word	0x080078b9
 8007814:	080078b9 	.word	0x080078b9
 8007818:	080078b9 	.word	0x080078b9
 800781c:	080078b9 	.word	0x080078b9
 8007820:	080078b9 	.word	0x080078b9
 8007824:	08007899 	.word	0x08007899
 8007828:	080078b9 	.word	0x080078b9
 800782c:	080078b9 	.word	0x080078b9
 8007830:	080078b9 	.word	0x080078b9
 8007834:	080078b9 	.word	0x080078b9
 8007838:	080078b9 	.word	0x080078b9
 800783c:	080078b9 	.word	0x080078b9
 8007840:	080078b9 	.word	0x080078b9
 8007844:	080078a1 	.word	0x080078a1
 8007848:	080078b9 	.word	0x080078b9
 800784c:	080078b9 	.word	0x080078b9
 8007850:	080078b9 	.word	0x080078b9
 8007854:	080078b9 	.word	0x080078b9
 8007858:	080078b9 	.word	0x080078b9
 800785c:	080078b9 	.word	0x080078b9
 8007860:	080078b9 	.word	0x080078b9
 8007864:	080078a9 	.word	0x080078a9
 8007868:	080078b9 	.word	0x080078b9
 800786c:	080078b9 	.word	0x080078b9
 8007870:	080078b9 	.word	0x080078b9
 8007874:	080078b9 	.word	0x080078b9
 8007878:	080078b9 	.word	0x080078b9
 800787c:	080078b9 	.word	0x080078b9
 8007880:	080078b9 	.word	0x080078b9
 8007884:	080078b1 	.word	0x080078b1
 8007888:	2301      	movs	r3, #1
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788e:	e0bc      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007890:	2304      	movs	r3, #4
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007896:	e0b8      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007898:	2308      	movs	r3, #8
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800789e:	e0b4      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80078a0:	2310      	movs	r3, #16
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a6:	e0b0      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80078a8:	2320      	movs	r3, #32
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ae:	e0ac      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80078b0:	2340      	movs	r3, #64	; 0x40
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b6:	e0a8      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80078b8:	2380      	movs	r3, #128	; 0x80
 80078ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078be:	e0a4      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a8f      	ldr	r2, [pc, #572]	; (8007b04 <UART_SetConfig+0x6a0>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d130      	bne.n	800792c <UART_SetConfig+0x4c8>
 80078ca:	4b8d      	ldr	r3, [pc, #564]	; (8007b00 <UART_SetConfig+0x69c>)
 80078cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ce:	f003 0307 	and.w	r3, r3, #7
 80078d2:	2b05      	cmp	r3, #5
 80078d4:	d826      	bhi.n	8007924 <UART_SetConfig+0x4c0>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <UART_SetConfig+0x478>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	080078f5 	.word	0x080078f5
 80078e0:	080078fd 	.word	0x080078fd
 80078e4:	08007905 	.word	0x08007905
 80078e8:	0800790d 	.word	0x0800790d
 80078ec:	08007915 	.word	0x08007915
 80078f0:	0800791d 	.word	0x0800791d
 80078f4:	2300      	movs	r3, #0
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fa:	e086      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80078fc:	2304      	movs	r3, #4
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007902:	e082      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007904:	2308      	movs	r3, #8
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790a:	e07e      	b.n	8007a0a <UART_SetConfig+0x5a6>
 800790c:	2310      	movs	r3, #16
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007912:	e07a      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007914:	2320      	movs	r3, #32
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791a:	e076      	b.n	8007a0a <UART_SetConfig+0x5a6>
 800791c:	2340      	movs	r3, #64	; 0x40
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007922:	e072      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007924:	2380      	movs	r3, #128	; 0x80
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792a:	e06e      	b.n	8007a0a <UART_SetConfig+0x5a6>
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a75      	ldr	r2, [pc, #468]	; (8007b08 <UART_SetConfig+0x6a4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d130      	bne.n	8007998 <UART_SetConfig+0x534>
 8007936:	4b72      	ldr	r3, [pc, #456]	; (8007b00 <UART_SetConfig+0x69c>)
 8007938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793a:	f003 0307 	and.w	r3, r3, #7
 800793e:	2b05      	cmp	r3, #5
 8007940:	d826      	bhi.n	8007990 <UART_SetConfig+0x52c>
 8007942:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <UART_SetConfig+0x4e4>)
 8007944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007948:	08007961 	.word	0x08007961
 800794c:	08007969 	.word	0x08007969
 8007950:	08007971 	.word	0x08007971
 8007954:	08007979 	.word	0x08007979
 8007958:	08007981 	.word	0x08007981
 800795c:	08007989 	.word	0x08007989
 8007960:	2300      	movs	r3, #0
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007966:	e050      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007968:	2304      	movs	r3, #4
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796e:	e04c      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007970:	2308      	movs	r3, #8
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007976:	e048      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007978:	2310      	movs	r3, #16
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797e:	e044      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007980:	2320      	movs	r3, #32
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007986:	e040      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007988:	2340      	movs	r3, #64	; 0x40
 800798a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798e:	e03c      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007990:	2380      	movs	r3, #128	; 0x80
 8007992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007996:	e038      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a5b      	ldr	r2, [pc, #364]	; (8007b0c <UART_SetConfig+0x6a8>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d130      	bne.n	8007a04 <UART_SetConfig+0x5a0>
 80079a2:	4b57      	ldr	r3, [pc, #348]	; (8007b00 <UART_SetConfig+0x69c>)
 80079a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	2b05      	cmp	r3, #5
 80079ac:	d826      	bhi.n	80079fc <UART_SetConfig+0x598>
 80079ae:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <UART_SetConfig+0x550>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	080079cd 	.word	0x080079cd
 80079b8:	080079d5 	.word	0x080079d5
 80079bc:	080079dd 	.word	0x080079dd
 80079c0:	080079e5 	.word	0x080079e5
 80079c4:	080079ed 	.word	0x080079ed
 80079c8:	080079f5 	.word	0x080079f5
 80079cc:	2302      	movs	r3, #2
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d2:	e01a      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80079d4:	2304      	movs	r3, #4
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079da:	e016      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80079dc:	2308      	movs	r3, #8
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e2:	e012      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80079e4:	2310      	movs	r3, #16
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ea:	e00e      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80079ec:	2320      	movs	r3, #32
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f2:	e00a      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80079f4:	2340      	movs	r3, #64	; 0x40
 80079f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fa:	e006      	b.n	8007a0a <UART_SetConfig+0x5a6>
 80079fc:	2380      	movs	r3, #128	; 0x80
 80079fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a02:	e002      	b.n	8007a0a <UART_SetConfig+0x5a6>
 8007a04:	2380      	movs	r3, #128	; 0x80
 8007a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a3f      	ldr	r2, [pc, #252]	; (8007b0c <UART_SetConfig+0x6a8>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	f040 80f8 	bne.w	8007c06 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	dc46      	bgt.n	8007aac <UART_SetConfig+0x648>
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	f2c0 8082 	blt.w	8007b28 <UART_SetConfig+0x6c4>
 8007a24:	3b02      	subs	r3, #2
 8007a26:	2b1e      	cmp	r3, #30
 8007a28:	d87e      	bhi.n	8007b28 <UART_SetConfig+0x6c4>
 8007a2a:	a201      	add	r2, pc, #4	; (adr r2, 8007a30 <UART_SetConfig+0x5cc>)
 8007a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a30:	08007ab3 	.word	0x08007ab3
 8007a34:	08007b29 	.word	0x08007b29
 8007a38:	08007abb 	.word	0x08007abb
 8007a3c:	08007b29 	.word	0x08007b29
 8007a40:	08007b29 	.word	0x08007b29
 8007a44:	08007b29 	.word	0x08007b29
 8007a48:	08007acb 	.word	0x08007acb
 8007a4c:	08007b29 	.word	0x08007b29
 8007a50:	08007b29 	.word	0x08007b29
 8007a54:	08007b29 	.word	0x08007b29
 8007a58:	08007b29 	.word	0x08007b29
 8007a5c:	08007b29 	.word	0x08007b29
 8007a60:	08007b29 	.word	0x08007b29
 8007a64:	08007b29 	.word	0x08007b29
 8007a68:	08007adb 	.word	0x08007adb
 8007a6c:	08007b29 	.word	0x08007b29
 8007a70:	08007b29 	.word	0x08007b29
 8007a74:	08007b29 	.word	0x08007b29
 8007a78:	08007b29 	.word	0x08007b29
 8007a7c:	08007b29 	.word	0x08007b29
 8007a80:	08007b29 	.word	0x08007b29
 8007a84:	08007b29 	.word	0x08007b29
 8007a88:	08007b29 	.word	0x08007b29
 8007a8c:	08007b29 	.word	0x08007b29
 8007a90:	08007b29 	.word	0x08007b29
 8007a94:	08007b29 	.word	0x08007b29
 8007a98:	08007b29 	.word	0x08007b29
 8007a9c:	08007b29 	.word	0x08007b29
 8007aa0:	08007b29 	.word	0x08007b29
 8007aa4:	08007b29 	.word	0x08007b29
 8007aa8:	08007b1b 	.word	0x08007b1b
 8007aac:	2b40      	cmp	r3, #64	; 0x40
 8007aae:	d037      	beq.n	8007b20 <UART_SetConfig+0x6bc>
 8007ab0:	e03a      	b.n	8007b28 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ab2:	f7fd f801 	bl	8004ab8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ab6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ab8:	e03c      	b.n	8007b34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fd f810 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ac8:	e034      	b.n	8007b34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aca:	f107 0318 	add.w	r3, r7, #24
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fd f95c 	bl	8004d8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ad8:	e02c      	b.n	8007b34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ada:	4b09      	ldr	r3, [pc, #36]	; (8007b00 <UART_SetConfig+0x69c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d016      	beq.n	8007b14 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ae6:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <UART_SetConfig+0x69c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	08db      	lsrs	r3, r3, #3
 8007aec:	f003 0303 	and.w	r3, r3, #3
 8007af0:	4a07      	ldr	r2, [pc, #28]	; (8007b10 <UART_SetConfig+0x6ac>)
 8007af2:	fa22 f303 	lsr.w	r3, r2, r3
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007af8:	e01c      	b.n	8007b34 <UART_SetConfig+0x6d0>
 8007afa:	bf00      	nop
 8007afc:	40011400 	.word	0x40011400
 8007b00:	58024400 	.word	0x58024400
 8007b04:	40007800 	.word	0x40007800
 8007b08:	40007c00 	.word	0x40007c00
 8007b0c:	58000c00 	.word	0x58000c00
 8007b10:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007b14:	4b9d      	ldr	r3, [pc, #628]	; (8007d8c <UART_SetConfig+0x928>)
 8007b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b18:	e00c      	b.n	8007b34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b1a:	4b9d      	ldr	r3, [pc, #628]	; (8007d90 <UART_SetConfig+0x92c>)
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b1e:	e009      	b.n	8007b34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b26:	e005      	b.n	8007b34 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 81de 	beq.w	8007ef8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	4a94      	ldr	r2, [pc, #592]	; (8007d94 <UART_SetConfig+0x930>)
 8007b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b4e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	4613      	mov	r3, r2
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4413      	add	r3, r2
 8007b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d305      	bcc.n	8007b6c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d903      	bls.n	8007b74 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b72:	e1c1      	b.n	8007ef8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b76:	2200      	movs	r2, #0
 8007b78:	60bb      	str	r3, [r7, #8]
 8007b7a:	60fa      	str	r2, [r7, #12]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	4a84      	ldr	r2, [pc, #528]	; (8007d94 <UART_SetConfig+0x930>)
 8007b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	2200      	movs	r2, #0
 8007b8a:	603b      	str	r3, [r7, #0]
 8007b8c:	607a      	str	r2, [r7, #4]
 8007b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b96:	f7f8 fcbf 	bl	8000518 <__aeabi_uldivmod>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	f04f 0200 	mov.w	r2, #0
 8007ba6:	f04f 0300 	mov.w	r3, #0
 8007baa:	020b      	lsls	r3, r1, #8
 8007bac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bb0:	0202      	lsls	r2, r0, #8
 8007bb2:	6979      	ldr	r1, [r7, #20]
 8007bb4:	6849      	ldr	r1, [r1, #4]
 8007bb6:	0849      	lsrs	r1, r1, #1
 8007bb8:	2000      	movs	r0, #0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	eb12 0804 	adds.w	r8, r2, r4
 8007bc2:	eb43 0905 	adc.w	r9, r3, r5
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	469a      	mov	sl, r3
 8007bce:	4693      	mov	fp, r2
 8007bd0:	4652      	mov	r2, sl
 8007bd2:	465b      	mov	r3, fp
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	f7f8 fc9e 	bl	8000518 <__aeabi_uldivmod>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4613      	mov	r3, r2
 8007be2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bea:	d308      	bcc.n	8007bfe <UART_SetConfig+0x79a>
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bf2:	d204      	bcs.n	8007bfe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfa:	60da      	str	r2, [r3, #12]
 8007bfc:	e17c      	b.n	8007ef8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007c04:	e178      	b.n	8007ef8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c0e:	f040 80c5 	bne.w	8007d9c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007c12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	dc48      	bgt.n	8007cac <UART_SetConfig+0x848>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	db7b      	blt.n	8007d16 <UART_SetConfig+0x8b2>
 8007c1e:	2b20      	cmp	r3, #32
 8007c20:	d879      	bhi.n	8007d16 <UART_SetConfig+0x8b2>
 8007c22:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <UART_SetConfig+0x7c4>)
 8007c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c28:	08007cb3 	.word	0x08007cb3
 8007c2c:	08007cbb 	.word	0x08007cbb
 8007c30:	08007d17 	.word	0x08007d17
 8007c34:	08007d17 	.word	0x08007d17
 8007c38:	08007cc3 	.word	0x08007cc3
 8007c3c:	08007d17 	.word	0x08007d17
 8007c40:	08007d17 	.word	0x08007d17
 8007c44:	08007d17 	.word	0x08007d17
 8007c48:	08007cd3 	.word	0x08007cd3
 8007c4c:	08007d17 	.word	0x08007d17
 8007c50:	08007d17 	.word	0x08007d17
 8007c54:	08007d17 	.word	0x08007d17
 8007c58:	08007d17 	.word	0x08007d17
 8007c5c:	08007d17 	.word	0x08007d17
 8007c60:	08007d17 	.word	0x08007d17
 8007c64:	08007d17 	.word	0x08007d17
 8007c68:	08007ce3 	.word	0x08007ce3
 8007c6c:	08007d17 	.word	0x08007d17
 8007c70:	08007d17 	.word	0x08007d17
 8007c74:	08007d17 	.word	0x08007d17
 8007c78:	08007d17 	.word	0x08007d17
 8007c7c:	08007d17 	.word	0x08007d17
 8007c80:	08007d17 	.word	0x08007d17
 8007c84:	08007d17 	.word	0x08007d17
 8007c88:	08007d17 	.word	0x08007d17
 8007c8c:	08007d17 	.word	0x08007d17
 8007c90:	08007d17 	.word	0x08007d17
 8007c94:	08007d17 	.word	0x08007d17
 8007c98:	08007d17 	.word	0x08007d17
 8007c9c:	08007d17 	.word	0x08007d17
 8007ca0:	08007d17 	.word	0x08007d17
 8007ca4:	08007d17 	.word	0x08007d17
 8007ca8:	08007d09 	.word	0x08007d09
 8007cac:	2b40      	cmp	r3, #64	; 0x40
 8007cae:	d02e      	beq.n	8007d0e <UART_SetConfig+0x8aa>
 8007cb0:	e031      	b.n	8007d16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cb2:	f7fa fec9 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8007cb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cb8:	e033      	b.n	8007d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cba:	f7fa fedb 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 8007cbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cc0:	e02f      	b.n	8007d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fc ff0c 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd0:	e027      	b.n	8007d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cd2:	f107 0318 	add.w	r3, r7, #24
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fd f858 	bl	8004d8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ce0:	e01f      	b.n	8007d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ce2:	4b2d      	ldr	r3, [pc, #180]	; (8007d98 <UART_SetConfig+0x934>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d009      	beq.n	8007d02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cee:	4b2a      	ldr	r3, [pc, #168]	; (8007d98 <UART_SetConfig+0x934>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	08db      	lsrs	r3, r3, #3
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	4a24      	ldr	r2, [pc, #144]	; (8007d8c <UART_SetConfig+0x928>)
 8007cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d00:	e00f      	b.n	8007d22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007d02:	4b22      	ldr	r3, [pc, #136]	; (8007d8c <UART_SetConfig+0x928>)
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d06:	e00c      	b.n	8007d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d08:	4b21      	ldr	r3, [pc, #132]	; (8007d90 <UART_SetConfig+0x92c>)
 8007d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d0c:	e009      	b.n	8007d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d14:	e005      	b.n	8007d22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80e7 	beq.w	8007ef8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	4a19      	ldr	r2, [pc, #100]	; (8007d94 <UART_SetConfig+0x930>)
 8007d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d34:	461a      	mov	r2, r3
 8007d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d3c:	005a      	lsls	r2, r3, #1
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	085b      	lsrs	r3, r3, #1
 8007d44:	441a      	add	r2, r3
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	2b0f      	cmp	r3, #15
 8007d54:	d916      	bls.n	8007d84 <UART_SetConfig+0x920>
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d5c:	d212      	bcs.n	8007d84 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	f023 030f 	bic.w	r3, r3, #15
 8007d66:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	085b      	lsrs	r3, r3, #1
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f003 0307 	and.w	r3, r3, #7
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d76:	4313      	orrs	r3, r2
 8007d78:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007d80:	60da      	str	r2, [r3, #12]
 8007d82:	e0b9      	b.n	8007ef8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d8a:	e0b5      	b.n	8007ef8 <UART_SetConfig+0xa94>
 8007d8c:	03d09000 	.word	0x03d09000
 8007d90:	003d0900 	.word	0x003d0900
 8007d94:	080163c8 	.word	0x080163c8
 8007d98:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	dc49      	bgt.n	8007e38 <UART_SetConfig+0x9d4>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	db7c      	blt.n	8007ea2 <UART_SetConfig+0xa3e>
 8007da8:	2b20      	cmp	r3, #32
 8007daa:	d87a      	bhi.n	8007ea2 <UART_SetConfig+0xa3e>
 8007dac:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <UART_SetConfig+0x950>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007e3f 	.word	0x08007e3f
 8007db8:	08007e47 	.word	0x08007e47
 8007dbc:	08007ea3 	.word	0x08007ea3
 8007dc0:	08007ea3 	.word	0x08007ea3
 8007dc4:	08007e4f 	.word	0x08007e4f
 8007dc8:	08007ea3 	.word	0x08007ea3
 8007dcc:	08007ea3 	.word	0x08007ea3
 8007dd0:	08007ea3 	.word	0x08007ea3
 8007dd4:	08007e5f 	.word	0x08007e5f
 8007dd8:	08007ea3 	.word	0x08007ea3
 8007ddc:	08007ea3 	.word	0x08007ea3
 8007de0:	08007ea3 	.word	0x08007ea3
 8007de4:	08007ea3 	.word	0x08007ea3
 8007de8:	08007ea3 	.word	0x08007ea3
 8007dec:	08007ea3 	.word	0x08007ea3
 8007df0:	08007ea3 	.word	0x08007ea3
 8007df4:	08007e6f 	.word	0x08007e6f
 8007df8:	08007ea3 	.word	0x08007ea3
 8007dfc:	08007ea3 	.word	0x08007ea3
 8007e00:	08007ea3 	.word	0x08007ea3
 8007e04:	08007ea3 	.word	0x08007ea3
 8007e08:	08007ea3 	.word	0x08007ea3
 8007e0c:	08007ea3 	.word	0x08007ea3
 8007e10:	08007ea3 	.word	0x08007ea3
 8007e14:	08007ea3 	.word	0x08007ea3
 8007e18:	08007ea3 	.word	0x08007ea3
 8007e1c:	08007ea3 	.word	0x08007ea3
 8007e20:	08007ea3 	.word	0x08007ea3
 8007e24:	08007ea3 	.word	0x08007ea3
 8007e28:	08007ea3 	.word	0x08007ea3
 8007e2c:	08007ea3 	.word	0x08007ea3
 8007e30:	08007ea3 	.word	0x08007ea3
 8007e34:	08007e95 	.word	0x08007e95
 8007e38:	2b40      	cmp	r3, #64	; 0x40
 8007e3a:	d02e      	beq.n	8007e9a <UART_SetConfig+0xa36>
 8007e3c:	e031      	b.n	8007ea2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e3e:	f7fa fe03 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8007e42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e44:	e033      	b.n	8007eae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e46:	f7fa fe15 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 8007e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e4c:	e02f      	b.n	8007eae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fc fe46 	bl	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e5c:	e027      	b.n	8007eae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e5e:	f107 0318 	add.w	r3, r7, #24
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fc ff92 	bl	8004d8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e6c:	e01f      	b.n	8007eae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e6e:	4b2d      	ldr	r3, [pc, #180]	; (8007f24 <UART_SetConfig+0xac0>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e7a:	4b2a      	ldr	r3, [pc, #168]	; (8007f24 <UART_SetConfig+0xac0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	08db      	lsrs	r3, r3, #3
 8007e80:	f003 0303 	and.w	r3, r3, #3
 8007e84:	4a28      	ldr	r2, [pc, #160]	; (8007f28 <UART_SetConfig+0xac4>)
 8007e86:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e8c:	e00f      	b.n	8007eae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e8e:	4b26      	ldr	r3, [pc, #152]	; (8007f28 <UART_SetConfig+0xac4>)
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e92:	e00c      	b.n	8007eae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e94:	4b25      	ldr	r3, [pc, #148]	; (8007f2c <UART_SetConfig+0xac8>)
 8007e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e98:	e009      	b.n	8007eae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ea0:	e005      	b.n	8007eae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007eac:	bf00      	nop
    }

    if (pclk != 0U)
 8007eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d021      	beq.n	8007ef8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	4a1d      	ldr	r2, [pc, #116]	; (8007f30 <UART_SetConfig+0xacc>)
 8007eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	085b      	lsrs	r3, r3, #1
 8007ecc:	441a      	add	r2, r3
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	2b0f      	cmp	r3, #15
 8007edc:	d909      	bls.n	8007ef2 <UART_SetConfig+0xa8e>
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee4:	d205      	bcs.n	8007ef2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60da      	str	r2, [r3, #12]
 8007ef0:	e002      	b.n	8007ef8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2200      	movs	r2, #0
 8007f12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007f14:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3748      	adds	r7, #72	; 0x48
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f22:	bf00      	nop
 8007f24:	58024400 	.word	0x58024400
 8007f28:	03d09000 	.word	0x03d09000
 8007f2c:	003d0900 	.word	0x003d0900
 8007f30:	080163c8 	.word	0x080163c8

08007f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00a      	beq.n	8007f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00a      	beq.n	8007fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	f003 0308 	and.w	r3, r3, #8
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00a      	beq.n	8007fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc8:	f003 0310 	and.w	r3, r3, #16
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00a      	beq.n	8007fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fea:	f003 0320 	and.w	r3, r3, #32
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00a      	beq.n	8008008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01a      	beq.n	800804a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	430a      	orrs	r2, r1
 8008028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008032:	d10a      	bne.n	800804a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	605a      	str	r2, [r3, #4]
  }
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b098      	sub	sp, #96	; 0x60
 800807c:	af02      	add	r7, sp, #8
 800807e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008088:	f7f9 f900 	bl	800128c <HAL_GetTick>
 800808c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0308 	and.w	r3, r3, #8
 8008098:	2b08      	cmp	r3, #8
 800809a:	d12f      	bne.n	80080fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800809c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080a4:	2200      	movs	r2, #0
 80080a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f88e 	bl	80081cc <UART_WaitOnFlagUntilTimeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d022      	beq.n	80080fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	e853 3f00 	ldrex	r3, [r3]
 80080c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ca:	653b      	str	r3, [r7, #80]	; 0x50
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	461a      	mov	r2, r3
 80080d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080d4:	647b      	str	r3, [r7, #68]	; 0x44
 80080d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080dc:	e841 2300 	strex	r3, r2, [r1]
 80080e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e6      	bne.n	80080b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2220      	movs	r2, #32
 80080ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e063      	b.n	80081c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b04      	cmp	r3, #4
 8008108:	d149      	bne.n	800819e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800810a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008112:	2200      	movs	r2, #0
 8008114:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f857 	bl	80081cc <UART_WaitOnFlagUntilTimeout>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d03c      	beq.n	800819e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	e853 3f00 	ldrex	r3, [r3]
 8008130:	623b      	str	r3, [r7, #32]
   return(result);
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008138:	64fb      	str	r3, [r7, #76]	; 0x4c
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008142:	633b      	str	r3, [r7, #48]	; 0x30
 8008144:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800814a:	e841 2300 	strex	r3, r2, [r1]
 800814e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1e6      	bne.n	8008124 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3308      	adds	r3, #8
 800815c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	e853 3f00 	ldrex	r3, [r3]
 8008164:	60fb      	str	r3, [r7, #12]
   return(result);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f023 0301 	bic.w	r3, r3, #1
 800816c:	64bb      	str	r3, [r7, #72]	; 0x48
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3308      	adds	r3, #8
 8008174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008176:	61fa      	str	r2, [r7, #28]
 8008178:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817a:	69b9      	ldr	r1, [r7, #24]
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	617b      	str	r3, [r7, #20]
   return(result);
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1e5      	bne.n	8008156 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2220      	movs	r2, #32
 800818e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e012      	b.n	80081c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3758      	adds	r7, #88	; 0x58
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	4613      	mov	r3, r2
 80081da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081dc:	e049      	b.n	8008272 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e4:	d045      	beq.n	8008272 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081e6:	f7f9 f851 	bl	800128c <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d302      	bcc.n	80081fc <UART_WaitOnFlagUntilTimeout+0x30>
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e048      	b.n	8008292 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d031      	beq.n	8008272 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	f003 0308 	and.w	r3, r3, #8
 8008218:	2b08      	cmp	r3, #8
 800821a:	d110      	bne.n	800823e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2208      	movs	r2, #8
 8008222:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 f839 	bl	800829c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2208      	movs	r2, #8
 800822e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e029      	b.n	8008292 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800824c:	d111      	bne.n	8008272 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008256:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 f81f 	bl	800829c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2220      	movs	r2, #32
 8008262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e00f      	b.n	8008292 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69da      	ldr	r2, [r3, #28]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	4013      	ands	r3, r2
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	429a      	cmp	r2, r3
 8008280:	bf0c      	ite	eq
 8008282:	2301      	moveq	r3, #1
 8008284:	2300      	movne	r3, #0
 8008286:	b2db      	uxtb	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	429a      	cmp	r2, r3
 800828e:	d0a6      	beq.n	80081de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
	...

0800829c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800829c:	b480      	push	{r7}
 800829e:	b095      	sub	sp, #84	; 0x54
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ac:	e853 3f00 	ldrex	r3, [r3]
 80082b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c2:	643b      	str	r3, [r7, #64]	; 0x40
 80082c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e6      	bne.n	80082a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	4b1e      	ldr	r3, [pc, #120]	; (8008364 <UART_EndRxTransfer+0xc8>)
 80082ea:	4013      	ands	r3, r2
 80082ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3308      	adds	r3, #8
 80082f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1e5      	bne.n	80082d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800830e:	2b01      	cmp	r3, #1
 8008310:	d118      	bne.n	8008344 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	e853 3f00 	ldrex	r3, [r3]
 800831e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f023 0310 	bic.w	r3, r3, #16
 8008326:	647b      	str	r3, [r7, #68]	; 0x44
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	461a      	mov	r2, r3
 800832e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008330:	61bb      	str	r3, [r7, #24]
 8008332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008334:	6979      	ldr	r1, [r7, #20]
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	e841 2300 	strex	r3, r2, [r1]
 800833c:	613b      	str	r3, [r7, #16]
   return(result);
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e6      	bne.n	8008312 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008358:	bf00      	nop
 800835a:	3754      	adds	r7, #84	; 0x54
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	effffffe 	.word	0xeffffffe

08008368 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008376:	2b01      	cmp	r3, #1
 8008378:	d101      	bne.n	800837e <HAL_UARTEx_DisableFifoMode+0x16>
 800837a:	2302      	movs	r3, #2
 800837c:	e027      	b.n	80083ce <HAL_UARTEx_DisableFifoMode+0x66>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2224      	movs	r2, #36	; 0x24
 800838a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0201 	bic.w	r2, r2, #1
 80083a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d101      	bne.n	80083f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083ee:	2302      	movs	r3, #2
 80083f0:	e02d      	b.n	800844e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2224      	movs	r2, #36	; 0x24
 80083fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0201 	bic.w	r2, r2, #1
 8008418:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f850 	bl	80084d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2220      	movs	r2, #32
 8008440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008466:	2b01      	cmp	r3, #1
 8008468:	d101      	bne.n	800846e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800846a:	2302      	movs	r3, #2
 800846c:	e02d      	b.n	80084ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2224      	movs	r2, #36	; 0x24
 800847a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0201 	bic.w	r2, r2, #1
 8008494:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f812 	bl	80084d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2220      	movs	r2, #32
 80084bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d108      	bne.n	80084f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084f4:	e031      	b.n	800855a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084f6:	2310      	movs	r3, #16
 80084f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084fa:	2310      	movs	r3, #16
 80084fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	0e5b      	lsrs	r3, r3, #25
 8008506:	b2db      	uxtb	r3, r3
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	0f5b      	lsrs	r3, r3, #29
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800851e:	7bbb      	ldrb	r3, [r7, #14]
 8008520:	7b3a      	ldrb	r2, [r7, #12]
 8008522:	4911      	ldr	r1, [pc, #68]	; (8008568 <UARTEx_SetNbDataToProcess+0x94>)
 8008524:	5c8a      	ldrb	r2, [r1, r2]
 8008526:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800852a:	7b3a      	ldrb	r2, [r7, #12]
 800852c:	490f      	ldr	r1, [pc, #60]	; (800856c <UARTEx_SetNbDataToProcess+0x98>)
 800852e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008530:	fb93 f3f2 	sdiv	r3, r3, r2
 8008534:	b29a      	uxth	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	7b7a      	ldrb	r2, [r7, #13]
 8008540:	4909      	ldr	r1, [pc, #36]	; (8008568 <UARTEx_SetNbDataToProcess+0x94>)
 8008542:	5c8a      	ldrb	r2, [r1, r2]
 8008544:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008548:	7b7a      	ldrb	r2, [r7, #13]
 800854a:	4908      	ldr	r1, [pc, #32]	; (800856c <UARTEx_SetNbDataToProcess+0x98>)
 800854c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800854e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008552:	b29a      	uxth	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800855a:	bf00      	nop
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	080163e0 	.word	0x080163e0
 800856c:	080163e8 	.word	0x080163e8

08008570 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008570:	b084      	sub	sp, #16
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	f107 001c 	add.w	r0, r7, #28
 800857e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008586:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008588:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800858a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800858e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008592:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008596:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <SDMMC_Init+0x50>)
 80085a4:	4013      	ands	r3, r2
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	431a      	orrs	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	b004      	add	sp, #16
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	ffc02c00 	.word	0xffc02c00

080085c4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f043 0203 	orr.w	r2, r3, #3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0303 	and.w	r3, r3, #3
}
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
	...

08008640 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800865e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008664:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800866a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	4b06      	ldr	r3, [pc, #24]	; (8008690 <SDMMC_SendCommand+0x50>)
 8008678:	4013      	ands	r3, r2
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	431a      	orrs	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	fffee0c0 	.word	0xfffee0c0

08008694 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	b2db      	uxtb	r3, r3
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b085      	sub	sp, #20
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3314      	adds	r3, #20
 80086bc:	461a      	mov	r2, r3
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	4413      	add	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80086fa:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008700:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008706:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008712:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	431a      	orrs	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800871e:	2300      	movs	r3, #0

}
 8008720:	4618      	mov	r0, r3
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800873a:	2310      	movs	r3, #16
 800873c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800873e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008744:	2300      	movs	r3, #0
 8008746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800874c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800874e:	f107 0308 	add.w	r3, r7, #8
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7ff ff73 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800875a:	f241 3288 	movw	r2, #5000	; 0x1388
 800875e:	2110      	movs	r1, #16
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fa5f 	bl	8008c24 <SDMMC_GetCmdResp1>
 8008766:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008768:	69fb      	ldr	r3, [r7, #28]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3720      	adds	r7, #32
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b088      	sub	sp, #32
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008780:	2311      	movs	r3, #17
 8008782:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800878a:	2300      	movs	r3, #0
 800878c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800878e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008792:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008794:	f107 0308 	add.w	r3, r7, #8
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7ff ff50 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80087a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a4:	2111      	movs	r1, #17
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fa3c 	bl	8008c24 <SDMMC_GetCmdResp1>
 80087ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087ae:	69fb      	ldr	r3, [r7, #28]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3720      	adds	r7, #32
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80087c6:	2312      	movs	r3, #18
 80087c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087da:	f107 0308 	add.w	r3, r7, #8
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff ff2d 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80087e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ea:	2112      	movs	r1, #18
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fa19 	bl	8008c24 <SDMMC_GetCmdResp1>
 80087f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087f4:	69fb      	ldr	r3, [r7, #28]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3720      	adds	r7, #32
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b088      	sub	sp, #32
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800880c:	2318      	movs	r3, #24
 800880e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008816:	2300      	movs	r3, #0
 8008818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800881a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800881e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008820:	f107 0308 	add.w	r3, r7, #8
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff ff0a 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800882c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008830:	2118      	movs	r1, #24
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f9f6 	bl	8008c24 <SDMMC_GetCmdResp1>
 8008838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800883a:	69fb      	ldr	r3, [r7, #28]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008852:	2319      	movs	r3, #25
 8008854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800885a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008864:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008866:	f107 0308 	add.w	r3, r7, #8
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7ff fee7 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008872:	f241 3288 	movw	r2, #5000	; 0x1388
 8008876:	2119      	movs	r1, #25
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f9d3 	bl	8008c24 <SDMMC_GetCmdResp1>
 800887e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008880:	69fb      	ldr	r3, [r7, #28]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3720      	adds	r7, #32
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008898:	230c      	movs	r3, #12
 800889a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800889c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088a2:	2300      	movs	r3, #0
 80088a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088aa:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088c4:	f107 0308 	add.w	r3, r7, #8
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7ff feb8 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80088d0:	4a0b      	ldr	r2, [pc, #44]	; (8008900 <SDMMC_CmdStopTransfer+0x74>)
 80088d2:	210c      	movs	r1, #12
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f9a5 	bl	8008c24 <SDMMC_GetCmdResp1>
 80088da:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ee:	d101      	bne.n	80088f4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80088f4:	69fb      	ldr	r3, [r7, #28]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3720      	adds	r7, #32
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	05f5e100 	.word	0x05f5e100

08008904 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b088      	sub	sp, #32
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008912:	2307      	movs	r3, #7
 8008914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800891a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800891c:	2300      	movs	r3, #0
 800891e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008924:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff fe87 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008932:	f241 3288 	movw	r2, #5000	; 0x1388
 8008936:	2107      	movs	r1, #7
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f973 	bl	8008c24 <SDMMC_GetCmdResp1>
 800893e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008940:	69fb      	ldr	r3, [r7, #28]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3720      	adds	r7, #32
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b088      	sub	sp, #32
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008952:	2300      	movs	r3, #0
 8008954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008956:	2300      	movs	r3, #0
 8008958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800895a:	2300      	movs	r3, #0
 800895c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800895e:	2300      	movs	r3, #0
 8008960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008966:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008968:	f107 0308 	add.w	r3, r7, #8
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff fe66 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fb97 	bl	80090a8 <SDMMC_GetCmdError>
 800897a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800897c:	69fb      	ldr	r3, [r7, #28]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3720      	adds	r7, #32
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b088      	sub	sp, #32
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800898e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008992:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008994:	2308      	movs	r3, #8
 8008996:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800899c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800899e:	2300      	movs	r3, #0
 80089a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089a8:	f107 0308 	add.w	r3, r7, #8
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7ff fe46 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fb29 	bl	800900c <SDMMC_GetCmdResp7>
 80089ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089bc:	69fb      	ldr	r3, [r7, #28]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3720      	adds	r7, #32
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b088      	sub	sp, #32
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80089d4:	2337      	movs	r3, #55	; 0x37
 80089d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089de:	2300      	movs	r3, #0
 80089e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089e8:	f107 0308 	add.w	r3, r7, #8
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff fe26 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80089f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f8:	2137      	movs	r1, #55	; 0x37
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f912 	bl	8008c24 <SDMMC_GetCmdResp1>
 8008a00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a02:	69fb      	ldr	r3, [r7, #28]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3720      	adds	r7, #32
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008a1a:	2329      	movs	r3, #41	; 0x29
 8008a1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a24:	2300      	movs	r3, #0
 8008a26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a2e:	f107 0308 	add.w	r3, r7, #8
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff fe03 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa2e 	bl	8008e9c <SDMMC_GetCmdResp3>
 8008a40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a42:	69fb      	ldr	r3, [r7, #28]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3720      	adds	r7, #32
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008a5a:	2306      	movs	r3, #6
 8008a5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a64:	2300      	movs	r3, #0
 8008a66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a6e:	f107 0308 	add.w	r3, r7, #8
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7ff fde3 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a7e:	2106      	movs	r1, #6
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f8cf 	bl	8008c24 <SDMMC_GetCmdResp1>
 8008a86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a88:	69fb      	ldr	r3, [r7, #28]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3720      	adds	r7, #32
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b088      	sub	sp, #32
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008a9e:	2333      	movs	r3, #51	; 0x33
 8008aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ab0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ab2:	f107 0308 	add.w	r3, r7, #8
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff fdc1 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac2:	2133      	movs	r1, #51	; 0x33
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f8ad 	bl	8008c24 <SDMMC_GetCmdResp1>
 8008aca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008acc:	69fb      	ldr	r3, [r7, #28]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3720      	adds	r7, #32
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b088      	sub	sp, #32
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008ae6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008aea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008aec:	2300      	movs	r3, #0
 8008aee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008af4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008af6:	f107 0308 	add.w	r3, r7, #8
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff fd9f 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f980 	bl	8008e08 <SDMMC_GetCmdResp2>
 8008b08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3720      	adds	r7, #32
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008b22:	2309      	movs	r3, #9
 8008b24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008b26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008b2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b36:	f107 0308 	add.w	r3, r7, #8
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff fd7f 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f960 	bl	8008e08 <SDMMC_GetCmdResp2>
 8008b48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b4a:	69fb      	ldr	r3, [r7, #28]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3720      	adds	r7, #32
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b088      	sub	sp, #32
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008b62:	2303      	movs	r3, #3
 8008b64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b76:	f107 0308 	add.w	r3, r7, #8
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff fd5f 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	2103      	movs	r1, #3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f9c8 	bl	8008f1c <SDMMC_GetCmdResp6>
 8008b8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b8e:	69fb      	ldr	r3, [r7, #28]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3720      	adds	r7, #32
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b088      	sub	sp, #32
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008ba6:	230d      	movs	r3, #13
 8008ba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bba:	f107 0308 	add.w	r3, r7, #8
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff fd3d 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bca:	210d      	movs	r1, #13
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f829 	bl	8008c24 <SDMMC_GetCmdResp1>
 8008bd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3720      	adds	r7, #32
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b088      	sub	sp, #32
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008be6:	2300      	movs	r3, #0
 8008be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008bea:	230d      	movs	r3, #13
 8008bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bfe:	f107 0308 	add.w	r3, r7, #8
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff fd1b 	bl	8008640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c0e:	210d      	movs	r1, #13
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f807 	bl	8008c24 <SDMMC_GetCmdResp1>
 8008c16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c18:	69fb      	ldr	r3, [r7, #28]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3720      	adds	r7, #32
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b088      	sub	sp, #32
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	607a      	str	r2, [r7, #4]
 8008c30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008c32:	4b70      	ldr	r3, [pc, #448]	; (8008df4 <SDMMC_GetCmdResp1+0x1d0>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a70      	ldr	r2, [pc, #448]	; (8008df8 <SDMMC_GetCmdResp1+0x1d4>)
 8008c38:	fba2 2303 	umull	r2, r3, r2, r3
 8008c3c:	0a5a      	lsrs	r2, r3, #9
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	fb02 f303 	mul.w	r3, r2, r3
 8008c44:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	1e5a      	subs	r2, r3, #1
 8008c4a:	61fa      	str	r2, [r7, #28]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d102      	bne.n	8008c56 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c54:	e0c9      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	4b67      	ldr	r3, [pc, #412]	; (8008dfc <SDMMC_GetCmdResp1+0x1d8>)
 8008c60:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0ef      	beq.n	8008c46 <SDMMC_GetCmdResp1+0x22>
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1ea      	bne.n	8008c46 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2204      	movs	r2, #4
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c82:	2304      	movs	r3, #4
 8008c84:	e0b1      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d004      	beq.n	8008c9c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2201      	movs	r2, #1
 8008c96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e0a6      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4a58      	ldr	r2, [pc, #352]	; (8008e00 <SDMMC_GetCmdResp1+0x1dc>)
 8008ca0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f7ff fcf6 	bl	8008694 <SDMMC_GetCommandResponse>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	461a      	mov	r2, r3
 8008cac:	7afb      	ldrb	r3, [r7, #11]
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d001      	beq.n	8008cb6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e099      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f7ff fcf8 	bl	80086ae <SDMMC_GetResponse>
 8008cbe:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	4b50      	ldr	r3, [pc, #320]	; (8008e04 <SDMMC_GetCmdResp1+0x1e0>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d101      	bne.n	8008cce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e08d      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	da02      	bge.n	8008cda <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cd8:	e087      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008ce4:	2340      	movs	r3, #64	; 0x40
 8008ce6:	e080      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008cf2:	2380      	movs	r3, #128	; 0x80
 8008cf4:	e079      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d04:	e071      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d14:	e069      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d24:	e061      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d002      	beq.n	8008d36 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008d30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d34:	e059      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d44:	e051      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d54:	e049      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008d60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d64:	e041      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008d70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d74:	e039      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d84:	e031      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008d90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d94:	e029      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008da0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008da4:	e021      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008db0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008db4:	e019      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008dc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008dc4:	e011      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008dd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008dd4:	e009      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f003 0308 	and.w	r3, r3, #8
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008de0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008de4:	e001      	b.n	8008dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3720      	adds	r7, #32
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	24000000 	.word	0x24000000
 8008df8:	10624dd3 	.word	0x10624dd3
 8008dfc:	00200045 	.word	0x00200045
 8008e00:	002000c5 	.word	0x002000c5
 8008e04:	fdffe008 	.word	0xfdffe008

08008e08 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008e10:	4b1f      	ldr	r3, [pc, #124]	; (8008e90 <SDMMC_GetCmdResp2+0x88>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a1f      	ldr	r2, [pc, #124]	; (8008e94 <SDMMC_GetCmdResp2+0x8c>)
 8008e16:	fba2 2303 	umull	r2, r3, r2, r3
 8008e1a:	0a5b      	lsrs	r3, r3, #9
 8008e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e20:	fb02 f303 	mul.w	r3, r2, r3
 8008e24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	1e5a      	subs	r2, r3, #1
 8008e2a:	60fa      	str	r2, [r7, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e34:	e026      	b.n	8008e84 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0ef      	beq.n	8008e26 <SDMMC_GetCmdResp2+0x1e>
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1ea      	bne.n	8008e26 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d004      	beq.n	8008e66 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2204      	movs	r2, #4
 8008e60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e62:	2304      	movs	r3, #4
 8008e64:	e00e      	b.n	8008e84 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d004      	beq.n	8008e7c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e003      	b.n	8008e84 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a06      	ldr	r2, [pc, #24]	; (8008e98 <SDMMC_GetCmdResp2+0x90>)
 8008e80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	24000000 	.word	0x24000000
 8008e94:	10624dd3 	.word	0x10624dd3
 8008e98:	002000c5 	.word	0x002000c5

08008e9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008ea4:	4b1a      	ldr	r3, [pc, #104]	; (8008f10 <SDMMC_GetCmdResp3+0x74>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a1a      	ldr	r2, [pc, #104]	; (8008f14 <SDMMC_GetCmdResp3+0x78>)
 8008eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8008eae:	0a5b      	lsrs	r3, r3, #9
 8008eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eb4:	fb02 f303 	mul.w	r3, r2, r3
 8008eb8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	1e5a      	subs	r2, r3, #1
 8008ebe:	60fa      	str	r2, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d102      	bne.n	8008eca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ec4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ec8:	e01b      	b.n	8008f02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ece:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0ef      	beq.n	8008eba <SDMMC_GetCmdResp3+0x1e>
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1ea      	bne.n	8008eba <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee8:	f003 0304 	and.w	r3, r3, #4
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d004      	beq.n	8008efa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2204      	movs	r2, #4
 8008ef4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ef6:	2304      	movs	r3, #4
 8008ef8:	e003      	b.n	8008f02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a06      	ldr	r2, [pc, #24]	; (8008f18 <SDMMC_GetCmdResp3+0x7c>)
 8008efe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	24000000 	.word	0x24000000
 8008f14:	10624dd3 	.word	0x10624dd3
 8008f18:	002000c5 	.word	0x002000c5

08008f1c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b088      	sub	sp, #32
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	460b      	mov	r3, r1
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008f2a:	4b35      	ldr	r3, [pc, #212]	; (8009000 <SDMMC_GetCmdResp6+0xe4>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a35      	ldr	r2, [pc, #212]	; (8009004 <SDMMC_GetCmdResp6+0xe8>)
 8008f30:	fba2 2303 	umull	r2, r3, r2, r3
 8008f34:	0a5b      	lsrs	r3, r3, #9
 8008f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f3a:	fb02 f303 	mul.w	r3, r2, r3
 8008f3e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	1e5a      	subs	r2, r3, #1
 8008f44:	61fa      	str	r2, [r7, #28]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d102      	bne.n	8008f50 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f4e:	e052      	b.n	8008ff6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f54:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0ef      	beq.n	8008f40 <SDMMC_GetCmdResp6+0x24>
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1ea      	bne.n	8008f40 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d004      	beq.n	8008f80 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2204      	movs	r2, #4
 8008f7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f7c:	2304      	movs	r3, #4
 8008f7e:	e03a      	b.n	8008ff6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d004      	beq.n	8008f96 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e02f      	b.n	8008ff6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff fb7c 	bl	8008694 <SDMMC_GetCommandResponse>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	7afb      	ldrb	r3, [r7, #11]
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d001      	beq.n	8008faa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e025      	b.n	8008ff6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	4a16      	ldr	r2, [pc, #88]	; (8009008 <SDMMC_GetCmdResp6+0xec>)
 8008fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7ff fb7b 	bl	80086ae <SDMMC_GetResponse>
 8008fb8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d106      	bne.n	8008fd2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	0c1b      	lsrs	r3, r3, #16
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e011      	b.n	8008ff6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008fe0:	e009      	b.n	8008ff6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ff0:	e001      	b.n	8008ff6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3720      	adds	r7, #32
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	24000000 	.word	0x24000000
 8009004:	10624dd3 	.word	0x10624dd3
 8009008:	002000c5 	.word	0x002000c5

0800900c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009014:	4b22      	ldr	r3, [pc, #136]	; (80090a0 <SDMMC_GetCmdResp7+0x94>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a22      	ldr	r2, [pc, #136]	; (80090a4 <SDMMC_GetCmdResp7+0x98>)
 800901a:	fba2 2303 	umull	r2, r3, r2, r3
 800901e:	0a5b      	lsrs	r3, r3, #9
 8009020:	f241 3288 	movw	r2, #5000	; 0x1388
 8009024:	fb02 f303 	mul.w	r3, r2, r3
 8009028:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	1e5a      	subs	r2, r3, #1
 800902e:	60fa      	str	r2, [r7, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009034:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009038:	e02c      	b.n	8009094 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0ef      	beq.n	800902a <SDMMC_GetCmdResp7+0x1e>
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1ea      	bne.n	800902a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009058:	f003 0304 	and.w	r3, r3, #4
 800905c:	2b00      	cmp	r3, #0
 800905e:	d004      	beq.n	800906a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2204      	movs	r2, #4
 8009064:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009066:	2304      	movs	r3, #4
 8009068:	e014      	b.n	8009094 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d004      	beq.n	8009080 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800907c:	2301      	movs	r3, #1
 800907e:	e009      	b.n	8009094 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2240      	movs	r2, #64	; 0x40
 8009090:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009092:	2300      	movs	r3, #0

}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	24000000 	.word	0x24000000
 80090a4:	10624dd3 	.word	0x10624dd3

080090a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80090b0:	4b11      	ldr	r3, [pc, #68]	; (80090f8 <SDMMC_GetCmdError+0x50>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a11      	ldr	r2, [pc, #68]	; (80090fc <SDMMC_GetCmdError+0x54>)
 80090b6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ba:	0a5b      	lsrs	r3, r3, #9
 80090bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c0:	fb02 f303 	mul.w	r3, r2, r3
 80090c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	1e5a      	subs	r2, r3, #1
 80090ca:	60fa      	str	r2, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d102      	bne.n	80090d6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090d4:	e009      	b.n	80090ea <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0f1      	beq.n	80090c6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a06      	ldr	r2, [pc, #24]	; (8009100 <SDMMC_GetCmdError+0x58>)
 80090e6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	24000000 	.word	0x24000000
 80090fc:	10624dd3 	.word	0x10624dd3
 8009100:	002000c5 	.word	0x002000c5

08009104 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08e      	sub	sp, #56	; 0x38
 8009108:	af08      	add	r7, sp, #32
 800910a:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 800910c:	2300      	movs	r3, #0
 800910e:	617b      	str	r3, [r7, #20]

  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	613b      	str	r3, [r7, #16]
  /* USER CODE BEGIN 0 */

  /* USER CODE END 0 */

  /*Allocate memory for the main thread's stack*/
  ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 8009114:	f107 010c 	add.w	r1, r7, #12
 8009118:	2300      	movs	r3, #0
 800911a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800911e:	6938      	ldr	r0, [r7, #16]
 8009120:	f00c fc08 	bl	8015934 <_txe_byte_allocate>
 8009124:	6178      	str	r0, [r7, #20]

  /* Check FX_APP_THREAD_STACK_SIZE allocation*/
  if (ret != FX_SUCCESS)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <MX_FileX_Init+0x2c>
  {
    return TX_POOL_ERROR;
 800912c:	2302      	movs	r3, #2
 800912e:	e027      	b.n	8009180 <MX_FileX_Init+0x7c>
  }

  /* Create the main thread.  */
  ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	22b0      	movs	r2, #176	; 0xb0
 8009134:	9206      	str	r2, [sp, #24]
 8009136:	2201      	movs	r2, #1
 8009138:	9205      	str	r2, [sp, #20]
 800913a:	2200      	movs	r2, #0
 800913c:	9204      	str	r2, [sp, #16]
 800913e:	220a      	movs	r2, #10
 8009140:	9203      	str	r2, [sp, #12]
 8009142:	220a      	movs	r2, #10
 8009144:	9202      	str	r2, [sp, #8]
 8009146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800914a:	9201      	str	r2, [sp, #4]
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	2300      	movs	r3, #0
 8009150:	4a0d      	ldr	r2, [pc, #52]	; (8009188 <MX_FileX_Init+0x84>)
 8009152:	490e      	ldr	r1, [pc, #56]	; (800918c <MX_FileX_Init+0x88>)
 8009154:	480e      	ldr	r0, [pc, #56]	; (8009190 <MX_FileX_Init+0x8c>)
 8009156:	f00c ff79 	bl	801604c <_txe_thread_create>
 800915a:	6178      	str	r0, [r7, #20]
                         FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

  /* Check main thread creation */
  if (ret != FX_SUCCESS)
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <MX_FileX_Init+0x62>
  {
    return TX_THREAD_ERROR;
 8009162:	230e      	movs	r3, #14
 8009164:	e00c      	b.n	8009180 <MX_FileX_Init+0x7c>
  }
  /* USER CODE BEGIN MX_FileX_Init */
  /* Create the message queue */
    tx_queue_create(&tx_msg_queue, "sd_event_queue", 1, pointer, DEFAULT_QUEUE_LENGTH * sizeof(ULONG));
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2238      	movs	r2, #56	; 0x38
 800916a:	9201      	str	r2, [sp, #4]
 800916c:	2240      	movs	r2, #64	; 0x40
 800916e:	9200      	str	r2, [sp, #0]
 8009170:	2201      	movs	r2, #1
 8009172:	4908      	ldr	r1, [pc, #32]	; (8009194 <MX_FileX_Init+0x90>)
 8009174:	4808      	ldr	r0, [pc, #32]	; (8009198 <MX_FileX_Init+0x94>)
 8009176:	f00c fcf1 	bl	8015b5c <_txe_queue_create>

  /* USER CODE END MX_FileX_Init */

  /* Initialize FileX.  */
  fx_system_initialize();
 800917a:	f006 fc85 	bl	800fa88 <_fx_system_initialize>

  /* USER CODE BEGIN MX_FileX_Init 1*/

  /* USER CODE END MX_FileX_Init 1*/

  return ret;
 800917e:	697b      	ldr	r3, [r7, #20]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	0800919d 	.word	0x0800919d
 800918c:	080162e4 	.word	0x080162e4
 8009190:	24012264 	.word	0x24012264
 8009194:	080162f8 	.word	0x080162f8
 8009198:	24014bb8 	.word	0x24014bb8

0800919c <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
 */
void fx_app_thread_entry(ULONG thread_input)
{
 800919c:	b5b0      	push	{r4, r5, r7, lr}
 800919e:	b09c      	sub	sp, #112	; 0x70
 80091a0:	af04      	add	r7, sp, #16
 80091a2:	6078      	str	r0, [r7, #4]
  UINT sd_status = FX_SUCCESS;
 80091a4:	2300      	movs	r3, #0
 80091a6:	65bb      	str	r3, [r7, #88]	; 0x58
  /* USER CODE BEGIN fx_app_thread_entry 0 */
  ULONG r_msg;
  ULONG s_msg = CARD_STATUS_CHANGED;
 80091a8:	2363      	movs	r3, #99	; 0x63
 80091aa:	653b      	str	r3, [r7, #80]	; 0x50
  ULONG last_status = CARD_STATUS_DISCONNECTED;
 80091ac:	2358      	movs	r3, #88	; 0x58
 80091ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  ULONG bytes_read;
  CHAR read_buffer[32];
  CHAR data[] = "This is FileX working on STM32";
 80091b0:	4b78      	ldr	r3, [pc, #480]	; (8009394 <fx_app_thread_entry+0x1f8>)
 80091b2:	f107 040c 	add.w	r4, r7, #12
 80091b6:	461d      	mov	r5, r3
 80091b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80091c0:	c407      	stmia	r4!, {r0, r1, r2}
 80091c2:	8023      	strh	r3, [r4, #0]
 80091c4:	3402      	adds	r4, #2
 80091c6:	0c1b      	lsrs	r3, r3, #16
 80091c8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END fx_app_thread_entry 0 */

  /* Open the SD disk driver */
  sd_status =  fx_media_open(&sdio_disk, FX_SD_VOLUME_NAME, fx_stm32_sd_driver, (VOID *)FX_NULL, (VOID *) fx_sd_media_memory, sizeof(fx_sd_media_memory));
 80091ca:	f242 43b8 	movw	r3, #9400	; 0x24b8
 80091ce:	9302      	str	r3, [sp, #8]
 80091d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	4b70      	ldr	r3, [pc, #448]	; (8009398 <fx_app_thread_entry+0x1fc>)
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	2300      	movs	r3, #0
 80091dc:	4a6f      	ldr	r2, [pc, #444]	; (800939c <fx_app_thread_entry+0x200>)
 80091de:	4970      	ldr	r1, [pc, #448]	; (80093a0 <fx_app_thread_entry+0x204>)
 80091e0:	4870      	ldr	r0, [pc, #448]	; (80093a4 <fx_app_thread_entry+0x208>)
 80091e2:	f009 f853 	bl	801228c <_fxe_media_open>
 80091e6:	65b8      	str	r0, [r7, #88]	; 0x58

  /* Check the media open sd_status */
  if (sd_status != FX_SUCCESS)
 80091e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d000      	beq.n	80091f0 <fx_app_thread_entry+0x54>
  {
    /* USER CODE BEGIN SD open error */
    while(1);
 80091ee:	e7fe      	b.n	80091ee <fx_app_thread_entry+0x52>
    /* USER CODE END SD open error */
  }

  /* USER CODE BEGIN fx_app_thread_entry 1 */
  if(SD_IsDetected(FX_STM32_SD_INSTANCE) == SD_PRESENT)
 80091f0:	2000      	movs	r0, #0
 80091f2:	f000 f8e1 	bl	80093b8 <SD_IsDetected>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d107      	bne.n	800920c <fx_app_thread_entry+0x70>
  {
    /* SD card is already inserted, place the info into the queue */
    tx_queue_send(&tx_msg_queue, &s_msg, TX_NO_WAIT);
 80091fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009200:	2200      	movs	r2, #0
 8009202:	4619      	mov	r1, r3
 8009204:	4868      	ldr	r0, [pc, #416]	; (80093a8 <fx_app_thread_entry+0x20c>)
 8009206:	f00c fda3 	bl	8015d50 <_txe_queue_send>
 800920a:	e00e      	b.n	800922a <fx_app_thread_entry+0x8e>
  }
  else
  {
    /* Indicate that SD card is not inserted from start */
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800920c:	2200      	movs	r2, #0
 800920e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009212:	4866      	ldr	r0, [pc, #408]	; (80093ac <fx_app_thread_entry+0x210>)
 8009214:	f7f8 fb1e 	bl	8001854 <HAL_GPIO_WritePin>

    /* We wait here for a valid SD card insertion event, if it is not inserted already */
    while(1)
    {

      while(tx_queue_receive(&tx_msg_queue, &r_msg, TX_TIMER_TICKS_PER_SECOND / 2) != TX_SUCCESS)
 8009218:	e007      	b.n	800922a <fx_app_thread_entry+0x8e>
      {
        /* Toggle GREEN LED to indicate idle state after a successful operation */
        if(last_status == CARD_STATUS_CONNECTED)
 800921a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800921c:	2b4d      	cmp	r3, #77	; 0x4d
 800921e:	d104      	bne.n	800922a <fx_app_thread_entry+0x8e>
        {
          HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009224:	4861      	ldr	r0, [pc, #388]	; (80093ac <fx_app_thread_entry+0x210>)
 8009226:	f7f8 fb2e 	bl	8001886 <HAL_GPIO_TogglePin>
      while(tx_queue_receive(&tx_msg_queue, &r_msg, TX_TIMER_TICKS_PER_SECOND / 2) != TX_SUCCESS)
 800922a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800922e:	2232      	movs	r2, #50	; 0x32
 8009230:	4619      	mov	r1, r3
 8009232:	485d      	ldr	r0, [pc, #372]	; (80093a8 <fx_app_thread_entry+0x20c>)
 8009234:	f00c fd42 	bl	8015cbc <_txe_queue_receive>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1ed      	bne.n	800921a <fx_app_thread_entry+0x7e>
        }
      }

      /* check if we received the correct event message */
      if(r_msg == CARD_STATUS_CHANGED)
 800923e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009240:	2b63      	cmp	r3, #99	; 0x63
 8009242:	d1f2      	bne.n	800922a <fx_app_thread_entry+0x8e>
      {
        /* reset the status */
        r_msg = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	657b      	str	r3, [r7, #84]	; 0x54

        /* for debouncing purpose we wait a bit till it settles down */
        tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 2);
 8009248:	2032      	movs	r0, #50	; 0x32
 800924a:	f00b fd5b 	bl	8014d04 <_tx_thread_sleep>

        if(SD_IsDetected(FX_STM32_SD_INSTANCE) == SD_PRESENT)
 800924e:	2000      	movs	r0, #0
 8009250:	f000 f8b2 	bl	80093b8 <SD_IsDetected>
 8009254:	4603      	mov	r3, r0
 8009256:	2b01      	cmp	r3, #1
 8009258:	d111      	bne.n	800927e <fx_app_thread_entry+0xe2>
        {
          /* We have a valid SD insertion event, start processing.. */
          /* Update last known status */
          last_status = CARD_STATUS_CONNECTED;
 800925a:	234d      	movs	r3, #77	; 0x4d
 800925c:	65fb      	str	r3, [r7, #92]	; 0x5c
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /*LED_RED Off*/
 800925e:	2201      	movs	r2, #1
 8009260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009264:	4851      	ldr	r0, [pc, #324]	; (80093ac <fx_app_thread_entry+0x210>)
 8009266:	f7f8 faf5 	bl	8001854 <HAL_GPIO_WritePin>
          break;
 800926a:	bf00      	nop
        }
      }
    }

    /* Create a file called STM32.TXT in the root directory.  */
    sd_status =  fx_file_create(&sdio_disk, "STM32.TXT");
 800926c:	4950      	ldr	r1, [pc, #320]	; (80093b0 <fx_app_thread_entry+0x214>)
 800926e:	484d      	ldr	r0, [pc, #308]	; (80093a4 <fx_app_thread_entry+0x208>)
 8009270:	f008 fe6a 	bl	8011f48 <_fxe_file_create>
 8009274:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the create status.  */
    if (sd_status != FX_SUCCESS)
 8009276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009278:	2b00      	cmp	r3, #0
 800927a:	d014      	beq.n	80092a6 <fx_app_thread_entry+0x10a>
 800927c:	e00e      	b.n	800929c <fx_app_thread_entry+0x100>
          last_status = CARD_STATUS_DISCONNECTED;
 800927e:	2358      	movs	r3, #88	; 0x58
 8009280:	65fb      	str	r3, [r7, #92]	; 0x5c
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);  /*LED_GREEN Off*/
 8009282:	2201      	movs	r2, #1
 8009284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009288:	4848      	ldr	r0, [pc, #288]	; (80093ac <fx_app_thread_entry+0x210>)
 800928a:	f7f8 fae3 	bl	8001854 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /*LED_GREEN On*/
 800928e:	2200      	movs	r2, #0
 8009290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009294:	4845      	ldr	r0, [pc, #276]	; (80093ac <fx_app_thread_entry+0x210>)
 8009296:	f7f8 fadd 	bl	8001854 <HAL_GPIO_WritePin>
      while(tx_queue_receive(&tx_msg_queue, &r_msg, TX_TIMER_TICKS_PER_SECOND / 2) != TX_SUCCESS)
 800929a:	e7c6      	b.n	800922a <fx_app_thread_entry+0x8e>
    {
      /* Check for an already created status. This is expected on the
      second pass of this loop!  */
      if (sd_status != FX_ALREADY_CREATED)
 800929c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800929e:	2b0b      	cmp	r3, #11
 80092a0:	d001      	beq.n	80092a6 <fx_app_thread_entry+0x10a>
      {
        /* Create error, call error handler.  */
        Error_Handler();
 80092a2:	f7f7 fdbb 	bl	8000e1c <Error_Handler>
      }
    }

    /* Open the test file.  */
    sd_status =  fx_file_open(&sdio_disk, &fx_file, "STM32.TXT", FX_OPEN_FOR_WRITE);
 80092a6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	2301      	movs	r3, #1
 80092ae:	4a40      	ldr	r2, [pc, #256]	; (80093b0 <fx_app_thread_entry+0x214>)
 80092b0:	4940      	ldr	r1, [pc, #256]	; (80093b4 <fx_app_thread_entry+0x218>)
 80092b2:	483c      	ldr	r0, [pc, #240]	; (80093a4 <fx_app_thread_entry+0x208>)
 80092b4:	f008 fe76 	bl	8011fa4 <_fxe_file_open>
 80092b8:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file open status.  */
    if (sd_status != FX_SUCCESS)
 80092ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <fx_app_thread_entry+0x128>
    {
      /* Error opening file, call error handler.  */
      Error_Handler();
 80092c0:	f7f7 fdac 	bl	8000e1c <Error_Handler>
    }

    /* Seek to the beginning of the test file.  */
    sd_status =  fx_file_seek(&fx_file, 0);
 80092c4:	2100      	movs	r1, #0
 80092c6:	483b      	ldr	r0, [pc, #236]	; (80093b4 <fx_app_thread_entry+0x218>)
 80092c8:	f008 ff26 	bl	8012118 <_fxe_file_seek>
 80092cc:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file seek status.  */
    if (sd_status != FX_SUCCESS)
 80092ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <fx_app_thread_entry+0x13c>
    {
      /* Error performing file seek, call error handler.  */
      Error_Handler();
 80092d4:	f7f7 fda2 	bl	8000e1c <Error_Handler>
    }

    /* Write a string to the test file.  */
    sd_status =  fx_file_write(&fx_file, data, sizeof(data));
 80092d8:	f107 030c 	add.w	r3, r7, #12
 80092dc:	221f      	movs	r2, #31
 80092de:	4619      	mov	r1, r3
 80092e0:	4834      	ldr	r0, [pc, #208]	; (80093b4 <fx_app_thread_entry+0x218>)
 80092e2:	f008 ff47 	bl	8012174 <_fxe_file_write>
 80092e6:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file write status.  */
    if (sd_status != FX_SUCCESS)
 80092e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <fx_app_thread_entry+0x156>
    {
      /* Error writing to a file, call error handler.  */
      Error_Handler();
 80092ee:	f7f7 fd95 	bl	8000e1c <Error_Handler>
    }

    /* Close the test file.  */
    sd_status =  fx_file_close(&fx_file);
 80092f2:	4830      	ldr	r0, [pc, #192]	; (80093b4 <fx_app_thread_entry+0x218>)
 80092f4:	f008 fdfc 	bl	8011ef0 <_fxe_file_close>
 80092f8:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file close status.  */
    if (sd_status != FX_SUCCESS)
 80092fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <fx_app_thread_entry+0x168>
    {
      /* Error closing the file, call error handler.  */
      Error_Handler();
 8009300:	f7f7 fd8c 	bl	8000e1c <Error_Handler>
    }

    sd_status = fx_media_flush(&sdio_disk);
 8009304:	4827      	ldr	r0, [pc, #156]	; (80093a4 <fx_app_thread_entry+0x208>)
 8009306:	f008 ff95 	bl	8012234 <_fxe_media_flush>
 800930a:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the media flush  status.  */
    if (sd_status != FX_SUCCESS)
 800930c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <fx_app_thread_entry+0x17a>
    {
      /* Error closing the file, call error handler.  */
      Error_Handler();
 8009312:	f7f7 fd83 	bl	8000e1c <Error_Handler>
    }

    /* Open the test file.  */
    sd_status =  fx_file_open(&sdio_disk, &fx_file, "STM32.TXT", FX_OPEN_FOR_READ);
 8009316:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	2300      	movs	r3, #0
 800931e:	4a24      	ldr	r2, [pc, #144]	; (80093b0 <fx_app_thread_entry+0x214>)
 8009320:	4924      	ldr	r1, [pc, #144]	; (80093b4 <fx_app_thread_entry+0x218>)
 8009322:	4820      	ldr	r0, [pc, #128]	; (80093a4 <fx_app_thread_entry+0x208>)
 8009324:	f008 fe3e 	bl	8011fa4 <_fxe_file_open>
 8009328:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file open status.  */
    if (sd_status != FX_SUCCESS)
 800932a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <fx_app_thread_entry+0x198>
    {
      /* Error opening file, call error handler.  */
      Error_Handler();
 8009330:	f7f7 fd74 	bl	8000e1c <Error_Handler>
    }

    /* Seek to the beginning of the test file.  */
    sd_status =  fx_file_seek(&fx_file, 0);
 8009334:	2100      	movs	r1, #0
 8009336:	481f      	ldr	r0, [pc, #124]	; (80093b4 <fx_app_thread_entry+0x218>)
 8009338:	f008 feee 	bl	8012118 <_fxe_file_seek>
 800933c:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file seek status.  */
    if (sd_status != FX_SUCCESS)
 800933e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <fx_app_thread_entry+0x1ac>
    {
      /* Error performing file seek, call error handler.  */
      Error_Handler();
 8009344:	f7f7 fd6a 	bl	8000e1c <Error_Handler>
    }

    /* Read the first 28 bytes of the test file.  */
    sd_status =  fx_file_read(&fx_file, read_buffer, sizeof(data), &bytes_read);
 8009348:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800934c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8009350:	221f      	movs	r2, #31
 8009352:	4818      	ldr	r0, [pc, #96]	; (80093b4 <fx_app_thread_entry+0x218>)
 8009354:	f008 fea8 	bl	80120a8 <_fxe_file_read>
 8009358:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file read status.  */
    if ((sd_status != FX_SUCCESS) || (bytes_read != sizeof(data)))
 800935a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800935c:	2b00      	cmp	r3, #0
 800935e:	d102      	bne.n	8009366 <fx_app_thread_entry+0x1ca>
 8009360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009362:	2b1f      	cmp	r3, #31
 8009364:	d001      	beq.n	800936a <fx_app_thread_entry+0x1ce>
    {
      /* Error reading file, call error handler.  */
      Error_Handler();
 8009366:	f7f7 fd59 	bl	8000e1c <Error_Handler>
    }

    /* Close the test file.  */
    sd_status =  fx_file_close(&fx_file);
 800936a:	4812      	ldr	r0, [pc, #72]	; (80093b4 <fx_app_thread_entry+0x218>)
 800936c:	f008 fdc0 	bl	8011ef0 <_fxe_file_close>
 8009370:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file close status.  */
    if (sd_status != FX_SUCCESS)
 8009372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <fx_app_thread_entry+0x1e0>
    {
      /* Error closing the file, call error handler.  */
      Error_Handler();
 8009378:	f7f7 fd50 	bl	8000e1c <Error_Handler>
    }

    /* Close the media.  */
    sd_status =  fx_media_close(&sdio_disk);
 800937c:	4809      	ldr	r0, [pc, #36]	; (80093a4 <fx_app_thread_entry+0x208>)
 800937e:	f008 ff2d 	bl	80121dc <_fxe_media_close>
 8009382:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the media close status.  */
    if (sd_status != FX_SUCCESS)
 8009384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009386:	2b00      	cmp	r3, #0
 8009388:	f43f af46 	beq.w	8009218 <fx_app_thread_entry+0x7c>
    {
      /* Error closing the media, call error handler.  */
      Error_Handler();
 800938c:	f7f7 fd46 	bl	8000e1c <Error_Handler>
  for( ;; )
 8009390:	e742      	b.n	8009218 <fx_app_thread_entry+0x7c>
 8009392:	bf00      	nop
 8009394:	08016324 	.word	0x08016324
 8009398:	24012320 	.word	0x24012320
 800939c:	08012401 	.word	0x08012401
 80093a0:	08016308 	.word	0x08016308
 80093a4:	24012520 	.word	0x24012520
 80093a8:	24014bb8 	.word	0x24014bb8
 80093ac:	58022000 	.word	0x58022000
 80093b0:	08016318 	.word	0x08016318
 80093b4:	240149d8 	.word	0x240149d8

080093b8 <SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t SD_IsDetected(uint32_t Instance)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  int32_t ret;
  if(Instance >= 1)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <SD_IsDetected+0x14>
  {
    ret = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	e00c      	b.n	80093e6 <SD_IsDetected+0x2e>
  }
  else
  {
    /* Check SD card detect pin */
    if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_SET)
 80093cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80093d0:	4807      	ldr	r0, [pc, #28]	; (80093f0 <SD_IsDetected+0x38>)
 80093d2:	f7f8 fa27 	bl	8001824 <HAL_GPIO_ReadPin>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d102      	bne.n	80093e2 <SD_IsDetected+0x2a>
    {
      ret = SD_NOT_PRESENT;
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	e001      	b.n	80093e6 <SD_IsDetected+0x2e>
    }
    else
    {
      ret = SD_PRESENT;
 80093e2:	2301      	movs	r3, #1
 80093e4:	60fb      	str	r3, [r7, #12]
    }
  }

  return(int32_t)ret;
 80093e6:	68fb      	ldr	r3, [r7, #12]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	58022000 	.word	0x58022000

080093f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	4603      	mov	r3, r0
 80093fc:	80fb      	strh	r3, [r7, #6]
  ULONG s_msg = CARD_STATUS_CHANGED;
 80093fe:	2363      	movs	r3, #99	; 0x63
 8009400:	60fb      	str	r3, [r7, #12]

  if(GPIO_Pin == SD_DETECT_Pin)
 8009402:	88fb      	ldrh	r3, [r7, #6]
 8009404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009408:	d106      	bne.n	8009418 <HAL_GPIO_EXTI_Callback+0x24>
  {
    tx_queue_send(&tx_msg_queue, &s_msg, TX_NO_WAIT);
 800940a:	f107 030c 	add.w	r3, r7, #12
 800940e:	2200      	movs	r2, #0
 8009410:	4619      	mov	r1, r3
 8009412:	4803      	ldr	r0, [pc, #12]	; (8009420 <HAL_GPIO_EXTI_Callback+0x2c>)
 8009414:	f00c fc9c 	bl	8015d50 <_txe_queue_send>
  }
}
 8009418:	bf00      	nop
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	24014bb8 	.word	0x24014bb8

08009424 <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER)
 8009430:	4806      	ldr	r0, [pc, #24]	; (800944c <fx_stm32_sd_get_status+0x28>)
 8009432:	f7fd f85b 	bl	80064ec <HAL_SD_GetCardState>
 8009436:	4603      	mov	r3, r0
 8009438:	2b04      	cmp	r3, #4
 800943a:	d001      	beq.n	8009440 <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 800943c:	2301      	movs	r3, #1
 800943e:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 8009440:	68fb      	ldr	r3, [r7, #12]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	24012104 	.word	0x24012104

08009450 <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
 800945c:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_READ_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_READ_BLOCKS */

  if(HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	4806      	ldr	r0, [pc, #24]	; (8009484 <fx_stm32_sd_read_blocks+0x34>)
 800946a:	f7fc f9b9 	bl	80057e0 <HAL_SD_ReadBlocks_DMA>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <fx_stm32_sd_read_blocks+0x28>
  {
    ret = 1;
 8009474:	2301      	movs	r3, #1
 8009476:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 8009478:	697b      	ldr	r3, [r7, #20]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3718      	adds	r7, #24
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	24012104 	.word	0x24012104

08009488 <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_WRITE_BLOCKS */

  if(HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	4806      	ldr	r0, [pc, #24]	; (80094bc <fx_stm32_sd_write_blocks+0x34>)
 80094a2:	f7fc fa45 	bl	8005930 <HAL_SD_WriteBlocks_DMA>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <fx_stm32_sd_write_blocks+0x28>
  {
    ret = 1;
 80094ac:	2301      	movs	r3, #1
 80094ae:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 80094b0:	697b      	ldr	r3, [r7, #20]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	24012104 	.word	0x24012104

080094c0 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&sd_tx_semaphore);
 80094c8:	4803      	ldr	r0, [pc, #12]	; (80094d8 <HAL_SD_TxCpltCallback+0x18>)
 80094ca:	f00c fda1 	bl	8016010 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	24014bf0 	.word	0x24014bf0

080094dc <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&sd_rx_semaphore);
 80094e4:	4803      	ldr	r0, [pc, #12]	; (80094f4 <HAL_SD_RxCpltCallback+0x18>)
 80094e6:	f00c fd93 	bl	8016010 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	24014c0c 	.word	0x24014c0c

080094f8 <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 80094f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094fc:	b09e      	sub	sp, #120	; 0x78
 80094fe:	af04      	add	r7, sp, #16
 8009500:	61f8      	str	r0, [r7, #28]
 8009502:	61b9      	str	r1, [r7, #24]
 8009504:	617a      	str	r2, [r7, #20]
 8009506:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 8009508:	2300      	movs	r3, #0
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	015b      	lsls	r3, r3, #5
 8009524:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d104      	bne.n	8009536 <_fx_directory_entry_read+0x3e>
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 80a1 	beq.w	8009678 <_fx_directory_entry_read+0x180>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	6d52      	ldr	r2, [r2, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800953e:	fb02 f303 	mul.w	r3, r2, r3
 8009542:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <_fx_directory_entry_read+0x56>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 800954a:	2302      	movs	r3, #2
 800954c:	e355      	b.n	8009bfa <_fx_directory_entry_read+0x702>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 800954e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	fbb2 f3f3 	udiv	r3, r2, r3
 8009556:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 8009558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800955a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800955c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009562:	fb01 f202 	mul.w	r2, r1, r2
 8009566:	1a9b      	subs	r3, r3, r2
 8009568:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009570:	fbb2 f3f3 	udiv	r3, r2, r3
 8009574:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d028      	beq.n	80095ce <_fx_directory_entry_read+0xd6>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01e      	beq.n	80095c2 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8009588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800958a:	429a      	cmp	r2, r3
 800958c:	d319      	bcc.n	80095c2 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800959a:	4299      	cmp	r1, r3
 800959c:	bf08      	it	eq
 800959e:	4290      	cmpeq	r0, r2
 80095a0:	d10f      	bne.n	80095c2 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d109      	bne.n	80095c2 <_fx_directory_entry_read+0xca>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b2:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b8:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	2200      	movs	r2, #0
 80095be:	651a      	str	r2, [r3, #80]	; 0x50
 80095c0:	e00a      	b.n	80095d8 <_fx_directory_entry_read+0xe0>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c6:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	667b      	str	r3, [r7, #100]	; 0x64
 80095cc:	e024      	b.n	8009618 <_fx_directory_entry_read+0x120>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 80095d8:	e01e      	b.n	8009618 <_fx_directory_entry_read+0x120>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80095da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d907      	bls.n	80095f0 <_fx_directory_entry_read+0xf8>
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80095e6:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80095ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d301      	bcc.n	80095f4 <_fx_directory_entry_read+0xfc>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 80095f0:	2308      	movs	r3, #8
 80095f2:	e302      	b.n	8009bfa <_fx_directory_entry_read+0x702>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80095f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095f8:	461a      	mov	r2, r3
 80095fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095fc:	69f8      	ldr	r0, [r7, #28]
 80095fe:	f006 fc5d 	bl	800febc <_fx_utility_FAT_entry_read>
 8009602:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 8009604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <_fx_directory_entry_read+0x116>
            {

                /* Return error code.  */
                return(status);
 800960a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960c:	e2f5      	b.n	8009bfa <_fx_directory_entry_read+0x702>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 8009612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009614:	3301      	adds	r3, #1
 8009616:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 8009618:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800961a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800961c:	429a      	cmp	r2, r3
 800961e:	d3dc      	bcc.n	80095da <_fx_directory_entry_read+0xe2>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009626:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8009628:	69f9      	ldr	r1, [r7, #28]
 800962a:	6d49      	ldr	r1, [r1, #84]	; 0x54
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800962c:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009630:	4413      	add	r3, r2
 8009632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009634:	4413      	add	r3, r2
 8009636:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800963a:	2200      	movs	r2, #0
 800963c:	60bb      	str	r3, [r7, #8]
 800963e:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009644:	2203      	movs	r2, #3
 8009646:	9202      	str	r2, [sp, #8]
 8009648:	2201      	movs	r2, #1
 800964a:	9201      	str	r2, [sp, #4]
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009652:	69f8      	ldr	r0, [r7, #28]
 8009654:	f008 f840 	bl	80116d8 <_fx_utility_logical_sector_read>
 8009658:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800965a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <_fx_directory_entry_read+0x16c>
        {

            /* Return error code.  */
            return(status);
 8009660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009662:	e2ca      	b.n	8009bfa <_fx_directory_entry_read+0x702>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800966a:	fbb3 f1f2 	udiv	r1, r3, r2
 800966e:	fb01 f202 	mul.w	r2, r1, r2
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	647b      	str	r3, [r7, #68]	; 0x44
 8009676:	e02f      	b.n	80096d8 <_fx_directory_entry_read+0x1e0>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800967e:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8009686:	4413      	add	r3, r2
 8009688:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800968a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800968c:	2200      	movs	r2, #0
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009696:	2203      	movs	r2, #3
 8009698:	9202      	str	r2, [sp, #8]
 800969a:	2201      	movs	r2, #1
 800969c:	9201      	str	r2, [sp, #4]
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096a4:	69f8      	ldr	r0, [r7, #28]
 80096a6:	f008 f817 	bl	80116d8 <_fx_utility_logical_sector_read>
 80096aa:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80096ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <_fx_directory_entry_read+0x1be>
        {

            /* Return error code.  */
            return(status);
 80096b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b4:	e2a1      	b.n	8009bfa <_fx_directory_entry_read+0x702>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	657b      	str	r3, [r7, #84]	; 0x54
 80096ba:	2300      	movs	r3, #0
 80096bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c0:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096c8:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 80096ca:	69fa      	ldr	r2, [r7, #28]
 80096cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 80096ce:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 80096d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096de:	4413      	add	r3, r2
 80096e0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 80096e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e4:	2200      	movs	r2, #0
 80096e6:	4698      	mov	r8, r3
 80096e8:	4691      	mov	r9, r2
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096f4:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	2200      	movs	r2, #0
 80096fa:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	2200      	movs	r2, #0
 8009700:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 8009708:	2300      	movs	r3, #0
 800970a:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 800970c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800970e:	330b      	adds	r3, #11
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	2b0f      	cmp	r3, #15
 8009714:	f040 8129 	bne.w	800996a <_fx_directory_entry_read+0x472>
 8009718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2be5      	cmp	r3, #229	; 0xe5
 800971e:	f000 8124 	beq.w	800996a <_fx_directory_entry_read+0x472>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 8009722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	f003 021f 	and.w	r2, r3, #31
 800972a:	4613      	mov	r3, r2
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	4413      	add	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	3b0d      	subs	r3, #13
 8009736:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 8009738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	f003 031f 	and.w	r3, r3, #31
 8009740:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 8009742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009744:	2bfe      	cmp	r3, #254	; 0xfe
 8009746:	d908      	bls.n	800975a <_fx_directory_entry_read+0x262>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 8009748:	2301      	movs	r3, #1
 800974a:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800974c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	f003 021f 	and.w	r2, r3, #31
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	619a      	str	r2, [r3, #24]
 8009758:	e015      	b.n	8009786 <_fx_directory_entry_read+0x28e>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	3304      	adds	r3, #4
 800975e:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 8009760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009762:	330e      	adds	r3, #14
 8009764:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800976c:	4413      	add	r3, r2
 800976e:	2200      	movs	r2, #0
 8009770:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 8009772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009774:	3301      	adds	r3, #1
 8009776:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 8009778:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800977a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800977c:	429a      	cmp	r2, r3
 800977e:	d202      	bcs.n	8009786 <_fx_directory_entry_read+0x28e>
 8009780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009782:	2bff      	cmp	r3, #255	; 0xff
 8009784:	d9ef      	bls.n	8009766 <_fx_directory_entry_read+0x26e>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 8009786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	f003 031f 	and.w	r3, r3, #31
 800978e:	3b01      	subs	r3, #1
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 8009792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009794:	2b00      	cmp	r3, #0
 8009796:	d168      	bne.n	800986a <_fx_directory_entry_read+0x372>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8009798:	2301      	movs	r3, #1
 800979a:	667b      	str	r3, [r7, #100]	; 0x64
 800979c:	2300      	movs	r3, #0
 800979e:	663b      	str	r3, [r7, #96]	; 0x60
 80097a0:	e060      	b.n	8009864 <_fx_directory_entry_read+0x36c>
                {

                    if ((i == 11) || (i == 26))
 80097a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097a4:	2b0b      	cmp	r3, #11
 80097a6:	d057      	beq.n	8009858 <_fx_directory_entry_read+0x360>
 80097a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097aa:	2b1a      	cmp	r3, #26
 80097ac:	d054      	beq.n	8009858 <_fx_directory_entry_read+0x360>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 80097ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097b0:	2b0d      	cmp	r3, #13
 80097b2:	d102      	bne.n	80097ba <_fx_directory_entry_read+0x2c2>
                    {
                        i = 12;
 80097b4:	230c      	movs	r3, #12
 80097b6:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 80097b8:	e051      	b.n	800985e <_fx_directory_entry_read+0x366>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 80097ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097bc:	3301      	adds	r3, #1
 80097be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097c0:	4413      	add	r3, r2
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d014      	beq.n	80097f2 <_fx_directory_entry_read+0x2fa>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 80097c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ca:	3301      	adds	r3, #1
 80097cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097ce:	4413      	add	r3, r2
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	2bff      	cmp	r3, #255	; 0xff
 80097d4:	d105      	bne.n	80097e2 <_fx_directory_entry_read+0x2ea>
 80097d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097da:	4413      	add	r3, r2
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2bff      	cmp	r3, #255	; 0xff
 80097e0:	d007      	beq.n	80097f2 <_fx_directory_entry_read+0x2fa>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 80097e2:	2301      	movs	r3, #1
 80097e4:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097ea:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 80097f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097f6:	4413      	add	r3, r2
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d02e      	beq.n	800985c <_fx_directory_entry_read+0x364>
 80097fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009802:	4413      	add	r3, r2
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	2bff      	cmp	r3, #255	; 0xff
 8009808:	d028      	beq.n	800985c <_fx_directory_entry_read+0x364>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 800980a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800980c:	4613      	mov	r3, r2
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	441a      	add	r2, r3
 8009816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009818:	4413      	add	r3, r2
 800981a:	2bfe      	cmp	r3, #254	; 0xfe
 800981c:	d908      	bls.n	8009830 <_fx_directory_entry_read+0x338>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 800981e:	2301      	movs	r3, #1
 8009820:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009826:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 800982e:	e01c      	b.n	800986a <_fx_directory_entry_read+0x372>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 8009830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009834:	18d1      	adds	r1, r2, r3
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800983c:	4613      	mov	r3, r2
 800983e:	005b      	lsls	r3, r3, #1
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	441a      	add	r2, r3
 8009846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009848:	4413      	add	r3, r2
 800984a:	4403      	add	r3, r0
 800984c:	780a      	ldrb	r2, [r1, #0]
 800984e:	701a      	strb	r2, [r3, #0]

                    j++;
 8009850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009852:	3301      	adds	r3, #1
 8009854:	663b      	str	r3, [r7, #96]	; 0x60
 8009856:	e002      	b.n	800985e <_fx_directory_entry_read+0x366>
                        continue;
 8009858:	bf00      	nop
 800985a:	e000      	b.n	800985e <_fx_directory_entry_read+0x366>
                        continue;
 800985c:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 800985e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009860:	3302      	adds	r3, #2
 8009862:	667b      	str	r3, [r7, #100]	; 0x64
 8009864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009866:	2b1f      	cmp	r3, #31
 8009868:	d99b      	bls.n	80097a2 <_fx_directory_entry_read+0x2aa>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 800986a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986c:	f103 0220 	add.w	r2, r3, #32
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009874:	429a      	cmp	r2, r3
 8009876:	d365      	bcc.n	8009944 <_fx_directory_entry_read+0x44c>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d103      	bne.n	8009886 <_fx_directory_entry_read+0x38e>
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009882:	2b00      	cmp	r3, #0
 8009884:	d038      	beq.n	80098f8 <_fx_directory_entry_read+0x400>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800988a:	3b01      	subs	r3, #1
 800988c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800988e:	429a      	cmp	r2, r3
 8009890:	d206      	bcs.n	80098a0 <_fx_directory_entry_read+0x3a8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 8009892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009894:	3301      	adds	r3, #1
 8009896:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 8009898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800989a:	3301      	adds	r3, #1
 800989c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800989e:	e038      	b.n	8009912 <_fx_directory_entry_read+0x41a>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80098a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098a4:	461a      	mov	r2, r3
 80098a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098a8:	69f8      	ldr	r0, [r7, #28]
 80098aa:	f006 fb07 	bl	800febc <_fx_utility_FAT_entry_read>
 80098ae:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 80098b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <_fx_directory_entry_read+0x3c2>
                        {

                            /* Return error code.  */
                            return(status);
 80098b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b8:	e19f      	b.n	8009bfa <_fx_directory_entry_read+0x702>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80098be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d907      	bls.n	80098d4 <_fx_directory_entry_read+0x3dc>
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80098ca:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80098ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d301      	bcc.n	80098d8 <_fx_directory_entry_read+0x3e0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 80098d4:	2308      	movs	r3, #8
 80098d6:	e190      	b.n	8009bfa <_fx_directory_entry_read+0x702>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 80098d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098da:	3301      	adds	r3, #1
 80098dc:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 80098de:	2300      	movs	r3, #0
 80098e0:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80098e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098e8:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 80098ea:	69f9      	ldr	r1, [r7, #28]
 80098ec:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80098ee:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80098f2:	4413      	add	r3, r2
 80098f4:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 80098f6:	e00c      	b.n	8009912 <_fx_directory_entry_read+0x41a>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 80098f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098fa:	3301      	adds	r3, #1
 80098fc:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009906:	4413      	add	r3, r2
 8009908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800990a:	429a      	cmp	r2, r3
 800990c:	d301      	bcc.n	8009912 <_fx_directory_entry_read+0x41a>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800990e:	2308      	movs	r3, #8
 8009910:	e173      	b.n	8009bfa <_fx_directory_entry_read+0x702>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009914:	2200      	movs	r2, #0
 8009916:	469a      	mov	sl, r3
 8009918:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800991e:	2203      	movs	r2, #3
 8009920:	9202      	str	r2, [sp, #8]
 8009922:	2201      	movs	r2, #1
 8009924:	9201      	str	r2, [sp, #4]
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	4652      	mov	r2, sl
 800992a:	465b      	mov	r3, fp
 800992c:	69f8      	ldr	r0, [r7, #28]
 800992e:	f007 fed3 	bl	80116d8 <_fx_utility_logical_sector_read>
 8009932:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 8009934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <_fx_directory_entry_read+0x446>
                {
                    return(status);
 800993a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993c:	e15d      	b.n	8009bfa <_fx_directory_entry_read+0x702>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 800993e:	2300      	movs	r3, #0
 8009940:	647b      	str	r3, [r7, #68]	; 0x44
 8009942:	e002      	b.n	800994a <_fx_directory_entry_read+0x452>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 8009944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009946:	3320      	adds	r3, #32
 8009948:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	689a      	ldr	r2, [r3, #8]
 800994e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009950:	4413      	add	r3, r2
 8009952:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	3301      	adds	r3, #1
 8009958:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 800995a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995c:	2b00      	cmp	r3, #0
 800995e:	f47f af12 	bne.w	8009786 <_fx_directory_entry_read+0x28e>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2201      	movs	r2, #1
 8009966:	615a      	str	r2, [r3, #20]
 8009968:	e001      	b.n	800996e <_fx_directory_entry_read+0x476>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 800996a:	2301      	movs	r3, #1
 800996c:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 800996e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009970:	2b01      	cmp	r3, #1
 8009972:	d102      	bne.n	800997a <_fx_directory_entry_read+0x482>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	2200      	movs	r2, #0
 8009978:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 800997a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800997c:	2200      	movs	r2, #0
 800997e:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 8009980:	2300      	movs	r3, #0
 8009982:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009984:	2300      	movs	r3, #0
 8009986:	667b      	str	r3, [r7, #100]	; 0x64
 8009988:	2300      	movs	r3, #0
 800998a:	663b      	str	r3, [r7, #96]	; 0x60
 800998c:	e03d      	b.n	8009a0a <_fx_directory_entry_read+0x512>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 800998e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009992:	4413      	add	r3, r2
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d03b      	beq.n	8009a12 <_fx_directory_entry_read+0x51a>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 800999a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800999c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800999e:	4413      	add	r3, r2
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	2b2e      	cmp	r3, #46	; 0x2e
 80099a4:	d101      	bne.n	80099aa <_fx_directory_entry_read+0x4b2>
        {
            dotflag =  2;
 80099a6:	2302      	movs	r3, #2
 80099a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 80099aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099ae:	4413      	add	r3, r2
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b20      	cmp	r3, #32
 80099b4:	d105      	bne.n	80099c2 <_fx_directory_entry_read+0x4ca>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 80099b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d122      	bne.n	8009a02 <_fx_directory_entry_read+0x50a>
            {
                dotflag =  1;
 80099bc:	2301      	movs	r3, #1
 80099be:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 80099c0:	e01f      	b.n	8009a02 <_fx_directory_entry_read+0x50a>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 80099c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099c4:	2b08      	cmp	r3, #8
 80099c6:	d104      	bne.n	80099d2 <_fx_directory_entry_read+0x4da>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 80099c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <_fx_directory_entry_read+0x4da>
            {
                dotflag =  1;
 80099ce:	2301      	movs	r3, #1
 80099d0:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 80099d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d108      	bne.n	80099ea <_fx_directory_entry_read+0x4f2>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 80099d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	663a      	str	r2, [r7, #96]	; 0x60
 80099de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099e0:	4413      	add	r3, r2
 80099e2:	222e      	movs	r2, #46	; 0x2e
 80099e4:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 80099e6:	2302      	movs	r3, #2
 80099e8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 80099ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099ee:	441a      	add	r2, r3
 80099f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099f4:	440b      	add	r3, r1
 80099f6:	7812      	ldrb	r2, [r2, #0]
 80099f8:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 80099fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099fc:	3301      	adds	r3, #1
 80099fe:	663b      	str	r3, [r7, #96]	; 0x60
 8009a00:	e000      	b.n	8009a04 <_fx_directory_entry_read+0x50c>
            continue;
 8009a02:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a06:	3301      	adds	r3, #1
 8009a08:	667b      	str	r3, [r7, #100]	; 0x64
 8009a0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a0c:	2b0a      	cmp	r3, #10
 8009a0e:	d9be      	bls.n	800998e <_fx_directory_entry_read+0x496>
 8009a10:	e000      	b.n	8009a14 <_fx_directory_entry_read+0x51c>
            break;
 8009a12:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00a      	beq.n	8009a32 <_fx_directory_entry_read+0x53a>
 8009a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	2be5      	cmp	r3, #229	; 0xe5
 8009a22:	d106      	bne.n	8009a32 <_fx_directory_entry_read+0x53a>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	22e5      	movs	r2, #229	; 0xe5
 8009a2a:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 8009a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2e:	2200      	movs	r2, #0
 8009a30:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 8009a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d114      	bne.n	8009a64 <_fx_directory_entry_read+0x56c>
 8009a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d110      	bne.n	8009a64 <_fx_directory_entry_read+0x56c>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8009a42:	2300      	movs	r3, #0
 8009a44:	663b      	str	r3, [r7, #96]	; 0x60
 8009a46:	e00a      	b.n	8009a5e <_fx_directory_entry_read+0x566>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 8009a48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a4c:	441a      	add	r2, r3
 8009a4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a52:	440b      	add	r3, r1
 8009a54:	7812      	ldrb	r2, [r2, #0]
 8009a56:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8009a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8009a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a60:	2b0a      	cmp	r3, #10
 8009a62:	d9f1      	bls.n	8009a48 <_fx_directory_entry_read+0x550>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 8009a64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a68:	4413      	add	r3, r2
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 8009a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a70:	330b      	adds	r3, #11
 8009a72:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 8009a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	643a      	str	r2, [r7, #64]	; 0x40
 8009a7a:	781a      	ldrb	r2, [r3, #0]
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 8009a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	643a      	str	r2, [r7, #64]	; 0x40
 8009a86:	781a      	ldrb	r2, [r3, #0]
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 8009a8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d02a      	beq.n	8009ae8 <_fx_directory_entry_read+0x5f0>
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	7f5b      	ldrb	r3, [r3, #29]
 8009a96:	f003 0308 	and.w	r3, r3, #8
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d024      	beq.n	8009ae8 <_fx_directory_entry_read+0x5f0>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8009aa2:	e018      	b.n	8009ad6 <_fx_directory_entry_read+0x5de>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8009aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009aa8:	4413      	add	r3, r2
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	2b40      	cmp	r3, #64	; 0x40
 8009aae:	d90f      	bls.n	8009ad0 <_fx_directory_entry_read+0x5d8>
 8009ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ab4:	4413      	add	r3, r2
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	2b5a      	cmp	r3, #90	; 0x5a
 8009aba:	d809      	bhi.n	8009ad0 <_fx_directory_entry_read+0x5d8>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8009abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ac0:	4413      	add	r3, r2
 8009ac2:	781a      	ldrb	r2, [r3, #0]
 8009ac4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ac8:	440b      	add	r3, r1
 8009aca:	3220      	adds	r2, #32
 8009acc:	b2d2      	uxtb	r2, r2
 8009ace:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8009ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8009ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ad8:	2b0b      	cmp	r3, #11
 8009ada:	d805      	bhi.n	8009ae8 <_fx_directory_entry_read+0x5f0>
 8009adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ae0:	4413      	add	r3, r2
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1dd      	bne.n	8009aa4 <_fx_directory_entry_read+0x5ac>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 8009ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	643a      	str	r2, [r7, #64]	; 0x40
 8009aee:	781a      	ldrb	r2, [r3, #0]
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 8009af4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009af6:	f006 f97b 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 8009afa:	4602      	mov	r2, r0
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b02:	3302      	adds	r3, #2
 8009b04:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 8009b06:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009b08:	f006 f972 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b14:	3302      	adds	r3, #2
 8009b16:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 8009b18:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009b1a:	f006 f969 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b26:	3302      	adds	r3, #2
 8009b28:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00b      	beq.n	8009b4a <_fx_directory_entry_read+0x652>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 8009b32:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009b34:	f006 f95c 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b42:	041a      	lsls	r2, r3, #16
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	635a      	str	r2, [r3, #52]	; 0x34
 8009b48:	e002      	b.n	8009b50 <_fx_directory_entry_read+0x658>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b52:	3302      	adds	r3, #2
 8009b54:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 8009b56:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009b58:	f006 f94a 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b64:	3302      	adds	r3, #2
 8009b66:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 8009b68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009b6a:	f006 f941 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b76:	3302      	adds	r3, #2
 8009b78:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 8009b7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009b7c:	f006 f938 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 8009b80:	4602      	mov	r2, r0
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b86:	441a      	add	r2, r3
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b8e:	3302      	adds	r3, #2
 8009b90:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 8009b92:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009b94:	f006 f954 	bl	800fe40 <_fx_utility_32_unsigned_read>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	461c      	mov	r4, r3
 8009b9e:	4615      	mov	r5, r2
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 8009bb2:	6939      	ldr	r1, [r7, #16]
 8009bb4:	f04f 0200 	mov.w	r2, #0
 8009bb8:	f04f 0300 	mov.w	r3, #0
 8009bbc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bd0:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00f      	beq.n	8009bf8 <_fx_directory_entry_read+0x700>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bdc:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009be2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009bea:	69b9      	ldr	r1, [r7, #24]
 8009bec:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	661a      	str	r2, [r3, #96]	; 0x60
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3768      	adds	r7, #104	; 0x68
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009c04 <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 8009c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c08:	b0a2      	sub	sp, #136	; 0x88
 8009c0a:	af04      	add	r7, sp, #16
 8009c0c:	6178      	str	r0, [r7, #20]
 8009c0e:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2be5      	cmp	r3, #229	; 0xe5
 8009c26:	d109      	bne.n	8009c3c <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8009c2c:	2be5      	cmp	r3, #229	; 0xe5
 8009c2e:	d105      	bne.n	8009c3c <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 8009c30:	2301      	movs	r3, #1
 8009c32:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	2200      	movs	r2, #0
 8009c38:	711a      	strb	r2, [r3, #4]
 8009c3a:	e001      	b.n	8009c40 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c44:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d316      	bcc.n	8009c88 <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c60:	1ad2      	subs	r2, r2, r3
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6a:	3302      	adds	r3, #2
 8009c6c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 8009c76:	6979      	ldr	r1, [r7, #20]
 8009c78:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009c7a:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009c7e:	4413      	add	r3, r2
 8009c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c86:	e003      	b.n	8009c90 <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	9302      	str	r3, [sp, #8]
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	9301      	str	r3, [sp, #4]
 8009ca2:	9200      	str	r2, [sp, #0]
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	6978      	ldr	r0, [r7, #20]
 8009caa:	f007 fd15 	bl	80116d8 <_fx_utility_logical_sector_read>
 8009cae:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8009cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d002      	beq.n	8009cbc <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 8009cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb8:	f000 bdda 	b.w	800a870 <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009cc8:	4413      	add	r3, r2
 8009cca:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 83cc 	beq.w	800a46e <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	653b      	str	r3, [r7, #80]	; 0x50
 8009cda:	2300      	movs	r3, #0
 8009cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8009cde:	2300      	movs	r3, #0
 8009ce0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ce6:	e02c      	b.n	8009d42 <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cee:	4413      	add	r3, r2
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8009cf4:	d108      	bne.n	8009d08 <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 8009cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01e      	beq.n	8009d3a <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 8009cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 8009d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d02:	3301      	adds	r3, #1
 8009d04:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 8009d06:	e019      	b.n	8009d3c <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d0e:	4413      	add	r3, r2
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	2b20      	cmp	r3, #32
 8009d14:	d012      	beq.n	8009d3c <_fx_directory_entry_write+0x138>
 8009d16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d18:	2b07      	cmp	r3, #7
 8009d1a:	d80f      	bhi.n	8009d3c <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d22:	4413      	add	r3, r2
 8009d24:	7819      	ldrb	r1, [r3, #0]
 8009d26:	f107 021c 	add.w	r2, r7, #28
 8009d2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d2c:	4413      	add	r3, r2
 8009d2e:	460a      	mov	r2, r1
 8009d30:	701a      	strb	r2, [r3, #0]
                i++;
 8009d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d34:	3301      	adds	r3, #1
 8009d36:	667b      	str	r3, [r7, #100]	; 0x64
 8009d38:	e000      	b.n	8009d3c <_fx_directory_entry_write+0x138>
                    continue;
 8009d3a:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8009d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d3e:	3301      	adds	r3, #1
 8009d40:	653b      	str	r3, [r7, #80]	; 0x50
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d48:	4413      	add	r3, r2
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1cb      	bne.n	8009ce8 <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8009d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d52:	663b      	str	r3, [r7, #96]	; 0x60
 8009d54:	e008      	b.n	8009d68 <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 8009d56:	f107 021c 	add.w	r2, r7, #28
 8009d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d5c:	4413      	add	r3, r2
 8009d5e:	2220      	movs	r2, #32
 8009d60:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8009d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d64:	3301      	adds	r3, #1
 8009d66:	663b      	str	r3, [r7, #96]	; 0x60
 8009d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d6a:	2b0a      	cmp	r3, #10
 8009d6c:	d9f3      	bls.n	8009d56 <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 8009d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d03e      	beq.n	8009df2 <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d7a:	4413      	add	r3, r2
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d008      	beq.n	8009d94 <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d88:	1c59      	adds	r1, r3, #1
 8009d8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009d8c:	4413      	add	r3, r2
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d9a:	4413      	add	r3, r2
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d008      	beq.n	8009db4 <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da8:	1c59      	adds	r1, r3, #1
 8009daa:	64b9      	str	r1, [r7, #72]	; 0x48
 8009dac:	4413      	add	r3, r2
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dba:	4413      	add	r3, r2
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d008      	beq.n	8009dd4 <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dc8:	1c59      	adds	r1, r3, #1
 8009dca:	64b9      	str	r1, [r7, #72]	; 0x48
 8009dcc:	4413      	add	r3, r2
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 8009dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dd6:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 8009dd8:	e008      	b.n	8009dec <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 8009dda:	f107 021c 	add.w	r2, r7, #28
 8009dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de0:	4413      	add	r3, r2
 8009de2:	2220      	movs	r2, #32
 8009de4:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 8009de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de8:	3301      	adds	r3, #1
 8009dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dee:	2b07      	cmp	r3, #7
 8009df0:	d9f3      	bls.n	8009dda <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 8009df2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009df4:	4b8e      	ldr	r3, [pc, #568]	; (800a030 <_fx_directory_entry_write+0x42c>)
 8009df6:	fba3 2301 	umull	r2, r3, r3, r1
 8009dfa:	089a      	lsrs	r2, r3, #2
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	4413      	add	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	1aca      	subs	r2, r1, r3
 8009e08:	2a00      	cmp	r2, #0
 8009e0a:	d106      	bne.n	8009e1a <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 8009e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e0e:	4a88      	ldr	r2, [pc, #544]	; (800a030 <_fx_directory_entry_write+0x42c>)
 8009e10:	fba2 2303 	umull	r2, r3, r2, r3
 8009e14:	089b      	lsrs	r3, r3, #2
 8009e16:	657b      	str	r3, [r7, #84]	; 0x54
 8009e18:	e006      	b.n	8009e28 <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 8009e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e1c:	4a84      	ldr	r2, [pc, #528]	; (800a030 <_fx_directory_entry_write+0x42c>)
 8009e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e22:	089b      	lsrs	r3, r3, #2
 8009e24:	3301      	adds	r3, #1
 8009e26:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 8009e30:	2300      	movs	r3, #0
 8009e32:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 8009e34:	e03f      	b.n	8009eb6 <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 8009e36:	f107 021c 	add.w	r2, r7, #28
 8009e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e3c:	4413      	add	r3, r2
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b20      	cmp	r3, #32
 8009e42:	d116      	bne.n	8009e72 <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e4a:	4413      	add	r3, r2
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d035      	beq.n	8009ebe <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e58:	4413      	add	r3, r2
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e5e:	d002      	beq.n	8009e66 <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 8009e60:	2300      	movs	r3, #0
 8009e62:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8009e64:	e02c      	b.n	8009ec0 <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 8009e66:	2308      	movs	r3, #8
 8009e68:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 8009e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 8009e70:	e021      	b.n	8009eb6 <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 8009e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e74:	2b08      	cmp	r3, #8
 8009e76:	d109      	bne.n	8009e8c <_fx_directory_entry_write+0x288>
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e7e:	4413      	add	r3, r2
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b2e      	cmp	r3, #46	; 0x2e
 8009e84:	d102      	bne.n	8009e8c <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 8009e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e88:	3301      	adds	r3, #1
 8009e8a:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 8009e8c:	f107 021c 	add.w	r2, r7, #28
 8009e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e92:	4413      	add	r3, r2
 8009e94:	781a      	ldrb	r2, [r3, #0]
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	6819      	ldr	r1, [r3, #0]
 8009e9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e9c:	440b      	add	r3, r1
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d002      	beq.n	8009eaa <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 8009ea8:	e00a      	b.n	8009ec0 <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 8009eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eac:	3301      	adds	r3, #1
 8009eae:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 8009eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 8009eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eb8:	2b0a      	cmp	r3, #10
 8009eba:	d9bc      	bls.n	8009e36 <_fx_directory_entry_write+0x232>
 8009ebc:	e000      	b.n	8009ec0 <_fx_directory_entry_write+0x2bc>
                    break;
 8009ebe:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 8009ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d005      	beq.n	8009ed2 <_fx_directory_entry_write+0x2ce>
 8009ec6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009eca:	2b20      	cmp	r3, #32
 8009ecc:	d101      	bne.n	8009ed2 <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ed8:	4413      	add	r3, r2
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d001      	beq.n	8009ee4 <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 8009ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d15a      	bne.n	8009fa0 <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eee:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 8009ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 8009ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d901      	bls.n	8009f00 <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 8009efc:	2303      	movs	r3, #3
 8009efe:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 8009f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	667a      	str	r2, [r7, #100]	; 0x64
 8009f06:	3368      	adds	r3, #104	; 0x68
 8009f08:	f107 0210 	add.w	r2, r7, #16
 8009f0c:	4413      	add	r3, r2
 8009f0e:	227e      	movs	r2, #126	; 0x7e
 8009f10:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 8009f14:	2300      	movs	r3, #0
 8009f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f18:	e03f      	b.n	8009f9a <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 8009f1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d105      	bne.n	8009f2c <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	0b1b      	lsrs	r3, r3, #12
 8009f24:	f003 030f 	and.w	r3, r3, #15
 8009f28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f2a:	e015      	b.n	8009f58 <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 8009f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d105      	bne.n	8009f3e <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 8009f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f34:	0a1b      	lsrs	r3, r3, #8
 8009f36:	f003 030f 	and.w	r3, r3, #15
 8009f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f3c:	e00c      	b.n	8009f58 <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 8009f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d105      	bne.n	8009f50 <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	091b      	lsrs	r3, r3, #4
 8009f48:	f003 030f 	and.w	r3, r3, #15
 8009f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f4e:	e003      	b.n	8009f58 <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	f003 030f 	and.w	r3, r3, #15
 8009f56:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 8009f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f5a:	2b09      	cmp	r3, #9
 8009f5c:	d90d      	bls.n	8009f7a <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 8009f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f64:	1c59      	adds	r1, r3, #1
 8009f66:	6679      	str	r1, [r7, #100]	; 0x64
 8009f68:	3237      	adds	r2, #55	; 0x37
 8009f6a:	b2d2      	uxtb	r2, r2
 8009f6c:	3368      	adds	r3, #104	; 0x68
 8009f6e:	f107 0110 	add.w	r1, r7, #16
 8009f72:	440b      	add	r3, r1
 8009f74:	f803 2c5c 	strb.w	r2, [r3, #-92]
 8009f78:	e00c      	b.n	8009f94 <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 8009f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f80:	1c59      	adds	r1, r3, #1
 8009f82:	6679      	str	r1, [r7, #100]	; 0x64
 8009f84:	3230      	adds	r2, #48	; 0x30
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	3368      	adds	r3, #104	; 0x68
 8009f8a:	f107 0110 	add.w	r1, r7, #16
 8009f8e:	440b      	add	r3, r1
 8009f90:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 8009f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f96:	3301      	adds	r3, #1
 8009f98:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d9bc      	bls.n	8009f1a <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 8009fa6:	7f3b      	ldrb	r3, [r7, #28]
 8009fa8:	2be5      	cmp	r3, #229	; 0xe5
 8009faa:	d104      	bne.n	8009fb6 <_fx_directory_entry_write+0x3b2>
 8009fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 8009fb2:	238f      	movs	r3, #143	; 0x8f
 8009fb4:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	667b      	str	r3, [r7, #100]	; 0x64
 8009fba:	e01d      	b.n	8009ff8 <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 8009fbc:	f107 021c 	add.w	r2, r7, #28
 8009fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fc2:	4413      	add	r3, r2
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 8009fca:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009fce:	2b60      	cmp	r3, #96	; 0x60
 8009fd0:	d908      	bls.n	8009fe4 <_fx_directory_entry_write+0x3e0>
 8009fd2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009fd6:	2b7a      	cmp	r3, #122	; 0x7a
 8009fd8:	d804      	bhi.n	8009fe4 <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8009fda:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009fde:	3b20      	subs	r3, #32
 8009fe0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 8009fe4:	f107 021c 	add.w	r2, r7, #28
 8009fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fea:	4413      	add	r3, r2
 8009fec:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8009ff0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	667b      	str	r3, [r7, #100]	; 0x64
 8009ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ffa:	2b0a      	cmp	r3, #10
 8009ffc:	d9de      	bls.n	8009fbc <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	791b      	ldrb	r3, [r3, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 8095 	beq.w	800a132 <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a008:	2300      	movs	r3, #0
 800a00a:	667b      	str	r3, [r7, #100]	; 0x64
 800a00c:	e008      	b.n	800a020 <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 800a00e:	f107 021c 	add.w	r2, r7, #28
 800a012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a014:	4413      	add	r3, r2
 800a016:	2220      	movs	r2, #32
 800a018:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a01a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a01c:	3301      	adds	r3, #1
 800a01e:	667b      	str	r3, [r7, #100]	; 0x64
 800a020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a022:	2b0a      	cmp	r3, #10
 800a024:	d9f3      	bls.n	800a00e <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a026:	2300      	movs	r3, #0
 800a028:	667b      	str	r3, [r7, #100]	; 0x64
 800a02a:	2300      	movs	r3, #0
 800a02c:	663b      	str	r3, [r7, #96]	; 0x60
 800a02e:	e023      	b.n	800a078 <_fx_directory_entry_write+0x474>
 800a030:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a038:	4413      	add	r3, r2
 800a03a:	3304      	adds	r3, #4
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b2e      	cmp	r3, #46	; 0x2e
 800a040:	d01e      	beq.n	800a080 <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a046:	4413      	add	r3, r2
 800a048:	3304      	adds	r3, #4
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d019      	beq.n	800a084 <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a054:	4413      	add	r3, r2
 800a056:	3304      	adds	r3, #4
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800a05e:	f107 021c 	add.w	r2, r7, #28
 800a062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a064:	4413      	add	r3, r2
 800a066:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a06a:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a06c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a06e:	3301      	adds	r3, #1
 800a070:	667b      	str	r3, [r7, #100]	; 0x64
 800a072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a074:	3301      	adds	r3, #1
 800a076:	663b      	str	r3, [r7, #96]	; 0x60
 800a078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a07a:	2b07      	cmp	r3, #7
 800a07c:	d9da      	bls.n	800a034 <_fx_directory_entry_write+0x430>
 800a07e:	e002      	b.n	800a086 <_fx_directory_entry_write+0x482>
                    break;
 800a080:	bf00      	nop
 800a082:	e000      	b.n	800a086 <_fx_directory_entry_write+0x482>
                    break;
 800a084:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a08a:	4413      	add	r3, r2
 800a08c:	3304      	adds	r3, #4
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d025      	beq.n	800a0e0 <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a096:	3301      	adds	r3, #1
 800a098:	667b      	str	r3, [r7, #100]	; 0x64
 800a09a:	2308      	movs	r3, #8
 800a09c:	663b      	str	r3, [r7, #96]	; 0x60
 800a09e:	e01a      	b.n	800a0d6 <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0a4:	4413      	add	r3, r2
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d017      	beq.n	800a0de <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0b2:	4413      	add	r3, r2
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 800a0bc:	f107 021c 	add.w	r2, r7, #28
 800a0c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a0c8:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a0ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	667b      	str	r3, [r7, #100]	; 0x64
 800a0d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	663b      	str	r3, [r7, #96]	; 0x60
 800a0d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0d8:	2b0a      	cmp	r3, #10
 800a0da:	d9e1      	bls.n	800a0a0 <_fx_directory_entry_write+0x49c>
 800a0dc:	e000      	b.n	800a0e0 <_fx_directory_entry_write+0x4dc>
                        break;
 800a0de:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	663b      	str	r3, [r7, #96]	; 0x60
 800a0e4:	e01d      	b.n	800a122 <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 800a0e6:	f107 021c 	add.w	r2, r7, #28
 800a0ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0ec:	4413      	add	r3, r2
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a0f4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a0f8:	2b60      	cmp	r3, #96	; 0x60
 800a0fa:	d908      	bls.n	800a10e <_fx_directory_entry_write+0x50a>
 800a0fc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a100:	2b7a      	cmp	r3, #122	; 0x7a
 800a102:	d804      	bhi.n	800a10e <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a104:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a108:	3b20      	subs	r3, #32
 800a10a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800a10e:	f107 021c 	add.w	r2, r7, #28
 800a112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a114:	4413      	add	r3, r2
 800a116:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a11a:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a11c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a11e:	3301      	adds	r3, #1
 800a120:	663b      	str	r3, [r7, #96]	; 0x60
 800a122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a124:	2b0a      	cmp	r3, #10
 800a126:	d9de      	bls.n	800a0e6 <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800a128:	7f3b      	ldrb	r3, [r7, #28]
 800a12a:	2be5      	cmp	r3, #229	; 0xe5
 800a12c:	d101      	bne.n	800a132 <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 800a12e:	238f      	movs	r3, #143	; 0x8f
 800a130:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a132:	2300      	movs	r3, #0
 800a134:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a138:	2300      	movs	r3, #0
 800a13a:	667b      	str	r3, [r7, #100]	; 0x64
 800a13c:	e016      	b.n	800a16c <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800a13e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a142:	01db      	lsls	r3, r3, #7
 800a144:	b25a      	sxtb	r2, r3
 800a146:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a14a:	085b      	lsrs	r3, r3, #1
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	b25b      	sxtb	r3, r3
 800a150:	4313      	orrs	r3, r2
 800a152:	b25b      	sxtb	r3, r3
 800a154:	b2da      	uxtb	r2, r3
 800a156:	f107 011c 	add.w	r1, r7, #28
 800a15a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a15c:	440b      	add	r3, r1
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	4413      	add	r3, r2
 800a162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a168:	3301      	adds	r3, #1
 800a16a:	667b      	str	r3, [r7, #100]	; 0x64
 800a16c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a16e:	2b0a      	cmp	r3, #10
 800a170:	d9e5      	bls.n	800a13e <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800a172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a174:	b2db      	uxtb	r3, r3
 800a176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a17e:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 800a180:	e0f3      	b.n	800a36a <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800a188:	7f3b      	ldrb	r3, [r7, #28]
 800a18a:	2be5      	cmp	r3, #229	; 0xe5
 800a18c:	d102      	bne.n	800a194 <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800a18e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a190:	22e5      	movs	r2, #229	; 0xe5
 800a192:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 800a194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a196:	330b      	adds	r3, #11
 800a198:	220f      	movs	r2, #15
 800a19a:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 800a19c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a19e:	330c      	adds	r3, #12
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 800a1a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1a6:	330d      	adds	r3, #13
 800a1a8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800a1ac:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 800a1ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1b0:	331a      	adds	r3, #26
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 800a1b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1b8:	331b      	adds	r3, #27
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800a1be:	2301      	movs	r3, #1
 800a1c0:	667b      	str	r3, [r7, #100]	; 0x64
 800a1c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	005b      	lsls	r3, r3, #1
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4413      	add	r3, r2
 800a1ce:	3b0d      	subs	r3, #13
 800a1d0:	663b      	str	r3, [r7, #96]	; 0x60
 800a1d2:	e03e      	b.n	800a252 <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 800a1d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1d6:	2b0b      	cmp	r3, #11
 800a1d8:	d037      	beq.n	800a24a <_fx_directory_entry_write+0x646>
 800a1da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1dc:	2b1a      	cmp	r3, #26
 800a1de:	d034      	beq.n	800a24a <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 800a1e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1e2:	2b0d      	cmp	r3, #13
 800a1e4:	d102      	bne.n	800a1ec <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 800a1e6:	230c      	movs	r3, #12
 800a1e8:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 800a1ea:	e02f      	b.n	800a24c <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 800a1ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00d      	beq.n	800a210 <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 800a1f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a1f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1f8:	4413      	add	r3, r2
 800a1fa:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800a1fe:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 800a200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a202:	3301      	adds	r3, #1
 800a204:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a206:	4413      	add	r3, r2
 800a208:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800a20c:	701a      	strb	r2, [r3, #0]
 800a20e:	e00e      	b.n	800a22e <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a216:	441a      	add	r2, r3
 800a218:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a21a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a21c:	440b      	add	r3, r1
 800a21e:	7812      	ldrb	r2, [r2, #0]
 800a220:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 800a222:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a224:	3301      	adds	r3, #1
 800a226:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a228:	4413      	add	r3, r2
 800a22a:	2200      	movs	r2, #0
 800a22c:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a234:	4413      	add	r3, r2
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d102      	bne.n	800a242 <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 800a23c:	23ff      	movs	r3, #255	; 0xff
 800a23e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 800a242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a244:	3301      	adds	r3, #1
 800a246:	663b      	str	r3, [r7, #96]	; 0x60
 800a248:	e000      	b.n	800a24c <_fx_directory_entry_write+0x648>
                    continue;
 800a24a:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800a24c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a24e:	3302      	adds	r3, #2
 800a250:	667b      	str	r3, [r7, #100]	; 0x64
 800a252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a254:	2b1f      	cmp	r3, #31
 800a256:	d9bd      	bls.n	800a1d4 <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 800a258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a25a:	3320      	adds	r3, #32
 800a25c:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 800a25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a260:	3320      	adds	r3, #32
 800a262:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d376      	bcc.n	800a35c <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a270:	2200      	movs	r2, #0
 800a272:	60bb      	str	r3, [r7, #8]
 800a274:	60fa      	str	r2, [r7, #12]
 800a276:	2303      	movs	r3, #3
 800a278:	9302      	str	r3, [sp, #8]
 800a27a:	2301      	movs	r3, #1
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a286:	6978      	ldr	r0, [r7, #20]
 800a288:	f007 fcba 	bl	8011c00 <_fx_utility_logical_sector_write>
 800a28c:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800a28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a296:	e2eb      	b.n	800a870 <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a29c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d335      	bcc.n	800a30e <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d206      	bcs.n	800a2bc <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800a2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2ba:	e032      	b.n	800a322 <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a2bc:	f107 0318 	add.w	r3, r7, #24
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2c4:	6978      	ldr	r0, [r7, #20]
 800a2c6:	f005 fdf9 	bl	800febc <_fx_utility_FAT_entry_read>
 800a2ca:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 800a2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d4:	e2cc      	b.n	800a870 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d907      	bls.n	800a2f0 <_fx_directory_entry_write+0x6ec>
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a2e6:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a2ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d301      	bcc.n	800a2f4 <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800a2f0:	2308      	movs	r3, #8
 800a2f2:	e2bd      	b.n	800a870 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a300:	6979      	ldr	r1, [r7, #20]
 800a302:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a304:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a308:	4413      	add	r3, r2
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a30c:	e009      	b.n	800a322 <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 800a30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a310:	3301      	adds	r3, #1
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d301      	bcc.n	800a322 <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800a31e:	2308      	movs	r3, #8
 800a320:	e2a6      	b.n	800a870 <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a324:	2200      	movs	r2, #0
 800a326:	603b      	str	r3, [r7, #0]
 800a328:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a32e:	2203      	movs	r2, #3
 800a330:	9202      	str	r2, [sp, #8]
 800a332:	2201      	movs	r2, #1
 800a334:	9201      	str	r2, [sp, #4]
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a33c:	6978      	ldr	r0, [r7, #20]
 800a33e:	f007 f9cb 	bl	80116d8 <_fx_utility_logical_sector_read>
 800a342:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	e290      	b.n	800a870 <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 800a358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a35a:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 800a35c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a35e:	3b01      	subs	r3, #1
 800a360:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 800a362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a364:	b2da      	uxtb	r2, r3
 800a366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a368:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 800a36a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f47f af08 	bne.w	800a182 <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	791b      	ldrb	r3, [r3, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d116      	bne.n	800a3a8 <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a37a:	2300      	movs	r3, #0
 800a37c:	667b      	str	r3, [r7, #100]	; 0x64
 800a37e:	e00f      	b.n	800a3a0 <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 800a380:	f107 021c 	add.w	r2, r7, #28
 800a384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a386:	4413      	add	r3, r2
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 800a38e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	677a      	str	r2, [r7, #116]	; 0x74
 800a394:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a398:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a39a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a39c:	3301      	adds	r3, #1
 800a39e:	667b      	str	r3, [r7, #100]	; 0x64
 800a3a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3a2:	2b0a      	cmp	r3, #10
 800a3a4:	d9ec      	bls.n	800a380 <_fx_directory_entry_write+0x77c>
 800a3a6:	e1a5      	b.n	800a6f4 <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	667b      	str	r3, [r7, #100]	; 0x64
 800a3ac:	e007      	b.n	800a3be <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 800a3ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a3b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3b2:	4413      	add	r3, r2
 800a3b4:	2220      	movs	r2, #32
 800a3b6:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a3b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	667b      	str	r3, [r7, #100]	; 0x64
 800a3be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3c0:	2b0a      	cmp	r3, #10
 800a3c2:	d9f4      	bls.n	800a3ae <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	667b      	str	r3, [r7, #100]	; 0x64
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	663b      	str	r3, [r7, #96]	; 0x60
 800a3cc:	e01c      	b.n	800a408 <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3d2:	4413      	add	r3, r2
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a3da:	d019      	beq.n	800a410 <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3e0:	4413      	add	r3, r2
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d014      	beq.n	800a414 <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800a3ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a3ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3ee:	4413      	add	r3, r2
 800a3f0:	6939      	ldr	r1, [r7, #16]
 800a3f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a3f4:	440a      	add	r2, r1
 800a3f6:	3204      	adds	r2, #4
 800a3f8:	7812      	ldrb	r2, [r2, #0]
 800a3fa:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a3fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3fe:	3301      	adds	r3, #1
 800a400:	667b      	str	r3, [r7, #100]	; 0x64
 800a402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a404:	3301      	adds	r3, #1
 800a406:	663b      	str	r3, [r7, #96]	; 0x60
 800a408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a40a:	2b07      	cmp	r3, #7
 800a40c:	d9df      	bls.n	800a3ce <_fx_directory_entry_write+0x7ca>
 800a40e:	e002      	b.n	800a416 <_fx_directory_entry_write+0x812>
                    break;
 800a410:	bf00      	nop
 800a412:	e000      	b.n	800a416 <_fx_directory_entry_write+0x812>
                    break;
 800a414:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800a416:	693a      	ldr	r2, [r7, #16]
 800a418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a41a:	4413      	add	r3, r2
 800a41c:	3304      	adds	r3, #4
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d020      	beq.n	800a466 <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a426:	3301      	adds	r3, #1
 800a428:	667b      	str	r3, [r7, #100]	; 0x64
 800a42a:	2308      	movs	r3, #8
 800a42c:	663b      	str	r3, [r7, #96]	; 0x60
 800a42e:	e015      	b.n	800a45c <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a434:	4413      	add	r3, r2
 800a436:	3304      	adds	r3, #4
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d012      	beq.n	800a464 <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800a43e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a442:	4413      	add	r3, r2
 800a444:	6939      	ldr	r1, [r7, #16]
 800a446:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a448:	440a      	add	r2, r1
 800a44a:	3204      	adds	r2, #4
 800a44c:	7812      	ldrb	r2, [r2, #0]
 800a44e:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a452:	3301      	adds	r3, #1
 800a454:	667b      	str	r3, [r7, #100]	; 0x64
 800a456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a458:	3301      	adds	r3, #1
 800a45a:	663b      	str	r3, [r7, #96]	; 0x60
 800a45c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a45e:	2b0a      	cmp	r3, #10
 800a460:	d9e6      	bls.n	800a430 <_fx_directory_entry_write+0x82c>
 800a462:	e000      	b.n	800a466 <_fx_directory_entry_write+0x862>
                        break;
 800a464:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800a466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a468:	330b      	adds	r3, #11
 800a46a:	677b      	str	r3, [r7, #116]	; 0x74
 800a46c:	e142      	b.n	800a6f4 <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 80a1 	beq.w	800a5ba <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a482:	b2da      	uxtb	r2, r3
 800a484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	429a      	cmp	r2, r3
 800a48a:	f040 8096 	bne.w	800a5ba <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800a48e:	2300      	movs	r3, #0
 800a490:	663b      	str	r3, [r7, #96]	; 0x60
 800a492:	e08c      	b.n	800a5ae <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	2be5      	cmp	r3, #229	; 0xe5
 800a49c:	d102      	bne.n	800a4a4 <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800a49e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4a0:	22e5      	movs	r2, #229	; 0xe5
 800a4a2:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 800a4a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4a6:	3320      	adds	r3, #32
 800a4a8:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 800a4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ac:	3320      	adds	r3, #32
 800a4ae:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d376      	bcc.n	800a5a8 <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4bc:	2200      	movs	r2, #0
 800a4be:	4698      	mov	r8, r3
 800a4c0:	4691      	mov	r9, r2
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	9302      	str	r3, [sp, #8]
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	9301      	str	r3, [sp, #4]
 800a4ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	4642      	mov	r2, r8
 800a4d0:	464b      	mov	r3, r9
 800a4d2:	6978      	ldr	r0, [r7, #20]
 800a4d4:	f007 fb94 	bl	8011c00 <_fx_utility_logical_sector_write>
 800a4d8:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800a4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	e1c5      	b.n	800a870 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d335      	bcc.n	800a55a <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d206      	bcs.n	800a508 <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 800a4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 800a500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a502:	3301      	adds	r3, #1
 800a504:	63bb      	str	r3, [r7, #56]	; 0x38
 800a506:	e032      	b.n	800a56e <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a508:	f107 0318 	add.w	r3, r7, #24
 800a50c:	461a      	mov	r2, r3
 800a50e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a510:	6978      	ldr	r0, [r7, #20]
 800a512:	f005 fcd3 	bl	800febc <_fx_utility_FAT_entry_read>
 800a516:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 800a518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 800a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a520:	e1a6      	b.n	800a870 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d907      	bls.n	800a53c <_fx_directory_entry_write+0x938>
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a532:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a538:	429a      	cmp	r2, r3
 800a53a:	d301      	bcc.n	800a540 <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 800a53c:	2308      	movs	r3, #8
 800a53e:	e197      	b.n	800a870 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 800a540:	2300      	movs	r3, #0
 800a542:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a54c:	6979      	ldr	r1, [r7, #20]
 800a54e:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a550:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a554:	4413      	add	r3, r2
 800a556:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a558:	e009      	b.n	800a56e <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 800a55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a55c:	3301      	adds	r3, #1
 800a55e:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a564:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a566:	429a      	cmp	r2, r3
 800a568:	d301      	bcc.n	800a56e <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 800a56a:	2308      	movs	r3, #8
 800a56c:	e180      	b.n	800a870 <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a570:	2200      	movs	r2, #0
 800a572:	469a      	mov	sl, r3
 800a574:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a57a:	2203      	movs	r2, #3
 800a57c:	9202      	str	r2, [sp, #8]
 800a57e:	2201      	movs	r2, #1
 800a580:	9201      	str	r2, [sp, #4]
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	4652      	mov	r2, sl
 800a586:	465b      	mov	r3, fp
 800a588:	6978      	ldr	r0, [r7, #20]
 800a58a:	f007 f8a5 	bl	80116d8 <_fx_utility_logical_sector_read>
 800a58e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800a590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 800a596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a598:	e16a      	b.n	800a870 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 800a5a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5a6:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800a5a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	663b      	str	r3, [r7, #96]	; 0x60
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	699b      	ldr	r3, [r3, #24]
 800a5b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	f4ff af6d 	bcc.w	800a494 <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	663b      	str	r3, [r7, #96]	; 0x60
 800a5be:	e007      	b.n	800a5d0 <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 800a5c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a5c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5c4:	4413      	add	r3, r2
 800a5c6:	2220      	movs	r2, #32
 800a5c8:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a5ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	663b      	str	r3, [r7, #96]	; 0x60
 800a5d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5d2:	2b0a      	cmp	r3, #10
 800a5d4:	d9f4      	bls.n	800a5c0 <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	667b      	str	r3, [r7, #100]	; 0x64
 800a5da:	e007      	b.n	800a5ec <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 800a5dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a5de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5e0:	4413      	add	r3, r2
 800a5e2:	222e      	movs	r2, #46	; 0x2e
 800a5e4:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800a5e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	667b      	str	r3, [r7, #100]	; 0x64
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5f2:	4413      	add	r3, r2
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a5f8:	d0f0      	beq.n	800a5dc <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a600:	4413      	add	r3, r2
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d039      	beq.n	800a67c <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a608:	2300      	movs	r3, #0
 800a60a:	667b      	str	r3, [r7, #100]	; 0x64
 800a60c:	2300      	movs	r3, #0
 800a60e:	663b      	str	r3, [r7, #96]	; 0x60
 800a610:	e02d      	b.n	800a66e <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a618:	4413      	add	r3, r2
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	2b2e      	cmp	r3, #46	; 0x2e
 800a61e:	d02a      	beq.n	800a676 <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a626:	4413      	add	r3, r2
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d025      	beq.n	800a67a <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a634:	4413      	add	r3, r2
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a63c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a640:	2b60      	cmp	r3, #96	; 0x60
 800a642:	d908      	bls.n	800a656 <_fx_directory_entry_write+0xa52>
 800a644:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a648:	2b7a      	cmp	r3, #122	; 0x7a
 800a64a:	d804      	bhi.n	800a656 <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a64c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a650:	3b20      	subs	r3, #32
 800a652:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800a656:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a65a:	4413      	add	r3, r2
 800a65c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a660:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a664:	3301      	adds	r3, #1
 800a666:	667b      	str	r3, [r7, #100]	; 0x64
 800a668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a66a:	3301      	adds	r3, #1
 800a66c:	663b      	str	r3, [r7, #96]	; 0x60
 800a66e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a670:	2b07      	cmp	r3, #7
 800a672:	d9ce      	bls.n	800a612 <_fx_directory_entry_write+0xa0e>
 800a674:	e002      	b.n	800a67c <_fx_directory_entry_write+0xa78>
                    break;
 800a676:	bf00      	nop
 800a678:	e000      	b.n	800a67c <_fx_directory_entry_write+0xa78>
                    break;
 800a67a:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a682:	4413      	add	r3, r2
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d031      	beq.n	800a6ee <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a68a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a68c:	3301      	adds	r3, #1
 800a68e:	667b      	str	r3, [r7, #100]	; 0x64
 800a690:	2308      	movs	r3, #8
 800a692:	663b      	str	r3, [r7, #96]	; 0x60
 800a694:	e026      	b.n	800a6e4 <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a69c:	4413      	add	r3, r2
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d023      	beq.n	800a6ec <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6aa:	4413      	add	r3, r2
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a6b2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a6b6:	2b60      	cmp	r3, #96	; 0x60
 800a6b8:	d908      	bls.n	800a6cc <_fx_directory_entry_write+0xac8>
 800a6ba:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a6be:	2b7a      	cmp	r3, #122	; 0x7a
 800a6c0:	d804      	bhi.n	800a6cc <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a6c2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a6c6:	3b20      	subs	r3, #32
 800a6c8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800a6cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a6ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a6d6:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a6d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6da:	3301      	adds	r3, #1
 800a6dc:	667b      	str	r3, [r7, #100]	; 0x64
 800a6de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	663b      	str	r3, [r7, #96]	; 0x60
 800a6e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6e6:	2b0a      	cmp	r3, #10
 800a6e8:	d9d5      	bls.n	800a696 <_fx_directory_entry_write+0xa92>
 800a6ea:	e000      	b.n	800a6ee <_fx_directory_entry_write+0xaea>
                    break;
 800a6ec:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800a6ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6f0:	330b      	adds	r3, #11
 800a6f2:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 800a6f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6f6:	1c5a      	adds	r2, r3, #1
 800a6f8:	677a      	str	r2, [r7, #116]	; 0x74
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	7f12      	ldrb	r2, [r2, #28]
 800a6fe:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 800a700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	677a      	str	r2, [r7, #116]	; 0x74
 800a706:	693a      	ldr	r2, [r7, #16]
 800a708:	7f52      	ldrb	r2, [r2, #29]
 800a70a:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 800a70c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a70e:	1c5a      	adds	r2, r3, #1
 800a710:	677a      	str	r2, [r7, #116]	; 0x74
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	7f92      	ldrb	r2, [r2, #30]
 800a716:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	6a1b      	ldr	r3, [r3, #32]
 800a71c:	4619      	mov	r1, r3
 800a71e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a720:	f005 fb79 	bl	800fe16 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a726:	3302      	adds	r3, #2
 800a728:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	4619      	mov	r1, r3
 800a730:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a732:	f005 fb70 	bl	800fe16 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a738:	3302      	adds	r3, #2
 800a73a:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a740:	4619      	mov	r1, r3
 800a742:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a744:	f005 fb67 	bl	800fe16 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a74a:	3302      	adds	r3, #2
 800a74c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a752:	2b00      	cmp	r3, #0
 800a754:	d008      	beq.n	800a768 <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75a:	0c1b      	lsrs	r3, r3, #16
 800a75c:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 800a75e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a760:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a762:	f005 fb58 	bl	800fe16 <_fx_utility_16_unsigned_write>
 800a766:	e003      	b.n	800a770 <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 800a768:	2100      	movs	r1, #0
 800a76a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a76c:	f005 fb53 	bl	800fe16 <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a772:	3302      	adds	r3, #2
 800a774:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77a:	4619      	mov	r1, r3
 800a77c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a77e:	f005 fb4a 	bl	800fe16 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a784:	3302      	adds	r3, #2
 800a786:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78c:	4619      	mov	r1, r3
 800a78e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a790:	f005 fb41 	bl	800fe16 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a796:	3302      	adds	r3, #2
 800a798:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a79e:	4619      	mov	r1, r3
 800a7a0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a7a2:	f005 fb38 	bl	800fe16 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a7a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7a8:	3302      	adds	r3, #2
 800a7aa:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a7b8:	f005 fb5f 	bl	800fe7a <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7be:	2200      	movs	r2, #0
 800a7c0:	461c      	mov	r4, r3
 800a7c2:	4615      	mov	r5, r2
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	9302      	str	r3, [sp, #8]
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	9301      	str	r3, [sp, #4]
 800a7cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	4622      	mov	r2, r4
 800a7d2:	462b      	mov	r3, r5
 800a7d4:	6978      	ldr	r0, [r7, #20]
 800a7d6:	f007 fa13 	bl	8011c00 <_fx_utility_logical_sector_write>
 800a7da:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800a7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 800a7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e4:	e044      	b.n	800a870 <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d03e      	beq.n	800a86e <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 800a7fc:	4299      	cmp	r1, r3
 800a7fe:	bf08      	it	eq
 800a800:	4290      	cmpeq	r0, r2
 800a802:	d134      	bne.n	800a86e <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800a80e:	429a      	cmp	r2, r3
 800a810:	d12d      	bne.n	800a86e <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800a822:	6979      	ldr	r1, [r7, #20]
 800a824:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	7f1a      	ldrb	r2, [r3, #28]
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	7f5a      	ldrb	r2, [r3, #29]
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	7f9a      	ldrb	r2, [r3, #30]
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	6a1a      	ldr	r2, [r3, #32]
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3778      	adds	r7, #120	; 0x78
 800a874:	46bd      	mov	sp, r7
 800a876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a87a:	bf00      	nop

0800a87c <_fx_directory_free_search>:
/*                                            check for sub directory,    */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800a87c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a880:	b0a8      	sub	sp, #160	; 0xa0
 800a882:	af04      	add	r7, sp, #16
 800a884:	6278      	str	r0, [r7, #36]	; 0x24
 800a886:	6239      	str	r1, [r7, #32]
 800a888:	61fa      	str	r2, [r7, #28]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 800a88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800a890:	1c5a      	adds	r2, r3, #1
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
#endif

    /* Initialize the entry sector values.  */
    entry_sector = entry_offset = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a89c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a89e:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	615a      	str	r2, [r3, #20]

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	2b2e      	cmp	r3, #46	; 0x2e
 800a8ae:	d108      	bne.n	800a8c2 <_fx_directory_free_search+0x46>
    {

        /* Is there more than 1 dot?  */
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a8ba:	d102      	bne.n	800a8c2 <_fx_directory_free_search+0x46>
        {
            /* Yes, consider the name invalid.  */
            return(FX_INVALID_NAME);
 800a8bc:	230c      	movs	r3, #12
 800a8be:	f000 bc17 	b.w	800b0f0 <_fx_directory_free_search+0x874>
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a8ce:	e13d      	b.n	800ab4c <_fx_directory_free_search+0x2d0>
    {

        /* Check for upper-case characters.  */
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8d8:	4413      	add	r3, r2
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b40      	cmp	r3, #64	; 0x40
 800a8de:	d908      	bls.n	800a8f2 <_fx_directory_free_search+0x76>
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8e8:	4413      	add	r3, r2
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	2b5a      	cmp	r3, #90	; 0x5a
 800a8ee:	f240 8121 	bls.w	800ab34 <_fx_directory_free_search+0x2b8>
        {
            continue;
        }
        /* Check for numeric characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8fa:	4413      	add	r3, r2
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b2f      	cmp	r3, #47	; 0x2f
 800a900:	d908      	bls.n	800a914 <_fx_directory_free_search+0x98>
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a90a:	4413      	add	r3, r2
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	2b39      	cmp	r3, #57	; 0x39
 800a910:	f240 8112 	bls.w	800ab38 <_fx_directory_free_search+0x2bc>
        {
            continue;
        }
        /* Check for any lower-case characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a91c:	4413      	add	r3, r2
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	2b60      	cmp	r3, #96	; 0x60
 800a922:	d90b      	bls.n	800a93c <_fx_directory_free_search+0xc0>
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a92c:	4413      	add	r3, r2
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	2b7a      	cmp	r3, #122	; 0x7a
 800a932:	d803      	bhi.n	800a93c <_fx_directory_free_search+0xc0>
        {
            entry_ptr -> fx_dir_entry_long_name_present =  1;
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	2201      	movs	r2, #1
 800a938:	615a      	str	r2, [r3, #20]
 800a93a:	e102      	b.n	800ab42 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a space in the middle of the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a944:	4413      	add	r3, r2
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b20      	cmp	r3, #32
 800a94a:	d103      	bne.n	800a954 <_fx_directory_free_search+0xd8>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	2201      	movs	r2, #1
 800a950:	615a      	str	r2, [r3, #20]
 800a952:	e0f6      	b.n	800ab42 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a dot in the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a95c:	4413      	add	r3, r2
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	2b2e      	cmp	r3, #46	; 0x2e
 800a962:	d114      	bne.n	800a98e <_fx_directory_free_search+0x112>
        {
            /* Determine if this is the first dot detected.  */
            if (j == 0)
 800a964:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10c      	bne.n	800a986 <_fx_directory_free_search+0x10a>
            {
                /* First dot, remember where it was.  */
                j = i;
 800a96c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Determine if this is a leading dot.  */
                if (i == 0)
 800a974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f040 80e2 	bne.w	800ab42 <_fx_directory_free_search+0x2c6>
                {

                    /* Leading dot detected, treat as a long filename.  */
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	2201      	movs	r2, #1
 800a982:	615a      	str	r2, [r3, #20]
 800a984:	e0dd      	b.n	800ab42 <_fx_directory_free_search+0x2c6>
                }
            }
            else
            {
                /* Second dot detected, must have a long file name.  */
                entry_ptr -> fx_dir_entry_long_name_present = 1;
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	2201      	movs	r2, #1
 800a98a:	615a      	str	r2, [r3, #20]
 800a98c:	e0d9      	b.n	800ab42 <_fx_directory_free_search+0x2c6>
            }
        }
        /* Check for a special 0xE5 character.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a996:	4413      	add	r3, r2
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2be5      	cmp	r3, #229	; 0xe5
 800a99c:	d103      	bne.n	800a9a6 <_fx_directory_free_search+0x12a>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	615a      	str	r2, [r3, #20]
 800a9a4:	e0cd      	b.n	800ab42 <_fx_directory_free_search+0x2c6>
        }
        /* Check for code point value greater than 127.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9ae:	4413      	add	r3, r2
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	b25b      	sxtb	r3, r3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f2c0 80c1 	blt.w	800ab3c <_fx_directory_free_search+0x2c0>
        {
            continue;
        }
        /* Check for any special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9c2:	4413      	add	r3, r2
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	2b7e      	cmp	r3, #126	; 0x7e
 800a9c8:	f000 80ba 	beq.w	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9d4:	4413      	add	r3, r2
 800a9d6:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800a9d8:	2b2d      	cmp	r3, #45	; 0x2d
 800a9da:	f000 80b1 	beq.w	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9e6:	4413      	add	r3, r2
 800a9e8:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800a9ea:	2b5f      	cmp	r3, #95	; 0x5f
 800a9ec:	f000 80a8 	beq.w	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9f8:	4413      	add	r3, r2
 800a9fa:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800a9fc:	2b7d      	cmp	r3, #125	; 0x7d
 800a9fe:	f000 809f 	beq.w	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa0a:	4413      	add	r3, r2
 800aa0c:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800aa0e:	2b7b      	cmp	r3, #123	; 0x7b
 800aa10:	f000 8096 	beq.w	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa1c:	4413      	add	r3, r2
 800aa1e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800aa20:	2b28      	cmp	r3, #40	; 0x28
 800aa22:	f000 808d 	beq.w	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa2e:	4413      	add	r3, r2
 800aa30:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800aa32:	2b29      	cmp	r3, #41	; 0x29
 800aa34:	f000 8084 	beq.w	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa40:	4413      	add	r3, r2
 800aa42:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800aa44:	2b60      	cmp	r3, #96	; 0x60
 800aa46:	d07b      	beq.n	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa50:	4413      	add	r3, r2
 800aa52:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800aa54:	2b27      	cmp	r3, #39	; 0x27
 800aa56:	d073      	beq.n	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa60:	4413      	add	r3, r2
 800aa62:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800aa64:	2b21      	cmp	r3, #33	; 0x21
 800aa66:	d06b      	beq.n	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa70:	4413      	add	r3, r2
 800aa72:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800aa74:	2b23      	cmp	r3, #35	; 0x23
 800aa76:	d063      	beq.n	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa80:	4413      	add	r3, r2
 800aa82:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800aa84:	2b24      	cmp	r3, #36	; 0x24
 800aa86:	d05b      	beq.n	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa90:	4413      	add	r3, r2
 800aa92:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800aa94:	2b26      	cmp	r3, #38	; 0x26
 800aa96:	d053      	beq.n	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaa0:	4413      	add	r3, r2
 800aaa2:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800aaa4:	2b40      	cmp	r3, #64	; 0x40
 800aaa6:	d04b      	beq.n	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aab0:	4413      	add	r3, r2
 800aab2:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800aab4:	2b5e      	cmp	r3, #94	; 0x5e
 800aab6:	d043      	beq.n	800ab40 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '%'))
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aac0:	4413      	add	r3, r2
 800aac2:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800aac4:	2b25      	cmp	r3, #37	; 0x25
 800aac6:	d03b      	beq.n	800ab40 <_fx_directory_free_search+0x2c4>
        {
            continue;
        }
        /* Check for long filename special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aad0:	4413      	add	r3, r2
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	2b2b      	cmp	r3, #43	; 0x2b
 800aad6:	d027      	beq.n	800ab28 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aae0:	4413      	add	r3, r2
 800aae2:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800aae4:	2b2c      	cmp	r3, #44	; 0x2c
 800aae6:	d01f      	beq.n	800ab28 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaf0:	4413      	add	r3, r2
 800aaf2:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800aaf4:	2b3b      	cmp	r3, #59	; 0x3b
 800aaf6:	d017      	beq.n	800ab28 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab00:	4413      	add	r3, r2
 800ab02:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800ab04:	2b3d      	cmp	r3, #61	; 0x3d
 800ab06:	d00f      	beq.n	800ab28 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab10:	4413      	add	r3, r2
 800ab12:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800ab14:	2b5b      	cmp	r3, #91	; 0x5b
 800ab16:	d007      	beq.n	800ab28 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab20:	4413      	add	r3, r2
 800ab22:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800ab24:	2b5d      	cmp	r3, #93	; 0x5d
 800ab26:	d103      	bne.n	800ab30 <_fx_directory_free_search+0x2b4>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	615a      	str	r2, [r3, #20]
 800ab2e:	e008      	b.n	800ab42 <_fx_directory_free_search+0x2c6>
        }
        /* Something is wrong with the supplied name.  */
        else
        {
            return(FX_INVALID_NAME);
 800ab30:	230c      	movs	r3, #12
 800ab32:	e2dd      	b.n	800b0f0 <_fx_directory_free_search+0x874>
            continue;
 800ab34:	bf00      	nop
 800ab36:	e004      	b.n	800ab42 <_fx_directory_free_search+0x2c6>
            continue;
 800ab38:	bf00      	nop
 800ab3a:	e002      	b.n	800ab42 <_fx_directory_free_search+0x2c6>
            continue;
 800ab3c:	bf00      	nop
 800ab3e:	e000      	b.n	800ab42 <_fx_directory_free_search+0x2c6>
            continue;
 800ab40:	bf00      	nop
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800ab42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab46:	3301      	adds	r3, #1
 800ab48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab54:	4413      	add	r3, r2
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f47f aeb9 	bne.w	800a8d0 <_fx_directory_free_search+0x54>
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 800ab5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d009      	beq.n	800ab7a <_fx_directory_free_search+0x2fe>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 800ab66:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ab6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	2b04      	cmp	r3, #4
 800ab72:	d902      	bls.n	800ab7a <_fx_directory_free_search+0x2fe>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	2201      	movs	r2, #1
 800ab78:	615a      	str	r2, [r3, #20]
        }
    }

    /* Calculate the total entries needed.  */
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 800ab7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab7e:	2b0c      	cmp	r3, #12
 800ab80:	d818      	bhi.n	800abb4 <_fx_directory_free_search+0x338>
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d114      	bne.n	800abb4 <_fx_directory_free_search+0x338>
    {

        /* Initialize the total entries to 1.  */
        total_entries = 1;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Check for special instance of long file name.  */
        if ((j >= 9) || ((i - j) >= 9))
 800ab90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab94:	2b08      	cmp	r3, #8
 800ab96:	d806      	bhi.n	800aba6 <_fx_directory_free_search+0x32a>
 800ab98:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ab9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	2b08      	cmp	r3, #8
 800aba4:	d928      	bls.n	800abf8 <_fx_directory_free_search+0x37c>
        {

            /* The dot is after 8 character or there is no dot and the name
               is greater than 8 character. */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	2201      	movs	r2, #1
 800abaa:	615a      	str	r2, [r3, #20]
            total_entries = 2;
 800abac:	2302      	movs	r3, #2
 800abae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((j >= 9) || ((i - j) >= 9))
 800abb2:	e021      	b.n	800abf8 <_fx_directory_free_search+0x37c>
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 800abb4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800abb8:	4b95      	ldr	r3, [pc, #596]	; (800ae10 <_fx_directory_free_search+0x594>)
 800abba:	fba3 2301 	umull	r2, r3, r3, r1
 800abbe:	089a      	lsrs	r2, r3, #2
 800abc0:	4613      	mov	r3, r2
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	1aca      	subs	r2, r1, r3
 800abcc:	2a00      	cmp	r2, #0
 800abce:	d109      	bne.n	800abe4 <_fx_directory_free_search+0x368>
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 800abd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abd4:	4a8e      	ldr	r2, [pc, #568]	; (800ae10 <_fx_directory_free_search+0x594>)
 800abd6:	fba2 2303 	umull	r2, r3, r2, r3
 800abda:	089b      	lsrs	r3, r3, #2
 800abdc:	3301      	adds	r3, #1
 800abde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800abe2:	e00a      	b.n	800abfa <_fx_directory_free_search+0x37e>
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 800abe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abe8:	4a89      	ldr	r2, [pc, #548]	; (800ae10 <_fx_directory_free_search+0x594>)
 800abea:	fba2 2303 	umull	r2, r3, r2, r3
 800abee:	089b      	lsrs	r3, r3, #2
 800abf0:	3302      	adds	r3, #2
 800abf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800abf6:	e000      	b.n	800abfa <_fx_directory_free_search+0x37e>
        if ((j >= 9) || ((i - j) >= 9))
 800abf8:	bf00      	nop
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00c      	beq.n	800ac1e <_fx_directory_free_search+0x3a2>

        /* Search for a free entry in a sub-directory.  */

        /* Pickup the number of entries in this directory.  This was placed
           into the unused file size field.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 800ac0e:	6a3b      	ldr	r3, [r7, #32]
 800ac10:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Ensure that the search directory's last search cluster is cleared.  */
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800ac12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac14:	2200      	movs	r2, #0
 800ac16:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the initial index to 2, since the first two directory entries are
           always allocated.  */
        directory_index =  2;
 800ac18:	2302      	movs	r3, #2
 800ac1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac1c:	e006      	b.n	800ac2c <_fx_directory_free_search+0x3b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac22:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 800ac24:	2300      	movs	r3, #0
 800ac26:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Set the initial index to 0, since the first entry of the root directory is valid.  */
        directory_index =  0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    free_entry_start = directory_entries;
 800ac2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac2e:	657b      	str	r3, [r7, #84]	; 0x54
    do
    {

        /* Read an entry from the directory.  */
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 800ac30:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac3a:	f7fe fc5d 	bl	80094f8 <_fx_directory_entry_read>
 800ac3e:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Check for error status.  */
        if (status != FX_SUCCESS)
 800ac40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <_fx_directory_free_search+0x3ce>
        {
            return(status);
 800ac46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac48:	e252      	b.n	800b0f0 <_fx_directory_free_search+0x874>
        }

        /* Determine if this is an empty entry.  */
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	2be5      	cmp	r3, #229	; 0xe5
 800ac52:	d103      	bne.n	800ac5c <_fx_directory_free_search+0x3e0>
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	791b      	ldrb	r3, [r3, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d004      	beq.n	800ac66 <_fx_directory_free_search+0x3ea>
            ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE))
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d16b      	bne.n	800ad3e <_fx_directory_free_search+0x4c2>
        {

            /* Determine how many entries are needed.  */
            if (total_entries > 1)
 800ac66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d91a      	bls.n	800aca4 <_fx_directory_free_search+0x428>
            {

                /* Multiple entries are needed for long file names.  Mark this
                   entry as free. */
                if (entry_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d115      	bne.n	800aca4 <_fx_directory_free_search+0x428>
                {

                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	615a      	str	r2, [r3, #20]
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	23e5      	movs	r3, #229	; 0xe5
 800ac84:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	1c5a      	adds	r2, r3, #1
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	7013      	strb	r3, [r2, #0]

                    /* Write out the directory entry.  */
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 800ac90:	69f9      	ldr	r1, [r7, #28]
 800ac92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac94:	f7fe ffb6 	bl	8009c04 <_fx_directory_entry_write>
 800ac98:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if(status != FX_SUCCESS)
 800ac9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d001      	beq.n	800aca4 <_fx_directory_free_search+0x428>
                    {  
                        return(status);
 800aca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aca2:	e225      	b.n	800b0f0 <_fx_directory_free_search+0x874>
                       i.e. entries must be logically contiguous.  */
                }
            }

            /* Determine if we are at the first free entry.  */
            if (free_entry_start == directory_entries)
 800aca4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d109      	bne.n	800acc0 <_fx_directory_free_search+0x444>
            {

                /* Remember the start of the free entry.  */
                free_entry_start =  directory_index;
 800acac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acae:	657b      	str	r3, [r7, #84]	; 0x54
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800acb6:	4613      	mov	r3, r2
 800acb8:	67fb      	str	r3, [r7, #124]	; 0x7c
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acbe:	67bb      	str	r3, [r7, #120]	; 0x78
            }

            /* Determine if there are enough free entries to satisfy the request.  */
            if ((directory_index - free_entry_start + 1) >= total_entries)
 800acc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	3301      	adds	r3, #1
 800acc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800accc:	429a      	cmp	r2, r3
 800acce:	d838      	bhi.n	800ad42 <_fx_directory_free_search+0x4c6>

                /* Found an empty slot.  Most pertinent information is already
                   in the entry structure.  */

                /* Setup the the sector and the offset.  */
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 800acd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acd2:	2200      	movs	r2, #0
 800acd4:	461c      	mov	r4, r3
 800acd6:	4615      	mov	r5, r2
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ace2:	649a      	str	r2, [r3, #72]	; 0x48

                /* Initialize the additional directory entries.  */
                entry_ptr -> fx_dir_entry_reserved =            0;
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	2200      	movs	r2, #0
 800ace8:	775a      	strb	r2, [r3, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	2200      	movs	r2, #0
 800acee:	779a      	strb	r2, [r3, #30]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800acf0:	f3ef 8310 	mrs	r3, PRIMASK
 800acf4:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
    return(posture);
 800acf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800acf8:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800acfa:	b672      	cpsid	i
#endif
    return(int_posture);
 800acfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Lockout interrupts for time/date access.  */
                FX_DISABLE_INTS
 800acfe:	64bb      	str	r3, [r7, #72]	; 0x48

                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 800ad00:	4b44      	ldr	r3, [pc, #272]	; (800ae14 <_fx_directory_free_search+0x598>)
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	621a      	str	r2, [r3, #32]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 800ad08:	4b43      	ldr	r3, [pc, #268]	; (800ae18 <_fx_directory_free_search+0x59c>)
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	625a      	str	r2, [r3, #36]	; 0x24
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 800ad10:	4b41      	ldr	r3, [pc, #260]	; (800ae18 <_fx_directory_free_search+0x59c>)
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	629a      	str	r2, [r3, #40]	; 0x28
 800ad18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad1e:	f383 8810 	msr	PRIMASK, r3
}
 800ad22:	bf00      	nop

                /* Restore interrupts.  */
                FX_RESTORE_INTS

                /* Determine if a long file name is present.  */
                if (total_entries == 1)
 800ad24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d103      	bne.n	800ad34 <_fx_directory_free_search+0x4b8>
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	615a      	str	r2, [r3, #20]
 800ad32:	e002      	b.n	800ad3a <_fx_directory_free_search+0x4be>
                }
                else
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	2201      	movs	r2, #1
 800ad38:	615a      	str	r2, [r3, #20]
                }

                /* Return a successful completion.  */
                return(FX_SUCCESS);
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	e1d8      	b.n	800b0f0 <_fx_directory_free_search+0x874>
        }
        else
        {

            /* Reset the free entry start.  */
            free_entry_start =  directory_entries;
 800ad3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad40:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Move to the next entry.  */
        directory_index++;
 800ad42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad44:	3301      	adds	r3, #1
 800ad46:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if we have exceeded the number of entries in the current directory.  */
        if (directory_index >= directory_entries)
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	f200 81c9 	bhi.w	800b0e4 <_fx_directory_free_search+0x868>
        {

            /* Calculate how many sectors we need for the new directory entry.  */
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800ad52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ad56:	015a      	lsls	r2, r3, #5
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad5c:	4413      	add	r3, r2
 800ad5e:	1e5a      	subs	r2, r3, #1
                                                                            media_ptr -> fx_media_bytes_per_sector;
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800ad64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad68:	653b      	str	r3, [r7, #80]	; 0x50

            /* Now calculate how many clusters we need for the new directory entry.  */
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad70:	4413      	add	r3, r2
 800ad72:	1e5a      	subs	r2, r3, #1
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad7c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Not enough empty entries were found.  If the specified directory is a sub-directory,
               attempt to allocate another cluster to it.  */
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters >= clusters_needed))
 800ad7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d104      	bne.n	800ad8e <_fx_directory_free_search+0x512>
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 81ab 	beq.w	800b0e4 <_fx_directory_free_search+0x868>
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad94:	429a      	cmp	r2, r3
 800ad96:	f200 81a5 	bhi.w	800b0e4 <_fx_directory_free_search+0x868>
            {

                /* Search for the additional clusters we need.  */
                first_new_cluster =  0;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	66bb      	str	r3, [r7, #104]	; 0x68
                total_clusters =     media_ptr -> fx_media_total_clusters;
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada2:	66fb      	str	r3, [r7, #108]	; 0x6c
                last_cluster =       0;
 800ada4:	2300      	movs	r3, #0
 800ada6:	667b      	str	r3, [r7, #100]	; 0x64
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adae:	677b      	str	r3, [r7, #116]	; 0x74
                clusters =           clusters_needed;
 800adb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adb2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Loop to find the needed clusters.  */
                while (clusters)
 800adb4:	e10b      	b.n	800afce <_fx_directory_free_search+0x752>
                {

                    /* Decrease the cluster count.  */
                    clusters--;
 800adb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adb8:	3b01      	subs	r3, #1
 800adba:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Loop to find the first available cluster.  */
                    do
                    {

                        /* Make sure we stop looking after one pass through the FAT table.  */
                        if (!total_clusters)
 800adbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d101      	bne.n	800adc6 <_fx_directory_free_search+0x54a>
                        {

                            /* Something is wrong with the media - the desired clusters were
                               not found in the FAT table.  */
                            return(FX_NO_MORE_SPACE);
 800adc2:	230a      	movs	r3, #10
 800adc4:	e194      	b.n	800b0f0 <_fx_directory_free_search+0x874>
                        }

                        /* Read FAT entry.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800adc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800adca:	461a      	mov	r2, r3
 800adcc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800adce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800add0:	f005 f874 	bl	800febc <_fx_utility_FAT_entry_read>
 800add4:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad status.  */
                        if (status != FX_SUCCESS)
 800add6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800add8:	2b00      	cmp	r3, #0
 800adda:	d001      	beq.n	800ade0 <_fx_directory_free_search+0x564>
                        {

                            /* Return the bad status.  */
                            return(status);
 800addc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adde:	e187      	b.n	800b0f0 <_fx_directory_free_search+0x874>
                        }

                        /* Decrement the total cluster count.  */
                        total_clusters--;
 800ade0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade2:	3b01      	subs	r3, #1
 800ade4:	66fb      	str	r3, [r7, #108]	; 0x6c

                        /* Determine if the FAT entry is free.  */
                        if (FAT_value == FX_FREE_CLUSTER)
 800ade6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d117      	bne.n	800ae1c <_fx_directory_free_search+0x5a0>
                        {

                            /* Move cluster search pointer forward.  */
                            media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800adec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adee:	1c5a      	adds	r2, r3, #1
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                            /* Determine if this needs to be wrapped.  */
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae00:	3302      	adds	r3, #2
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d316      	bcc.n	800ae34 <_fx_directory_free_search+0x5b8>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	2202      	movs	r2, #2
 800ae0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                            }

                            /* Break this loop.  */
                            break;
 800ae0e:	e011      	b.n	800ae34 <_fx_directory_free_search+0x5b8>
 800ae10:	4ec4ec4f 	.word	0x4ec4ec4f
 800ae14:	24014c34 	.word	0x24014c34
 800ae18:	24014c30 	.word	0x24014c30
                        }
                        else
                        {

                            /* FAT entry is not free... Advance the FAT index.  */
                            FAT_index++;
 800ae1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae1e:	3301      	adds	r3, #1
 800ae20:	677b      	str	r3, [r7, #116]	; 0x74

                            /* Determine if we need to wrap the FAT index around.  */
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae26:	3302      	adds	r3, #2
 800ae28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d3c6      	bcc.n	800adbc <_fx_directory_free_search+0x540>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                FAT_index =  FX_FAT_ENTRY_START;
 800ae2e:	2302      	movs	r3, #2
 800ae30:	677b      	str	r3, [r7, #116]	; 0x74
                        if (!total_clusters)
 800ae32:	e7c3      	b.n	800adbc <_fx_directory_free_search+0x540>
                            break;
 800ae34:	bf00      	nop

                    /* We found an available cluster.  We now need to clear all of entries in
                       each of the cluster's sectors.  */

                    /* Calculate the logical sector of this cluster.  */
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	6d19      	ldr	r1, [r3, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800ae3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae3c:	1e9a      	subs	r2, r3, #2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800ae42:	fb02 f303 	mul.w	r3, r2, r3
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800ae46:	440b      	add	r3, r1
 800ae48:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Pickup the number of sectors for the next directory cluster.  */
                    sectors =  media_ptr -> fx_media_sectors_per_cluster;
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae4e:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Read the logical sector just for cache reasons.  */
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ae50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae52:	2200      	movs	r2, #0
 800ae54:	613b      	str	r3, [r7, #16]
 800ae56:	617a      	str	r2, [r7, #20]
                                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	9302      	str	r3, [sp, #8]
 800ae60:	2301      	movs	r3, #1
 800ae62:	9301      	str	r3, [sp, #4]
 800ae64:	9200      	str	r2, [sp, #0]
 800ae66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ae6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae6c:	f006 fc34 	bl	80116d8 <_fx_utility_logical_sector_read>
 800ae70:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800ae72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <_fx_directory_free_search+0x600>
                    {

                        /* Return the error status.  */
                        return(status);
 800ae78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae7a:	e139      	b.n	800b0f0 <_fx_directory_free_search+0x874>
                    }

                    /* Clear the entire first sector of the new sub-directory cluster.  */
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    i =  0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800ae8a:	e00d      	b.n	800aea8 <_fx_directory_free_search+0x62c>
                    {

                        /* Clear 4 bytes.  */
                        *((ULONG *)work_ptr) =  (ULONG)0;
 800ae8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]

                        /* Increment pointer.  */
                        work_ptr =  work_ptr + sizeof(ULONG);
 800ae94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae98:	3304      	adds	r3, #4
 800ae9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                        /* Increment counter.  */
                        i =  i + (ULONG)sizeof(ULONG);
 800ae9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aea2:	3304      	adds	r3, #4
 800aea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d3eb      	bcc.n	800ae8c <_fx_directory_free_search+0x610>
                    }

                    /* Write the logical sector to ensure the zeros are written.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800aeb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	60bb      	str	r3, [r7, #8]
 800aeba:	60fa      	str	r2, [r7, #12]
                                                               media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800aec0:	2303      	movs	r3, #3
 800aec2:	9302      	str	r3, [sp, #8]
 800aec4:	2301      	movs	r3, #1
 800aec6:	9301      	str	r3, [sp, #4]
 800aec8:	9200      	str	r2, [sp, #0]
 800aeca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aed0:	f006 fe96 	bl	8011c00 <_fx_utility_logical_sector_write>
 800aed4:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Determine if the write was successful.  */
                    if (status != FX_SUCCESS)
 800aed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d001      	beq.n	800aee0 <_fx_directory_free_search+0x664>
                    {

                        /* Return the error code.  */
                        return(status);
 800aedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aede:	e107      	b.n	800b0f0 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if there are more sectors to clear in the first cluster of the new
                       sub-directory.  */
                    if (sectors > 1)
 800aee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d95a      	bls.n	800af9c <_fx_directory_free_search+0x720>

                        /* Yes, invalidate all cached sectors that are contained in the newly allocated first
                           cluster of the directory.  */

                        /* Flush the internal logical sector cache.  */
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 800aee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aee8:	3301      	adds	r3, #1
 800aeea:	2200      	movs	r2, #0
 800aeec:	603b      	str	r3, [r7, #0]
 800aeee:	607a      	str	r2, [r7, #4]
 800aef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aef2:	3b01      	subs	r3, #1
 800aef4:	2200      	movs	r2, #0
 800aef6:	4698      	mov	r8, r3
 800aef8:	4691      	mov	r9, r2
 800aefa:	2301      	movs	r3, #1
 800aefc:	9302      	str	r3, [sp, #8]
 800aefe:	e9cd 8900 	strd	r8, r9, [sp]
 800af02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af08:	f006 f9d0 	bl	80112ac <_fx_utility_logical_sector_flush>
 800af0c:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Determine if the flush was successful.  */
                        if (status != FX_SUCCESS)
 800af0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <_fx_directory_free_search+0x69c>
                        {

                            /* Return the error code.  */
                            return(status);
 800af14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af16:	e0eb      	b.n	800b0f0 <_fx_directory_free_search+0x874>
                        }

                        /* Clear all additional sectors of new sub-directory.  */
                        sectors--;
 800af18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af1a:	3b01      	subs	r3, #1
 800af1c:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800af1e:	e03a      	b.n	800af96 <_fx_directory_free_search+0x71a>
                        {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                            /* Increment the number of driver write sector(s) requests.  */
                            media_ptr -> fx_media_driver_write_requests++;
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800af26:	1c5a      	adds	r2, r3, #1
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                            /* Build Write request to the driver.  */
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800af2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af30:	2201      	movs	r2, #1
 800af32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800af36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af38:	2290      	movs	r2, #144	; 0x90
 800af3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800af3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af40:	689a      	ldr	r2, [r3, #8]
 800af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 800af48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af4c:	441a      	add	r2, r3
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                            media_ptr -> fx_media_driver_sectors =          1;
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	2201      	movs	r2, #1
 800af58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5e:	2203      	movs	r2, #3
 800af60:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                            /* Set the system write flag since we are writing a directory sector.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af66:	2201      	movs	r2, #1
 800af68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* If trace is enabled, insert this event into the trace buffer.  */
                            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, ((ULONG)logical_sector) + ((ULONG)sectors), 1, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                            /* Invoke the driver to write the sector.  */
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800af72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af74:	4798      	blx	r3

                            /* Clear the system write flag.  */
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	2200      	movs	r2, #0
 800af7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* Determine if an error occurred.  */
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800af7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af84:	2b00      	cmp	r3, #0
 800af86:	d003      	beq.n	800af90 <_fx_directory_free_search+0x714>
                            {

                                /* Return error code.  */
                                return(media_ptr -> fx_media_driver_status);
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af8e:	e0af      	b.n	800b0f0 <_fx_directory_free_search+0x874>
                            }

                            /* Decrease the number of sectors to clear.  */
                            sectors--;
 800af90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af92:	3b01      	subs	r3, #1
 800af94:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800af96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d1c1      	bne.n	800af20 <_fx_directory_free_search+0x6a4>
                        }
                    }

                    /* Determine if we have found the first new cluster yet.  */
                    if (first_new_cluster == 0)
 800af9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <_fx_directory_free_search+0x72a>
                    {

                        /* Remember the first new cluster. */
                        first_new_cluster =  FAT_index;
 800afa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afa4:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check for a valid last cluster to link.  */
                    if (last_cluster)
 800afa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00a      	beq.n	800afc2 <_fx_directory_free_search+0x746>
                    {

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800afac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800afae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800afb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afb2:	f005 f9ac 	bl	801030e <_fx_utility_FAT_entry_write>
 800afb6:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad FAT write status.  */
                        if (status !=  FX_SUCCESS)
 800afb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <_fx_directory_free_search+0x746>
                        {

                            /* Return the bad status.  */
                            return(status);
 800afbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afc0:	e096      	b.n	800b0f0 <_fx_directory_free_search+0x874>
                        }
                    }

                    /* Otherwise, remember the new FAT index as the last.  */
                    last_cluster =  FAT_index;
 800afc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afc4:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afcc:	677b      	str	r3, [r7, #116]	; 0x74
                while (clusters)
 800afce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f47f aef0 	bne.w	800adb6 <_fx_directory_free_search+0x53a>
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800afdc:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800afe0:	461a      	mov	r2, r3
 800afe2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800afe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afe6:	f005 f992 	bl	801030e <_fx_utility_FAT_entry_write>
 800afea:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800afec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <_fx_directory_free_search+0x77a>
                {

                    /* Return the bad status.  */
                    return(status);
 800aff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aff4:	e07c      	b.n	800b0f0 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif

                /* Now the new cluster needs to be linked to the sub-directory.  */
                if (search_dir_ptr)
 800aff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <_fx_directory_free_search+0x788>
                {
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 800affc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800affe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b000:	673b      	str	r3, [r7, #112]	; 0x70
 800b002:	e002      	b.n	800b00a <_fx_directory_free_search+0x78e>
                }
                else
                {
                    cluster = media_ptr -> fx_media_root_cluster_32;
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b008:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Initialize loop variables.  */
                last_cluster =  0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	667b      	str	r3, [r7, #100]	; 0x64
                i =  0;
 800b00e:	2300      	movs	r3, #0
 800b010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* Follow the link of FAT entries.  */
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b014:	e024      	b.n	800b060 <_fx_directory_free_search+0x7e4>
                {

                    /* Read the current cluster entry from the FAT.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 800b016:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b01a:	461a      	mov	r2, r3
 800b01c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b01e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b020:	f004 ff4c 	bl	800febc <_fx_utility_FAT_entry_read>
 800b024:	64f8      	str	r0, [r7, #76]	; 0x4c
                    i++;
 800b026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b02a:	3301      	adds	r3, #1
 800b02c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800b030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <_fx_directory_free_search+0x7be>
                    {

                        /* Return the error status.  */
                        return(status);
 800b036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b038:	e05a      	b.n	800b0f0 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if the FAT read was invalid.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 800b03a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d909      	bls.n	800b054 <_fx_directory_free_search+0x7d8>
 800b040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b042:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b044:	429a      	cmp	r2, r3
 800b046:	d005      	beq.n	800b054 <_fx_directory_free_search+0x7d8>
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b050:	429a      	cmp	r2, r3
 800b052:	d901      	bls.n	800b058 <_fx_directory_free_search+0x7dc>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800b054:	2303      	movs	r3, #3
 800b056:	e04b      	b.n	800b0f0 <_fx_directory_free_search+0x874>
                    }

                    /* Save the last valid cluster.  */
                    last_cluster =  cluster;
 800b058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b05a:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Setup for the next cluster.  */
                    cluster =  FAT_value;
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	673b      	str	r3, [r7, #112]	; 0x70
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b066:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800b06a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d3d2      	bcc.n	800b016 <_fx_directory_free_search+0x79a>
                }

                /* Decrease the available clusters in the media.  */
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b076:	1ad2      	subs	r2, r2, r3
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Increase the number of directory entries.  */
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b082:	fb03 f202 	mul.w	r2, r3, r2
 800b086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08a:	fb02 f303 	mul.w	r3, r2, r3
 800b08e:	095b      	lsrs	r3, r3, #5
 800b090:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b092:	4413      	add	r3, r2
 800b094:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Determine if we need to reset the free entry start since we changed the
                   number of directory entries.  If the last entry was not free, then we
                   should definitely reset the free entry start.  */
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	2be5      	cmp	r3, #229	; 0xe5
 800b09e:	d103      	bne.n	800b0a8 <_fx_directory_free_search+0x82c>
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	791b      	ldrb	r3, [r3, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <_fx_directory_free_search+0x830>
                {

                    /* Reset the free entry start to indicate we haven't found a starting free entry yet.  */
                    free_entry_start =  directory_entries;
 800b0a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0aa:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Update the directory size field.  */
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 800b0ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	469a      	mov	sl, r3
 800b0b2:	4693      	mov	fp, r2
 800b0b4:	6a3b      	ldr	r3, [r7, #32]
 800b0b6:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38

                /* Defer the update of the FAT entry and the last cluster of the current
                   directory entry until after the new cluster is initialized and written out.  */

                /* Determine if a FAT32 is present.  */
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d005      	beq.n	800b0ce <_fx_directory_free_search+0x852>
 800b0c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d102      	bne.n	800b0ce <_fx_directory_free_search+0x852>
                {

                    /* Change root directory entry count - FAT32 has a variable sized root directory.  */
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0cc:	679a      	str	r2, [r3, #120]	; 0x78
                }

                /* At this point, link up the last cluster with the new cluster.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 800b0ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b0d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b0d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0d4:	f005 f91b 	bl	801030e <_fx_utility_FAT_entry_write>
 800b0d8:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800b0da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <_fx_directory_free_search+0x868>
                {

                    /* Return the error status.  */
                    return(status);
 800b0e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0e2:	e005      	b.n	800b0f0 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif
            }
        }
    } while (directory_index < directory_entries);
 800b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	f63f ada1 	bhi.w	800ac30 <_fx_directory_free_search+0x3b4>

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 800b0ee:	230a      	movs	r3, #10
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3790      	adds	r7, #144	; 0x90
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0fa:	bf00      	nop

0800b0fc <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	2200      	movs	r2, #0
 800b10a:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	2b5c      	cmp	r3, #92	; 0x5c
 800b112:	d003      	beq.n	800b11c <_fx_directory_name_extract+0x20>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	2b2f      	cmp	r3, #47	; 0x2f
 800b11a:	d106      	bne.n	800b12a <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	3301      	adds	r3, #1
 800b120:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 800b122:	e002      	b.n	800b12a <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	3301      	adds	r3, #1
 800b128:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b20      	cmp	r3, #32
 800b130:	d0f8      	beq.n	800b124 <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 800b132:	2300      	movs	r3, #0
 800b134:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800b136:	e015      	b.n	800b164 <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b5c      	cmp	r3, #92	; 0x5c
 800b13e:	d017      	beq.n	800b170 <_fx_directory_name_extract+0x74>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2b2f      	cmp	r3, #47	; 0x2f
 800b146:	d013      	beq.n	800b170 <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2bff      	cmp	r3, #255	; 0xff
 800b14c:	d00f      	beq.n	800b16e <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	1c5a      	adds	r2, r3, #1
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	440a      	add	r2, r1
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3301      	adds	r3, #1
 800b162:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1e5      	bne.n	800b138 <_fx_directory_name_extract+0x3c>
 800b16c:	e000      	b.n	800b170 <_fx_directory_name_extract+0x74>
            break;
 800b16e:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4413      	add	r3, r2
 800b176:	2200      	movs	r2, #0
 800b178:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00b      	beq.n	800b198 <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	3b01      	subs	r3, #1
 800b184:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 800b186:	e007      	b.n	800b198 <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	4413      	add	r3, r2
 800b18e:	2200      	movs	r2, #0
 800b190:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3b01      	subs	r3, #1
 800b196:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	4413      	add	r3, r2
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	2b20      	cmp	r3, #32
 800b1a2:	d0f1      	beq.n	800b188 <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 800b1b0:	687b      	ldr	r3, [r7, #4]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3714      	adds	r7, #20
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
	...

0800b1c0 <_fx_directory_search>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 800b1c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1c4:	b0c0      	sub	sp, #256	; 0x100
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b1ca:	62b9      	str	r1, [r7, #40]	; 0x28
 800b1cc:	627a      	str	r2, [r7, #36]	; 0x24
 800b1ce:	623b      	str	r3, [r7, #32]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
CHAR         *original_name =  name_ptr;
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ec:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 800b1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f2:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800b1f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d003      	beq.n	800b208 <_fx_directory_search+0x48>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	2300      	movs	r3, #0
 800b206:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	2b5c      	cmp	r3, #92	; 0x5c
 800b20e:	d003      	beq.n	800b218 <_fx_directory_search+0x58>
 800b210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b2f      	cmp	r3, #47	; 0x2f
 800b216:	d103      	bne.n	800b220 <_fx_directory_search+0x60>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 800b218:	2300      	movs	r3, #0
 800b21a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b21e:	e044      	b.n	800b2aa <_fx_directory_search+0xea>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 800b220:	4bab      	ldr	r3, [pc, #684]	; (800b4d0 <_fx_directory_search+0x310>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d022      	beq.n	800b272 <_fx_directory_search+0xb2>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 800b22c:	4ba8      	ldr	r3, [pc, #672]	; (800b4d0 <_fx_directory_search+0x310>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d016      	beq.n	800b26a <_fx_directory_search+0xaa>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 800b23c:	4ba4      	ldr	r3, [pc, #656]	; (800b4d0 <_fx_directory_search+0x310>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b244:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b248:	4619      	mov	r1, r3
 800b24a:	2370      	movs	r3, #112	; 0x70
 800b24c:	461a      	mov	r2, r3
 800b24e:	f00b f813 	bl	8016278 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 800b252:	4b9f      	ldr	r3, [pc, #636]	; (800b4d0 <_fx_directory_search+0x310>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b25a:	3370      	adds	r3, #112	; 0x70
 800b25c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

                /* Set the internal pointer to the search directory as well.  */
                search_dir_ptr =  &search_dir;
 800b260:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b264:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b268:	e01f      	b.n	800b2aa <_fx_directory_search+0xea>
            }
            else
            {

                /* We are searching in the root directory.  */
                search_dir_ptr =  FX_NULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b270:	e01b      	b.n	800b2aa <_fx_directory_search+0xea>
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 800b272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b274:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d012      	beq.n	800b2a4 <_fx_directory_search+0xe4>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 800b27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b280:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b284:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 800b288:	2370      	movs	r3, #112	; 0x70
 800b28a:	461a      	mov	r2, r3
 800b28c:	f00a fff4 	bl	8016278 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 800b290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b292:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800b296:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 800b29a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b29e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b2a2:	e002      	b.n	800b2aa <_fx_directory_search+0xea>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800b2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ac:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f000 81b9 	beq.w	800b628 <_fx_directory_search+0x468>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	2b5c      	cmp	r3, #92	; 0x5c
 800b2c2:	d02d      	beq.n	800b320 <_fx_directory_search+0x160>
 800b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	2b2f      	cmp	r3, #47	; 0x2f
 800b2ca:	d14c      	bne.n	800b366 <_fx_directory_search+0x1a6>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800b2cc:	e028      	b.n	800b320 <_fx_directory_search+0x160>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 800b2ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2d4:	4413      	add	r3, r2
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                beta =   media_ptr -> fx_media_last_found_name[v];
 800b2dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 800b2ee:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b2f2:	2b5c      	cmp	r3, #92	; 0x5c
 800b2f4:	d102      	bne.n	800b2fc <_fx_directory_search+0x13c>
                {
                    alpha =  '/';
 800b2f6:	232f      	movs	r3, #47	; 0x2f
 800b2f8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }
                if (beta == '\\')
 800b2fc:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b300:	2b5c      	cmp	r3, #92	; 0x5c
 800b302:	d102      	bne.n	800b30a <_fx_directory_search+0x14a>
                {
                    beta =  '/';
 800b304:	232f      	movs	r3, #47	; 0x2f
 800b306:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                }

                /* Is the name the same?  */
                if (alpha != beta)
 800b30a:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b30e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b312:	429a      	cmp	r2, r3
 800b314:	d110      	bne.n	800b338 <_fx_directory_search+0x178>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 800b316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b31a:	3301      	adds	r3, #1
 800b31c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800b320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b324:	2bfe      	cmp	r3, #254	; 0xfe
 800b326:	d808      	bhi.n	800b33a <_fx_directory_search+0x17a>
 800b328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b32a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b32e:	4413      	add	r3, r2
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1cb      	bne.n	800b2ce <_fx_directory_search+0x10e>
 800b336:	e000      	b.n	800b33a <_fx_directory_search+0x17a>
                    break;
 800b338:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800b33a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b33c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b340:	4413      	add	r3, r2
 800b342:	7819      	ldrb	r1, [r3, #0]
 800b344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b34a:	4413      	add	r3, r2
 800b34c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	4299      	cmp	r1, r3
 800b354:	d003      	beq.n	800b35e <_fx_directory_search+0x19e>
            {
                match =  FX_FALSE;
 800b356:	2300      	movs	r3, #0
 800b358:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800b35c:	e0cf      	b.n	800b4fe <_fx_directory_search+0x33e>
            }
            else
            {
                match =  FX_TRUE;
 800b35e:	2301      	movs	r3, #1
 800b360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800b364:	e0cb      	b.n	800b4fe <_fx_directory_search+0x33e>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 800b366:	2301      	movs	r3, #1
 800b368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 800b36c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b370:	2b00      	cmp	r3, #0
 800b372:	d043      	beq.n	800b3fc <_fx_directory_search+0x23c>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800b374:	e029      	b.n	800b3ca <_fx_directory_search+0x20a>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 800b376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   path_ptr[v];
 800b388:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b38c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b390:	4413      	add	r3, r2
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800b398:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b39c:	2b5c      	cmp	r3, #92	; 0x5c
 800b39e:	d102      	bne.n	800b3a6 <_fx_directory_search+0x1e6>
                    {
                        alpha =  '/';
 800b3a0:	232f      	movs	r3, #47	; 0x2f
 800b3a2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800b3a6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b3aa:	2b5c      	cmp	r3, #92	; 0x5c
 800b3ac:	d102      	bne.n	800b3b4 <_fx_directory_search+0x1f4>
                    {
                        beta =  '/';
 800b3ae:	232f      	movs	r3, #47	; 0x2f
 800b3b0:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800b3b4:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b3b8:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d111      	bne.n	800b3e4 <_fx_directory_search+0x224>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800b3c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800b3ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ce:	2bfe      	cmp	r3, #254	; 0xfe
 800b3d0:	d809      	bhi.n	800b3e6 <_fx_directory_search+0x226>
 800b3d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b3d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3da:	4413      	add	r3, r2
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1c9      	bne.n	800b376 <_fx_directory_search+0x1b6>
 800b3e2:	e000      	b.n	800b3e6 <_fx_directory_search+0x226>
                        break;
 800b3e4:	bf00      	nop
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 800b3e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b3ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ee:	4413      	add	r3, r2
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d002      	beq.n	800b3fc <_fx_directory_search+0x23c>
                {
                    match =  FX_FALSE;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 800b3fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b400:	2b00      	cmp	r3, #0
 800b402:	d07c      	beq.n	800b4fe <_fx_directory_search+0x33e>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800b404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b40a:	4413      	add	r3, r2
 800b40c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	2b5c      	cmp	r3, #92	; 0x5c
 800b414:	d00c      	beq.n	800b430 <_fx_directory_search+0x270>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 800b416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b41c:	4413      	add	r3, r2
 800b41e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b422:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800b424:	2b2f      	cmp	r3, #47	; 0x2f
 800b426:	d003      	beq.n	800b430 <_fx_directory_search+0x270>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 800b428:	2300      	movs	r3, #0
 800b42a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b42e:	e004      	b.n	800b43a <_fx_directory_search+0x27a>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 800b430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b434:	3301      	adds	r3, #1
 800b436:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800b440:	e02d      	b.n	800b49e <_fx_directory_search+0x2de>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 800b442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b444:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b448:	4413      	add	r3, r2
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 800b450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b456:	4413      	add	r3, r2
 800b458:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800b462:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b466:	2b5c      	cmp	r3, #92	; 0x5c
 800b468:	d102      	bne.n	800b470 <_fx_directory_search+0x2b0>
                    {
                        alpha =  '/';
 800b46a:	232f      	movs	r3, #47	; 0x2f
 800b46c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800b470:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b474:	2b5c      	cmp	r3, #92	; 0x5c
 800b476:	d102      	bne.n	800b47e <_fx_directory_search+0x2be>
                    {
                        beta =  '/';
 800b478:	232f      	movs	r3, #47	; 0x2f
 800b47a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800b47e:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b482:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b486:	429a      	cmp	r2, r3
 800b488:	d119      	bne.n	800b4be <_fx_directory_search+0x2fe>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800b48a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b48e:	3301      	adds	r3, #1
 800b490:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    j++;
 800b494:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b498:	3301      	adds	r3, #1
 800b49a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800b49e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4a2:	2bfe      	cmp	r3, #254	; 0xfe
 800b4a4:	d80c      	bhi.n	800b4c0 <_fx_directory_search+0x300>
 800b4a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b4ac:	4413      	add	r3, r2
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d005      	beq.n	800b4c0 <_fx_directory_search+0x300>
 800b4b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1c2      	bne.n	800b442 <_fx_directory_search+0x282>
 800b4bc:	e000      	b.n	800b4c0 <_fx_directory_search+0x300>
                        break;
 800b4be:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 800b4c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4c4:	2bff      	cmp	r3, #255	; 0xff
 800b4c6:	d905      	bls.n	800b4d4 <_fx_directory_search+0x314>
                {
                    match = FX_FALSE;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4ce:	e016      	b.n	800b4fe <_fx_directory_search+0x33e>
 800b4d0:	24014ebc 	.word	0x24014ebc
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 800b4d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d010      	beq.n	800b4fe <_fx_directory_search+0x33e>
 800b4dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b4e2:	4413      	add	r3, r2
 800b4e4:	7819      	ldrb	r1, [r3, #0]
 800b4e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4ec:	4413      	add	r3, r2
 800b4ee:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	4299      	cmp	r1, r3
 800b4f6:	d002      	beq.n	800b4fe <_fx_directory_search+0x33e>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 800b4fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b502:	2b00      	cmp	r3, #0
 800b504:	f000 8090 	beq.w	800b628 <_fx_directory_search+0x468>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 800b510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b514:	4610      	mov	r0, r2
 800b516:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800b51a:	2270      	movs	r2, #112	; 0x70
 800b51c:	4619      	mov	r1, r3
 800b51e:	f00a feab 	bl	8016278 <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 800b522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b524:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b528:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800b52a:	2300      	movs	r3, #0
 800b52c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b530:	e01d      	b.n	800b56e <_fx_directory_search+0x3ae>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 800b532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b536:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b53a:	4413      	add	r3, r2
 800b53c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b53e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b542:	440a      	add	r2, r1
 800b544:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 800b548:	7812      	ldrb	r2, [r2, #0]
 800b54a:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 800b54c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b554:	4413      	add	r3, r2
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d103      	bne.n	800b564 <_fx_directory_search+0x3a4>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800b55c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b560:	2bfe      	cmp	r3, #254	; 0xfe
 800b562:	d909      	bls.n	800b578 <_fx_directory_search+0x3b8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800b564:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b568:	3301      	adds	r3, #1
 800b56a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b56e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b572:	2bff      	cmp	r3, #255	; 0xff
 800b574:	d9dd      	bls.n	800b532 <_fx_directory_search+0x372>
 800b576:	e000      	b.n	800b57a <_fx_directory_search+0x3ba>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 800b578:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 800b57a:	6a3b      	ldr	r3, [r7, #32]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d041      	beq.n	800b604 <_fx_directory_search+0x444>
 800b580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b582:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800b586:	2b00      	cmp	r3, #0
 800b588:	d03c      	beq.n	800b604 <_fx_directory_search+0x444>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 800b592:	6a3a      	ldr	r2, [r7, #32]
 800b594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b596:	4610      	mov	r0, r2
 800b598:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b59c:	2270      	movs	r2, #112	; 0x70
 800b59e:	4619      	mov	r1, r3
 800b5a0:	f00a fe6a 	bl	8016278 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b5aa:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 800b5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b5b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b5bc:	e01c      	b.n	800b5f8 <_fx_directory_search+0x438>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800b5be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b5c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5c6:	441a      	add	r2, r3
 800b5c8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b5cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5d0:	440b      	add	r3, r1
 800b5d2:	7812      	ldrb	r2, [r2, #0]
 800b5d4:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 800b5d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b5da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5de:	4413      	add	r3, r2
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d103      	bne.n	800b5ee <_fx_directory_search+0x42e>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800b5e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5ea:	2bfe      	cmp	r3, #254	; 0xfe
 800b5ec:	d909      	bls.n	800b602 <_fx_directory_search+0x442>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b5ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b5f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5fc:	2bff      	cmp	r3, #255	; 0xff
 800b5fe:	d9de      	bls.n	800b5be <_fx_directory_search+0x3fe>
 800b600:	e000      	b.n	800b604 <_fx_directory_search+0x444>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 800b602:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 800b604:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d004      	beq.n	800b616 <_fx_directory_search+0x456>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 800b60c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b610:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b614:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 800b616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b618:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800b61c:	1c5a      	adds	r2, r3, #1
 800b61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b620:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 800b624:	2300      	movs	r3, #0
 800b626:	e2ff      	b.n	800bc28 <_fx_directory_search+0xa68>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800b628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b62a:	2300      	movs	r3, #0
 800b62c:	f882 33e0 	strb.w	r3, [r2, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 800b630:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b634:	2b00      	cmp	r3, #0
 800b636:	d003      	beq.n	800b640 <_fx_directory_search+0x480>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 800b638:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63e:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 800b640:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b646:	f7ff fd59 	bl	800b0fc <_fx_directory_name_extract>
 800b64a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 800b64c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b650:	2b00      	cmp	r3, #0
 800b652:	f000 80be 	beq.w	800b7d2 <_fx_directory_search+0x612>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800b656:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b65a:	2300      	movs	r3, #0
 800b65c:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 800b65e:	2300      	movs	r3, #0
 800b660:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 800b664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b66a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b66e:	e02b      	b.n	800b6c8 <_fx_directory_search+0x508>
                {

                    /* Increment the cluster count.  */
                    i++;
 800b670:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b674:	3301      	adds	r3, #1
 800b676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800b67a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b67e:	461a      	mov	r2, r3
 800b680:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800b684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b686:	f004 fc19 	bl	800febc <_fx_utility_FAT_entry_read>
 800b68a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 800b68e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b692:	2b00      	cmp	r3, #0
 800b694:	d002      	beq.n	800b69c <_fx_directory_search+0x4dc>
                    {

                        /* Return the bad status.  */
                        return(status);
 800b696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b69a:	e2c5      	b.n	800bc28 <_fx_directory_search+0xa68>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 800b69c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d90b      	bls.n	800b6bc <_fx_directory_search+0x4fc>
 800b6a4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b6a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d005      	beq.n	800b6bc <_fx_directory_search+0x4fc>
 800b6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d201      	bcs.n	800b6c0 <_fx_directory_search+0x500>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800b6bc:	2303      	movs	r3, #3
 800b6be:	e2b3      	b.n	800bc28 <_fx_directory_search+0xa68>
                    }

                    cluster = next_cluster;
 800b6c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b6ce:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800b6d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d3ca      	bcc.n	800b670 <_fx_directory_search+0x4b0>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800b6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6de:	2200      	movs	r2, #0
 800b6e0:	469a      	mov	sl, r3
 800b6e2:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800b6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	613b      	str	r3, [r7, #16]
 800b6ec:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800b6ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	fb03 f20b 	mul.w	r2, r3, fp
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	fb0a f303 	mul.w	r3, sl, r3
 800b6fe:	4413      	add	r3, r2
 800b700:	4602      	mov	r2, r0
 800b702:	fbaa 4502 	umull	r4, r5, sl, r2
 800b706:	442b      	add	r3, r5
 800b708:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800b70a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b70e:	2200      	movs	r2, #0
 800b710:	60bb      	str	r3, [r7, #8]
 800b712:	60fa      	str	r2, [r7, #12]
 800b714:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b718:	4603      	mov	r3, r0
 800b71a:	fb03 f205 	mul.w	r2, r3, r5
 800b71e:	460b      	mov	r3, r1
 800b720:	fb04 f303 	mul.w	r3, r4, r3
 800b724:	4413      	add	r3, r2
 800b726:	4602      	mov	r2, r0
 800b728:	fba4 8902 	umull	r8, r9, r4, r2
 800b72c:	444b      	add	r3, r9
 800b72e:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800b730:	f04f 0200 	mov.w	r2, #0
 800b734:	f04f 0300 	mov.w	r3, #0
 800b738:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800b73c:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 800b740:	ea4f 1359 	mov.w	r3, r9, lsr #5
 800b744:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 800b748:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800b74c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b750:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d046      	beq.n	800b7e8 <_fx_directory_search+0x628>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800b75a:	6a3b      	ldr	r3, [r7, #32]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 800b762:	6a3a      	ldr	r2, [r7, #32]
 800b764:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b768:	4610      	mov	r0, r2
 800b76a:	4619      	mov	r1, r3
 800b76c:	2370      	movs	r3, #112	; 0x70
 800b76e:	461a      	mov	r2, r3
 800b770:	f00a fd82 	bl	8016278 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800b774:	6a3a      	ldr	r2, [r7, #32]
 800b776:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b77a:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800b77c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b786:	2300      	movs	r3, #0
 800b788:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b78c:	e01c      	b.n	800b7c8 <_fx_directory_search+0x608>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800b78e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b796:	18d1      	adds	r1, r2, r3
 800b798:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b79c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7a0:	441a      	add	r2, r3
 800b7a2:	780b      	ldrb	r3, [r1, #0]
 800b7a4:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 800b7a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b7aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7ae:	4413      	add	r3, r2
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d103      	bne.n	800b7be <_fx_directory_search+0x5fe>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800b7b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7ba:	2bfe      	cmp	r3, #254	; 0xfe
 800b7bc:	d913      	bls.n	800b7e6 <_fx_directory_search+0x626>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b7be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b7c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7cc:	2bff      	cmp	r3, #255	; 0xff
 800b7ce:	d9de      	bls.n	800b78e <_fx_directory_search+0x5ce>
 800b7d0:	e00a      	b.n	800b7e8 <_fx_directory_search+0x628>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	603b      	str	r3, [r7, #0]
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7e0:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800b7e4:	e000      	b.n	800b7e8 <_fx_directory_search+0x628>
                            break;
 800b7e6:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        found =  FX_FALSE;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 800b7f4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fa:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800b7fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b800:	f7fd fe7a 	bl	80094f8 <_fx_directory_entry_read>
 800b804:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
#endif /* FX_ENABLE_EXFAT */

            i++;
 800b808:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b80c:	3301      	adds	r3, #1
 800b80e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 800b812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b816:	2b00      	cmp	r3, #0
 800b818:	d002      	beq.n	800b820 <_fx_directory_search+0x660>
            {
                return(status);
 800b81a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b81e:	e203      	b.n	800bc28 <_fx_directory_search+0xa68>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 80c6 	beq.w	800b9b8 <_fx_directory_search+0x7f8>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 800b82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82e:	7f1b      	ldrb	r3, [r3, #28]
 800b830:	f003 0308 	and.w	r3, r3, #8
 800b834:	2b00      	cmp	r3, #0
 800b836:	f040 80a9 	bne.w	800b98c <_fx_directory_search+0x7cc>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2be5      	cmp	r3, #229	; 0xe5
 800b842:	d104      	bne.n	800b84e <_fx_directory_search+0x68e>
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	791b      	ldrb	r3, [r3, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f000 80a1 	beq.w	800b990 <_fx_directory_search+0x7d0>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 800b84e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 800b85e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 800b868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800b872:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b876:	2b60      	cmp	r3, #96	; 0x60
 800b878:	d908      	bls.n	800b88c <_fx_directory_search+0x6cc>
 800b87a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b87e:	2b7a      	cmp	r3, #122	; 0x7a
 800b880:	d804      	bhi.n	800b88c <_fx_directory_search+0x6cc>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 800b882:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b886:	3b20      	subs	r3, #32
 800b888:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800b88c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b890:	2b60      	cmp	r3, #96	; 0x60
 800b892:	d908      	bls.n	800b8a6 <_fx_directory_search+0x6e6>
 800b894:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b898:	2b7a      	cmp	r3, #122	; 0x7a
 800b89a:	d804      	bhi.n	800b8a6 <_fx_directory_search+0x6e6>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800b89c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b8a0:	3b20      	subs	r3, #32
 800b8a2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 800b8a6:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b8aa:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d10f      	bne.n	800b8d2 <_fx_directory_search+0x712>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 800b8b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr++;
 800b8bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            } while (*dir_name_ptr);
 800b8c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1c6      	bne.n	800b85e <_fx_directory_search+0x69e>
 800b8d0:	e000      	b.n	800b8d4 <_fx_directory_search+0x714>
                    break;
 800b8d2:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800b8d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d10b      	bne.n	800b8f6 <_fx_directory_search+0x736>
 800b8de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8e2:	781a      	ldrb	r2, [r3, #0]
 800b8e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d103      	bne.n	800b8f6 <_fx_directory_search+0x736>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b8f4:	e04d      	b.n	800b992 <_fx_directory_search+0x7d2>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f8:	791b      	ldrb	r3, [r3, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d049      	beq.n	800b992 <_fx_directory_search+0x7d2>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 800b8fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 800b906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b908:	3304      	adds	r3, #4
 800b90a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 800b90e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 800b918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800b922:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b926:	2b60      	cmp	r3, #96	; 0x60
 800b928:	d908      	bls.n	800b93c <_fx_directory_search+0x77c>
 800b92a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b92e:	2b7a      	cmp	r3, #122	; 0x7a
 800b930:	d804      	bhi.n	800b93c <_fx_directory_search+0x77c>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800b932:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b936:	3b20      	subs	r3, #32
 800b938:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 800b93c:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b940:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b944:	429a      	cmp	r2, r3
 800b946:	d10f      	bne.n	800b968 <_fx_directory_search+0x7a8>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 800b948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b94c:	3301      	adds	r3, #1
 800b94e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    dir_name_ptr++;
 800b952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b956:	3301      	adds	r3, #1
 800b958:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                } while (*dir_name_ptr);
 800b95c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1d3      	bne.n	800b90e <_fx_directory_search+0x74e>
 800b966:	e000      	b.n	800b96a <_fx_directory_search+0x7aa>
                        break;
 800b968:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800b96a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10e      	bne.n	800b992 <_fx_directory_search+0x7d2>
 800b974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b978:	781a      	ldrb	r2, [r3, #0]
 800b97a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	429a      	cmp	r2, r3
 800b982:	d106      	bne.n	800b992 <_fx_directory_search+0x7d2>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 800b984:	2301      	movs	r3, #1
 800b986:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b98a:	e002      	b.n	800b992 <_fx_directory_search+0x7d2>
                continue;
 800b98c:	bf00      	nop
 800b98e:	e000      	b.n	800b992 <_fx_directory_search+0x7d2>
                continue;
 800b990:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 800b992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b996:	2200      	movs	r2, #0
 800b998:	61bb      	str	r3, [r7, #24]
 800b99a:	61fa      	str	r2, [r7, #28]
 800b99c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b9a0:	69b9      	ldr	r1, [r7, #24]
 800b9a2:	4291      	cmp	r1, r2
 800b9a4:	69f9      	ldr	r1, [r7, #28]
 800b9a6:	eb71 0303 	sbcs.w	r3, r1, r3
 800b9aa:	d206      	bcs.n	800b9ba <_fx_directory_search+0x7fa>
 800b9ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f43f af1f 	beq.w	800b7f4 <_fx_directory_search+0x634>
 800b9b6:	e000      	b.n	800b9ba <_fx_directory_search+0x7fa>
                break;
 800b9b8:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 800b9ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d101      	bne.n	800b9c6 <_fx_directory_search+0x806>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 800b9c2:	2304      	movs	r3, #4
 800b9c4:	e130      	b.n	800bc28 <_fx_directory_search+0xa68>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c8:	7f1b      	ldrb	r3, [r3, #28]
 800b9ca:	f003 0310 	and.w	r3, r3, #16
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d04f      	beq.n	800ba72 <_fx_directory_search+0x8b2>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b9d8:	4619      	mov	r1, r3
 800b9da:	2370      	movs	r3, #112	; 0x70
 800b9dc:	461a      	mov	r2, r3
 800b9de:	f00a fc4b 	bl	8016278 <memcpy>
            search_dir_ptr =  &search_dir;
 800b9e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800b9ea:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	6513      	str	r3, [r2, #80]	; 0x50
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 800b9f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d13f      	bne.n	800ba7c <_fx_directory_search+0x8bc>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 800b9fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	2300      	movs	r3, #0
 800ba04:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d02e      	beq.n	800ba6a <_fx_directory_search+0x8aa>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800ba0c:	6a3b      	ldr	r3, [r7, #32]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 800ba14:	6a3a      	ldr	r2, [r7, #32]
 800ba16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	2370      	movs	r3, #112	; 0x70
 800ba20:	461a      	mov	r2, r3
 800ba22:	f00a fc29 	bl	8016278 <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800ba26:	6a3a      	ldr	r2, [r7, #32]
 800ba28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ba2c:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800ba2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ba3e:	e010      	b.n	800ba62 <_fx_directory_search+0x8a2>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 800ba40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ba44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba48:	18d1      	adds	r1, r2, r3
 800ba4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba52:	441a      	add	r2, r3
 800ba54:	780b      	ldrb	r3, [r1, #0]
 800ba56:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800ba58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ba62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba66:	2bff      	cmp	r3, #255	; 0xff
 800ba68:	d9ea      	bls.n	800ba40 <_fx_directory_search+0x880>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ba70:	e004      	b.n	800ba7c <_fx_directory_search+0x8bc>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 800ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <_fx_directory_search+0x8bc>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 800ba78:	2304      	movs	r3, #4
 800ba7a:	e0d5      	b.n	800bc28 <_fx_directory_search+0xa68>
            }
        }
    } while (name_ptr);
 800ba7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f47f add6 	bne.w	800b630 <_fx_directory_search+0x470>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 800ba8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	2b5c      	cmp	r3, #92	; 0x5c
 800ba92:	d028      	beq.n	800bae6 <_fx_directory_search+0x926>
 800ba94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	2b2f      	cmp	r3, #47	; 0x2f
 800ba9c:	d023      	beq.n	800bae6 <_fx_directory_search+0x926>
 800ba9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d01f      	beq.n	800bae6 <_fx_directory_search+0x926>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800baa6:	e012      	b.n	800bace <_fx_directory_search+0x90e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 800baa8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800baac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bab0:	4413      	add	r3, r2
 800bab2:	7819      	ldrb	r1, [r3, #0]
 800bab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baba:	4413      	add	r3, r2
 800babc:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bac0:	460a      	mov	r2, r1
 800bac2:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 800bac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac8:	3301      	adds	r3, #1
 800baca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800bace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bad2:	2bfe      	cmp	r3, #254	; 0xfe
 800bad4:	d807      	bhi.n	800bae6 <_fx_directory_search+0x926>
 800bad6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bade:	4413      	add	r3, r2
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1e0      	bne.n	800baa8 <_fx_directory_search+0x8e8>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 800bae6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	2b5c      	cmp	r3, #92	; 0x5c
 800baee:	d012      	beq.n	800bb16 <_fx_directory_search+0x956>
 800baf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	2b2f      	cmp	r3, #47	; 0x2f
 800baf8:	d00d      	beq.n	800bb16 <_fx_directory_search+0x956>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 800bafa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bafe:	2bfe      	cmp	r3, #254	; 0xfe
 800bb00:	d809      	bhi.n	800bb16 <_fx_directory_search+0x956>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 800bb02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800bb0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb0e:	4413      	add	r3, r2
 800bb10:	222f      	movs	r2, #47	; 0x2f
 800bb12:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800bb1c:	e017      	b.n	800bb4e <_fx_directory_search+0x98e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 800bb1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb26:	4413      	add	r3, r2
 800bb28:	7819      	ldrb	r1, [r3, #0]
 800bb2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb30:	4413      	add	r3, r2
 800bb32:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bb36:	460a      	mov	r2, r1
 800bb38:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 800bb3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb3e:	3301      	adds	r3, #1
 800bb40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        j++;
 800bb44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb48:	3301      	adds	r3, #1
 800bb4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800bb4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb52:	2bff      	cmp	r3, #255	; 0xff
 800bb54:	d807      	bhi.n	800bb66 <_fx_directory_search+0x9a6>
 800bb56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb5e:	4413      	add	r3, r2
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1db      	bne.n	800bb1e <_fx_directory_search+0x95e>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 800bb66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb6a:	2bff      	cmp	r3, #255	; 0xff
 800bb6c:	d808      	bhi.n	800bb80 <_fx_directory_search+0x9c0>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 800bb6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb74:	4413      	add	r3, r2
 800bb76:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	701a      	strb	r2, [r3, #0]
 800bb7e:	e003      	b.n	800bb88 <_fx_directory_search+0x9c8>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800bb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 800bb88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00e      	beq.n	800bbae <_fx_directory_search+0x9ee>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 800bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb92:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800bb96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bb9a:	4611      	mov	r1, r2
 800bb9c:	2270      	movs	r2, #112	; 0x70
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f00a fb6a 	bl	8016278 <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 800bba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba6:	2201      	movs	r2, #1
 800bba8:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 800bbac:	e003      	b.n	800bbb6 <_fx_directory_search+0x9f6>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 800bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 800bbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbba:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	2270      	movs	r2, #112	; 0x70
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f00a fb58 	bl	8016278 <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 800bbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbca:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 800bbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bbda:	e01e      	b.n	800bc1a <_fx_directory_search+0xa5a>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 800bbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bbe4:	4413      	add	r3, r2
 800bbe6:	7819      	ldrb	r1, [r3, #0]
 800bbe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bbee:	4413      	add	r3, r2
 800bbf0:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800bbf4:	460a      	mov	r2, r1
 800bbf6:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 800bbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bc00:	4413      	add	r3, r2
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d103      	bne.n	800bc10 <_fx_directory_search+0xa50>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800bc08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bc0c:	2bfe      	cmp	r3, #254	; 0xfe
 800bc0e:	d909      	bls.n	800bc24 <_fx_directory_search+0xa64>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800bc10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bc14:	3301      	adds	r3, #1
 800bc16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bc1e:	2bff      	cmp	r3, #255	; 0xff
 800bc20:	d9dc      	bls.n	800bbdc <_fx_directory_search+0xa1c>
 800bc22:	e000      	b.n	800bc26 <_fx_directory_search+0xa66>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 800bc24:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bc34 <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b088      	sub	sp, #32
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a49      	ldr	r2, [pc, #292]	; (800bd68 <_fx_file_close+0x134>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d001      	beq.n	800bc4a <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800bc46:	2307      	movs	r3, #7
 800bc48:	e08a      	b.n	800bd60 <_fx_file_close+0x12c>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc4e:	61fb      	str	r3, [r7, #28]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800bc56:	1c5a      	adds	r2, r3, #1
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a42      	ldr	r2, [pc, #264]	; (800bd6c <_fx_file_close+0x138>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d001      	beq.n	800bc6c <_fx_file_close+0x38>
 800bc68:	2311      	movs	r3, #17
 800bc6a:	e079      	b.n	800bd60 <_fx_file_close+0x12c>
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bc72:	f04f 31ff 	mov.w	r1, #4294967295
 800bc76:	4618      	mov	r0, r3
 800bc78:	f007 fb62 	bl	8013340 <_tx_mutex_get>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <_fx_file_close+0x52>
 800bc82:	2311      	movs	r3, #17
 800bc84:	e06c      	b.n	800bd60 <_fx_file_close+0x12c>
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d104      	bne.n	800bc9a <_fx_file_close+0x66>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800bc98:	e014      	b.n	800bcc4 <_fx_file_close+0x90>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800bca2:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800bcac:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d104      	bne.n	800bcc4 <_fx_file_close+0x90>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800bcca:	1e5a      	subs	r2, r3, #1
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a26      	ldr	r2, [pc, #152]	; (800bd70 <_fx_file_close+0x13c>)
 800bcd6:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d138      	bne.n	800bd52 <_fx_file_close+0x11e>
        (file_ptr -> fx_file_modified))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d034      	beq.n	800bd52 <_fx_file_close+0x11e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bce8:	f3ef 8310 	mrs	r3, PRIMASK
 800bcec:	60fb      	str	r3, [r7, #12]
    return(posture);
 800bcee:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800bcf0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcf2:	b672      	cpsid	i
    return(int_posture);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
    {

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS
 800bcf6:	61bb      	str	r3, [r7, #24]

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800bcf8:	4b1e      	ldr	r3, [pc, #120]	; (800bd74 <_fx_file_close+0x140>)
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800bd02:	4b1d      	ldr	r3, [pc, #116]	; (800bd78 <_fx_file_close+0x144>)
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800bd0c:	4b1a      	ldr	r3, [pc, #104]	; (800bd78 <_fx_file_close+0x144>)
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	f383 8810 	msr	PRIMASK, r3
}
 800bd20:	bf00      	nop
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800bd28:	6879      	ldr	r1, [r7, #4]
 800bd2a:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	3368      	adds	r3, #104	; 0x68
 800bd32:	4619      	mov	r1, r3
 800bd34:	69f8      	ldr	r0, [r7, #28]
 800bd36:	f7fd ff65 	bl	8009c04 <_fx_directory_entry_write>
 800bd3a:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d007      	beq.n	800bd52 <_fx_file_close+0x11e>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f007 fd71 	bl	8013830 <_tx_mutex_put>

            /* Error writing the directory.  */
            return(status);
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	e006      	b.n	800bd60 <_fx_file_close+0x12c>
        }
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f007 fd69 	bl	8013830 <_tx_mutex_put>

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3720      	adds	r7, #32
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	46494c45 	.word	0x46494c45
 800bd6c:	4d454449 	.word	0x4d454449
 800bd70:	46494c43 	.word	0x46494c43
 800bd74:	24014c34 	.word	0x24014c34
 800bd78:	24014c30 	.word	0x24014c30

0800bd7c <_fx_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 800bd7c:	b590      	push	{r4, r7, lr}
 800bd7e:	b0c5      	sub	sp, #276	; 0x114
 800bd80:	af02      	add	r7, sp, #8
 800bd82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd8a:	6018      	str	r0, [r3, #0]
 800bd8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd94:	6019      	str	r1, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 800bd96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800bda4:	1c5a      	adds	r2, r3, #1
 800bda6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
#endif

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    work_ptr =  (CHAR *)file_name;
 800bdba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800bdc8:	e020      	b.n	800be0c <_fx_file_create+0x90>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 800bdca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	2b5c      	cmp	r3, #92	; 0x5c
 800bdd2:	d004      	beq.n	800bdde <_fx_file_create+0x62>
 800bdd4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	2b2f      	cmp	r3, #47	; 0x2f
 800bddc:	d103      	bne.n	800bde6 <_fx_file_create+0x6a>
        {
            /* Yes, reset the name size.  */
            i =  0;
 800bdde:	2300      	movs	r3, #0
 800bde0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bde4:	e00d      	b.n	800be02 <_fx_file_create+0x86>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 800bde6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2b20      	cmp	r3, #32
 800bdee:	d103      	bne.n	800bdf8 <_fx_file_create+0x7c>
 800bdf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d004      	beq.n	800be02 <_fx_file_create+0x86>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 800bdf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        }

        /* Move to the next character.  */
        work_ptr++;
 800be02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be06:	3301      	adds	r3, #1
 800be08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800be0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1d9      	bne.n	800bdca <_fx_file_create+0x4e>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 800be16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d003      	beq.n	800be26 <_fx_file_create+0xaa>
 800be1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be22:	2bff      	cmp	r3, #255	; 0xff
 800be24:	d901      	bls.n	800be2a <_fx_file_create+0xae>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 800be26:	230c      	movs	r3, #12
 800be28:	e10a      	b.n	800c040 <_fx_file_create+0x2c4>
    }

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 800be2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800be38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800be3c:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Setup another pointer to another media name buffer.  */
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 800be3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800be4c:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800be50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800be58:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    search_directory.fx_dir_entry_short_name[0] = 0;
 800be60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800be68:	2200      	movs	r2, #0
 800be6a:	711a      	strb	r2, [r3, #4]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800be6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a74      	ldr	r2, [pc, #464]	; (800c04c <_fx_file_create+0x2d0>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d001      	beq.n	800be82 <_fx_file_create+0x106>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800be7e:	2311      	movs	r3, #17
 800be80:	e0de      	b.n	800c040 <_fx_file_create+0x2c4>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CREATE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800be82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a6f      	ldr	r2, [pc, #444]	; (800c04c <_fx_file_create+0x2d0>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d001      	beq.n	800be98 <_fx_file_create+0x11c>
 800be94:	2311      	movs	r3, #17
 800be96:	e0d3      	b.n	800c040 <_fx_file_create+0x2c4>
 800be98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bea6:	f04f 31ff 	mov.w	r1, #4294967295
 800beaa:	4618      	mov	r0, r3
 800beac:	f007 fa48 	bl	8013340 <_tx_mutex_get>
 800beb0:	4603      	mov	r3, r0
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d001      	beq.n	800beba <_fx_file_create+0x13e>
 800beb6:	2311      	movs	r3, #17
 800beb8:	e0c2      	b.n	800c040 <_fx_file_create+0x2c4>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800beba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00b      	beq.n	800bee4 <_fx_file_create+0x168>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800becc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bed0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800beda:	4618      	mov	r0, r3
 800bedc:	f007 fca8 	bl	8013830 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800bee0:	2323      	movs	r3, #35	; 0x23
 800bee2:	e0ad      	b.n	800c040 <_fx_file_create+0x2c4>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 800bee4:	f107 0408 	add.w	r4, r7, #8
 800bee8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800beec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bef0:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 800bef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bef8:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800befc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	4623      	mov	r3, r4
 800bf04:	6809      	ldr	r1, [r1, #0]
 800bf06:	6800      	ldr	r0, [r0, #0]
 800bf08:	f7ff f95a 	bl	800b1c0 <_fx_directory_search>
 800bf0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status == FX_SUCCESS)
 800bf10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10b      	bne.n	800bf30 <_fx_file_create+0x1b4>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800bf18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bf26:	4618      	mov	r0, r3
 800bf28:	f007 fc82 	bl	8013830 <_tx_mutex_put>

        /* File found - Return the error code.  */
        return(FX_ALREADY_CREATED);
 800bf2c:	230b      	movs	r3, #11
 800bf2e:	e087      	b.n	800c040 <_fx_file_create+0x2c4>
    }

    /* Determine if there is anything left after the name.  */
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 800bf30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bf36:	4611      	mov	r1, r2
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff f8df 	bl	800b0fc <_fx_directory_name_extract>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00b      	beq.n	800bf5c <_fx_file_create+0x1e0>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800bf44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bf52:	4618      	mov	r0, r3
 800bf54:	f007 fc6c 	bl	8013830 <_tx_mutex_put>

        /* Extra information after the file name, return an invalid path
           error.  */
        return(FX_INVALID_PATH);
 800bf58:	230d      	movs	r3, #13
 800bf5a:	e071      	b.n	800c040 <_fx_file_create+0x2c4>
    /* Save the directory entry size.  */
    dir_size = search_directory.fx_dir_entry_file_size;
#endif /* FX_ENABLE_EXFAT */

    /* Find a free slot for the new file.  */
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 800bf5c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bf60:	f107 0108 	add.w	r1, r7, #8
 800bf64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf6c:	6818      	ldr	r0, [r3, #0]
 800bf6e:	f7fe fc85 	bl	800a87c <_fx_directory_free_search>
 800bf72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800bf76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00c      	beq.n	800bf98 <_fx_file_create+0x21c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800bf7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f007 fc4f 	bl	8013830 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800bf92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf96:	e053      	b.n	800c040 <_fx_file_create+0x2c4>
    }

    /* Populate the directory entry.  */

    /* Isolate the file name.  */
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 800bf98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7ff f8ab 	bl	800b0fc <_fx_directory_name_extract>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfa6:	f3ef 8310 	mrs	r3, PRIMASK
 800bfaa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    return(posture);
 800bfae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    int_posture = __get_interrupt_posture();
 800bfb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    __asm__ volatile ("CPSID i" : : : "memory");
 800bfb6:	b672      	cpsid	i
    return(int_posture);
 800bfb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec

    /* Disable interrupts for time/date access.  */
    FX_DISABLE_INTS
 800bfbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    /* Set time and date stamps.  */
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 800bfc0:	4b23      	ldr	r3, [pc, #140]	; (800c050 <_fx_file_create+0x2d4>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 800bfc8:	4b22      	ldr	r3, [pc, #136]	; (800c054 <_fx_file_create+0x2d8>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bfd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bfd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfdc:	f383 8810 	msr	PRIMASK, r3
}
 800bfe0:	bf00      	nop

    /* Restore interrupts.  */
    FX_RESTORE_INTS

    /* Set the attributes for the file.  */
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 800bfe2:	2320      	movs	r3, #32
 800bfe4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    /* Set file size to 0. */
    dir_entry.fx_dir_entry_file_size =  0;
 800bfe8:	f04f 0200 	mov.w	r2, #0
 800bfec:	f04f 0300 	mov.w	r3, #0
 800bff0:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    /* Set available file size to 0. */
    dir_entry.fx_dir_entry_available_file_size = 0;
#endif /* FX_ENABLE_EXFAT */

    /* Set the cluster to NULL.  */
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 800bff4:	2300      	movs	r3, #0
 800bff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Is there a leading dot?  */
    if (dir_entry.fx_dir_entry_name[0] == '.')
 800bffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	2b2e      	cmp	r3, #46	; 0x2e
 800c000:	d106      	bne.n	800c010 <_fx_file_create+0x294>
    {

        /* Yes, toggle the hidden attribute bit.  */
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 800c002:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800c006:	f043 0302 	orr.w	r3, r3, #2
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 800c010:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c01c:	4611      	mov	r1, r2
 800c01e:	6818      	ldr	r0, [r3, #0]
 800c020:	f7fd fdf0 	bl	8009c04 <_fx_directory_entry_write>
 800c024:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 800c028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c02c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c036:	4618      	mov	r0, r3
 800c038:	f007 fbfa 	bl	8013830 <_tx_mutex_put>

    /* File create is complete, return status.  */
    return(status);
 800c03c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
}
 800c040:	4618      	mov	r0, r3
 800c042:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800c046:	46bd      	mov	sp, r7
 800c048:	bd90      	pop	{r4, r7, pc}
 800c04a:	bf00      	nop
 800c04c:	4d454449 	.word	0x4d454449
 800c050:	24014c34 	.word	0x24014c34
 800c054:	24014c30 	.word	0x24014c30

0800c058 <_fx_file_extended_seek>:
/*                                            relative cluster logic,     */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 800c058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c05c:	b0c2      	sub	sp, #264	; 0x108
 800c05e:	af00      	add	r7, sp, #0
 800c060:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800c064:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

UINT      status;
ULONG     cluster;
ULONG     contents = 0;
 800c068:	2300      	movs	r3, #0
 800c06a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800c06e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	4bcf      	ldr	r3, [pc, #828]	; (800c3b4 <_fx_file_extended_seek+0x35c>)
 800c076:	429a      	cmp	r2, r3
 800c078:	d001      	beq.n	800c07e <_fx_file_extended_seek+0x26>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800c07a:	2307      	movs	r3, #7
 800c07c:	e2b5      	b.n	800c5ea <_fx_file_extended_seek+0x592>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800c07e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c084:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_seeks++;
 800c088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c08c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c096:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800c09a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c09e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	4bc3      	ldr	r3, [pc, #780]	; (800c3b8 <_fx_file_extended_seek+0x360>)
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d001      	beq.n	800c0b4 <_fx_file_extended_seek+0x5c>
 800c0b0:	2311      	movs	r3, #17
 800c0b2:	e29a      	b.n	800c5ea <_fx_file_extended_seek+0x592>
 800c0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c0bc:	f04f 31ff 	mov.w	r1, #4294967295
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f007 f93d 	bl	8013340 <_tx_mutex_get>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <_fx_file_extended_seek+0x78>
 800c0cc:	2311      	movs	r3, #17
 800c0ce:	e28c      	b.n	800c5ea <_fx_file_extended_seek+0x592>

    /* Check if we actually have to do anything.  */
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 800c0d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0d4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800c0d8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c0dc:	428b      	cmp	r3, r1
 800c0de:	bf08      	it	eq
 800c0e0:	4282      	cmpeq	r2, r0
 800c0e2:	d108      	bne.n	800c0f6 <_fx_file_extended_seek+0x9e>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0e8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f007 fb9f 	bl	8013830 <_tx_mutex_put>

        /* Seek is complete, return successful status.  */
        return(FX_SUCCESS);
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	e279      	b.n	800c5ea <_fx_file_extended_seek+0x592>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800c0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800c0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800c102:	fb02 f303 	mul.w	r3, r2, r3
 800c106:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800c10a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d108      	bne.n	800c124 <_fx_file_extended_seek+0xcc>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c116:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c11a:	4618      	mov	r0, r3
 800c11c:	f007 fb88 	bl	8013830 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800c120:	2302      	movs	r3, #2
 800c122:	e262      	b.n	800c5ea <_fx_file_extended_seek+0x592>
    }

    /* See if we need to adjust the byte offset.  */
    if (byte_offset > file_ptr -> fx_file_current_file_size)
 800c124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c128:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800c12c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c130:	4290      	cmp	r0, r2
 800c132:	eb71 0303 	sbcs.w	r3, r1, r3
 800c136:	d205      	bcs.n	800c144 <_fx_file_extended_seek+0xec>
    {

        /* Adjust the byte offset down to the file size. */
        byte_offset =  file_ptr -> fx_file_current_file_size;
 800c138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c13c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800c140:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    }

    /* Check if the desired position within the leading consecutive clusters.  */
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 800c144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c148:	699b      	ldr	r3, [r3, #24]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c150:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c154:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c158:	2200      	movs	r2, #0
 800c15a:	469a      	mov	sl, r3
 800c15c:	4693      	mov	fp, r2
 800c15e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800c162:	460b      	mov	r3, r1
 800c164:	fb0a f203 	mul.w	r2, sl, r3
 800c168:	4603      	mov	r3, r0
 800c16a:	fb03 f30b 	mul.w	r3, r3, fp
 800c16e:	4413      	add	r3, r2
 800c170:	4602      	mov	r2, r0
 800c172:	fba2 450a 	umull	r4, r5, r2, sl
 800c176:	442b      	add	r3, r5
 800c178:	461d      	mov	r5, r3
 800c17a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c17e:	42a2      	cmp	r2, r4
 800c180:	41ab      	sbcs	r3, r5
 800c182:	f0c0 8156 	bcc.w	800c432 <_fx_file_extended_seek+0x3da>

            /* At this point, we are ready to walk list of clusters to setup the
               seek position of this file.  */

            /* check if byte_offset is greater than where we were left off earlier */
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 800c186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c18c:	2200      	movs	r2, #0
 800c18e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c192:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c196:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c19a:	2200      	movs	r2, #0
 800c19c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c1a0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c1a4:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800c1a8:	462b      	mov	r3, r5
 800c1aa:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800c1ae:	4652      	mov	r2, sl
 800c1b0:	fb02 f203 	mul.w	r2, r2, r3
 800c1b4:	465b      	mov	r3, fp
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	fb01 f303 	mul.w	r3, r1, r3
 800c1bc:	4413      	add	r3, r2
 800c1be:	4622      	mov	r2, r4
 800c1c0:	4651      	mov	r1, sl
 800c1c2:	fba2 8901 	umull	r8, r9, r2, r1
 800c1c6:	444b      	add	r3, r9
 800c1c8:	4699      	mov	r9, r3
 800c1ca:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c1ce:	4590      	cmp	r8, r2
 800c1d0:	eb79 0303 	sbcs.w	r3, r9, r3
 800c1d4:	d225      	bcs.n	800c222 <_fx_file_extended_seek+0x1ca>
            {

                cluster =    file_ptr -> fx_file_current_physical_cluster;
 800c1d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1da:	6a1b      	ldr	r3, [r3, #32]
 800c1dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                bytes_remaining =   byte_offset -
                    file_ptr -> fx_file_current_relative_cluster * bytes_per_cluster;
 800c1e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c1ea:	fb02 f303 	mul.w	r3, r2, r3
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c1f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
                bytes_remaining =   byte_offset -
 800c1f8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c1fc:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800c200:	4621      	mov	r1, r4
 800c202:	1a51      	subs	r1, r2, r1
 800c204:	6139      	str	r1, [r7, #16]
 800c206:	4629      	mov	r1, r5
 800c208:	eb63 0301 	sbc.w	r3, r3, r1
 800c20c:	617b      	str	r3, [r7, #20]
 800c20e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c212:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

                cluster_count = file_ptr -> fx_file_current_relative_cluster;
 800c216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c21c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c220:	e0b7      	b.n	800c392 <_fx_file_extended_seek+0x33a>
            }
            else
            {

                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800c222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c226:	695a      	ldr	r2, [r3, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1);
 800c228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c22c:	699b      	ldr	r3, [r3, #24]
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800c22e:	4413      	add	r3, r2
 800c230:	3b01      	subs	r3, #1
 800c232:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                bytes_remaining =   byte_offset -
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 800c236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	1e5a      	subs	r2, r3, #1
 800c23e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c242:	fb02 f303 	mul.w	r3, r2, r3
 800c246:	2200      	movs	r2, #0
 800c248:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c24c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                bytes_remaining =   byte_offset -
 800c250:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c254:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c258:	4621      	mov	r1, r4
 800c25a:	1a51      	subs	r1, r2, r1
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	4629      	mov	r1, r5
 800c260:	eb63 0301 	sbc.w	r3, r3, r1
 800c264:	60fb      	str	r3, [r7, #12]
 800c266:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c26a:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
                cluster_count =     (file_ptr -> fx_file_consecutive_cluster - 1);
 800c26e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	3b01      	subs	r3, #1
 800c276:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }


            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c27a:	e08a      	b.n	800c392 <_fx_file_extended_seek+0x33a>
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800c27c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c280:	3301      	adds	r3, #1
 800c282:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800c286:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c28a:	461a      	mov	r2, r3
 800c28c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800c290:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c294:	f003 fe12 	bl	800febc <_fx_utility_FAT_entry_read>
 800c298:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800c29c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d009      	beq.n	800c2b8 <_fx_file_extended_seek+0x260>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800c2a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2a8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f007 fabf 	bl	8013830 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800c2b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c2b6:	e198      	b.n	800c5ea <_fx_file_extended_seek+0x592>
                }

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800c2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* Setup for the next cluster.  */
                cluster =  contents;
 800c2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                /* Determine if this is the last written cluster.  */
                if (bytes_remaining > bytes_per_cluster)
 800c2c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c2d2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c2d6:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c2da:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800c2de:	4621      	mov	r1, r4
 800c2e0:	4291      	cmp	r1, r2
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	eb71 0303 	sbcs.w	r3, r1, r3
 800c2e8:	d216      	bcs.n	800c318 <_fx_file_extended_seek+0x2c0>
                {

                    /* Still more seeking, just decrement the working byte offset.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800c2ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2f4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c2f8:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c2fc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c300:	4621      	mov	r1, r4
 800c302:	1a51      	subs	r1, r2, r1
 800c304:	6039      	str	r1, [r7, #0]
 800c306:	4629      	mov	r1, r5
 800c308:	eb63 0301 	sbc.w	r3, r3, r1
 800c30c:	607b      	str	r3, [r7, #4]
 800c30e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c312:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
 800c316:	e03c      	b.n	800c392 <_fx_file_extended_seek+0x33a>
                }
                else
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800c318:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c31c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c320:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800c322:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c326:	1e5a      	subs	r2, r3, #1
 800c328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c32c:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800c32e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c332:	2200      	movs	r2, #0
 800c334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c338:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c33c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c340:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c344:	4621      	mov	r1, r4
 800c346:	4628      	mov	r0, r5
 800c348:	4283      	cmp	r3, r0
 800c34a:	bf08      	it	eq
 800c34c:	428a      	cmpeq	r2, r1
 800c34e:	d135      	bne.n	800c3bc <_fx_file_extended_seek+0x364>
 800c350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c354:	2b01      	cmp	r3, #1
 800c356:	d931      	bls.n	800c3bc <_fx_file_extended_seek+0x364>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c35c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c360:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c368:	4293      	cmp	r3, r2
 800c36a:	d227      	bcs.n	800c3bc <_fx_file_extended_seek+0x364>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800c36c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c374:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800c376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c37c:	1c5a      	adds	r2, r3, #1
 800c37e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c382:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800c384:	f04f 0200 	mov.w	r2, #0
 800c388:	f04f 0300 	mov.w	r3, #0
 800c38c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
                    }

                    /* This is the cluster that contains the seek position.  */
                    break;
 800c390:	e014      	b.n	800c3bc <_fx_file_extended_seek+0x364>
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c396:	2b01      	cmp	r3, #1
 800c398:	d911      	bls.n	800c3be <_fx_file_extended_seek+0x366>
 800c39a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c39e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c3a2:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	f4ff af66 	bcc.w	800c27c <_fx_file_extended_seek+0x224>
 800c3b0:	e005      	b.n	800c3be <_fx_file_extended_seek+0x366>
 800c3b2:	bf00      	nop
 800c3b4:	46494c45 	.word	0x46494c45
 800c3b8:	4d454449 	.word	0x4d454449
                    break;
 800c3bc:	bf00      	nop
                }
            }
        
            /* Check for errors in traversal of the FAT chain.  */
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 800c3be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c3cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	67bb      	str	r3, [r7, #120]	; 0x78
 800c3d4:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c3d6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800c3da:	462b      	mov	r3, r5
 800c3dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c3e0:	4642      	mov	r2, r8
 800c3e2:	fb02 f203 	mul.w	r2, r2, r3
 800c3e6:	464b      	mov	r3, r9
 800c3e8:	4621      	mov	r1, r4
 800c3ea:	fb01 f303 	mul.w	r3, r1, r3
 800c3ee:	4413      	add	r3, r2
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4641      	mov	r1, r8
 800c3f4:	fba2 1201 	umull	r1, r2, r2, r1
 800c3f8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800c3fc:	460a      	mov	r2, r1
 800c3fe:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800c402:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c406:	4413      	add	r3, r2
 800c408:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c40c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c410:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800c414:	4621      	mov	r1, r4
 800c416:	4291      	cmp	r1, r2
 800c418:	4629      	mov	r1, r5
 800c41a:	eb71 0303 	sbcs.w	r3, r1, r3
 800c41e:	d22f      	bcs.n	800c480 <_fx_file_extended_seek+0x428>
            {
    
                /* Release media protection.  */
                FX_UNPROTECT
 800c420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c424:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c428:	4618      	mov	r0, r3
 800c42a:	f007 fa01 	bl	8013830 <_tx_mutex_put>

                /* This is an error that suggests a corrupt file.  */
                return(FX_FILE_CORRUPT);
 800c42e:	2308      	movs	r3, #8
 800c430:	e0db      	b.n	800c5ea <_fx_file_extended_seek+0x592>
    }
    else
    {

        /* we should directly access the desired cluster */
        file_ptr -> fx_file_current_relative_cluster = (ULONG)(byte_offset / bytes_per_cluster);
 800c432:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c436:	2200      	movs	r2, #0
 800c438:	673b      	str	r3, [r7, #112]	; 0x70
 800c43a:	677a      	str	r2, [r7, #116]	; 0x74
 800c43c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c440:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c444:	f7f4 f868 	bl	8000518 <__aeabi_uldivmod>
 800c448:	4602      	mov	r2, r0
 800c44a:	460b      	mov	r3, r1
 800c44c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c450:	635a      	str	r2, [r3, #52]	; 0x34

        file_ptr -> fx_file_current_physical_cluster =
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 800c452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c456:	695a      	ldr	r2, [r3, #20]
 800c458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45e:	441a      	add	r2, r3
        file_ptr -> fx_file_current_physical_cluster =
 800c460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c464:	621a      	str	r2, [r3, #32]

        bytes_remaining =  byte_offset % bytes_per_cluster;
 800c466:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c46a:	2200      	movs	r2, #0
 800c46c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c46e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c470:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c474:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c478:	f7f4 f84e 	bl	8000518 <__aeabi_uldivmod>
 800c47c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    }


    /* Determine if the remaining bytes fit exactly into the cluster size.  */
    if (bytes_remaining == bytes_per_cluster)
 800c480:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c484:	2200      	movs	r2, #0
 800c486:	663b      	str	r3, [r7, #96]	; 0x60
 800c488:	667a      	str	r2, [r7, #100]	; 0x64
 800c48a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c48e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c492:	4621      	mov	r1, r4
 800c494:	4628      	mov	r0, r5
 800c496:	4283      	cmp	r3, r0
 800c498:	bf08      	it	eq
 800c49a:	428a      	cmpeq	r2, r1
 800c49c:	d151      	bne.n	800c542 <_fx_file_extended_seek+0x4ea>
    {

        /* Position to the end of the cluster.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c49e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c4a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4a8:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c4aa:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800c4ac:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800c4b0:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c4b2:	fb01 f303 	mul.w	r3, r1, r3
 800c4b6:	18d4      	adds	r4, r2, r3
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c4b8:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c4bc:	1e51      	subs	r1, r2, #1
 800c4be:	65b9      	str	r1, [r7, #88]	; 0x58
 800c4c0:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c4c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	653b      	str	r3, [r7, #80]	; 0x50
 800c4d0:	657a      	str	r2, [r7, #84]	; 0x54
 800c4d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c4d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c4da:	f7f4 f81d 	bl	8000518 <__aeabi_uldivmod>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	4423      	add	r3, r4
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c4ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c4f4:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c4f8:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c4fc:	1e51      	subs	r1, r2, #1
 800c4fe:	6439      	str	r1, [r7, #64]	; 0x40
 800c500:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c504:	647b      	str	r3, [r7, #68]	; 0x44
 800c506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c50c:	2200      	movs	r2, #0
 800c50e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c510:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c512:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c516:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c51a:	f7f3 fffd 	bl	8000518 <__aeabi_uldivmod>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c526:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800c528:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c52c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c530:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800c534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c53a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c53e:	631a      	str	r2, [r3, #48]	; 0x30
 800c540:	e04b      	b.n	800c5da <_fx_file_extended_seek+0x582>
    }
    else
    {

        /* Position the pointers to the new offset.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c54c:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c54e:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800c550:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800c554:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c556:	fb01 f303 	mul.w	r3, r1, r3
 800c55a:	18d4      	adds	r4, r2, r3
                                                             (bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c55c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c562:	2200      	movs	r2, #0
 800c564:	633b      	str	r3, [r7, #48]	; 0x30
 800c566:	637a      	str	r2, [r7, #52]	; 0x34
 800c568:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c56c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c570:	f7f3 ffd2 	bl	8000518 <__aeabi_uldivmod>
 800c574:	4602      	mov	r2, r0
 800c576:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c578:	4613      	mov	r3, r2
 800c57a:	4423      	add	r3, r4
 800c57c:	2200      	movs	r2, #0
 800c57e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c580:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c586:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c58a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c58e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c594:	2200      	movs	r2, #0
 800c596:	623b      	str	r3, [r7, #32]
 800c598:	627a      	str	r2, [r7, #36]	; 0x24
 800c59a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c59e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c5a2:	f7f3 ffb9 	bl	8000518 <__aeabi_uldivmod>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5ae:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800c5b0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c5b4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c5b8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	61bb      	str	r3, [r7, #24]
 800c5c6:	61fa      	str	r2, [r7, #28]
 800c5c8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c5cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c5d0:	f7f3 ffa2 	bl	8000518 <__aeabi_uldivmod>
 800c5d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800c5da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5de:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f007 f924 	bl	8013830 <_tx_mutex_put>

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
 800c5e8:	2300      	movs	r3, #0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5f6:	bf00      	nop

0800c5f8 <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 800c5f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5fc:	b0e8      	sub	sp, #416	; 0x1a0
 800c5fe:	af02      	add	r7, sp, #8
 800c600:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 800c604:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800c608:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800c60c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800c616:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	4bd9      	ldr	r3, [pc, #868]	; (800c984 <_fx_file_open+0x38c>)
 800c61e:	429a      	cmp	r2, r3
 800c620:	d002      	beq.n	800c628 <_fx_file_open+0x30>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800c622:	2311      	movs	r3, #17
 800c624:	f000 bcc4 	b.w	800cfb0 <_fx_file_open+0x9b8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 800c628:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c62c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c636:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 800c63a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c63e:	2300      	movs	r3, #0
 800c640:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_exFAT;
        not_a_file_attr = FX_DIRECTORY;
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
 800c644:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d006      	beq.n	800c65c <_fx_file_open+0x64>
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 800c64e:	4bce      	ldr	r3, [pc, #824]	; (800c988 <_fx_file_open+0x390>)
 800c650:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800c654:	2318      	movs	r3, #24
 800c656:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800c65a:	e006      	b.n	800c66a <_fx_file_open+0x72>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 800c65c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800c660:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800c664:	2318      	movs	r3, #24
 800c666:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 800c66a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c66e:	2b02      	cmp	r3, #2
 800c670:	d106      	bne.n	800c680 <_fx_file_open+0x88>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 800c672:	2300      	movs	r3, #0
 800c674:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 800c678:	2301      	movs	r3, #1
 800c67a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800c67e:	e002      	b.n	800c686 <_fx_file_open+0x8e>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 800c680:	2300      	movs	r3, #0
 800c682:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c686:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	4bbd      	ldr	r3, [pc, #756]	; (800c984 <_fx_file_open+0x38c>)
 800c68e:	429a      	cmp	r2, r3
 800c690:	d002      	beq.n	800c698 <_fx_file_open+0xa0>
 800c692:	2311      	movs	r3, #17
 800c694:	f000 bc8c 	b.w	800cfb0 <_fx_file_open+0x9b8>
 800c698:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c69c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c6a0:	f04f 31ff 	mov.w	r1, #4294967295
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f006 fe4b 	bl	8013340 <_tx_mutex_get>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <_fx_file_open+0xbe>
 800c6b0:	2311      	movs	r3, #17
 800c6b2:	f000 bc7d 	b.w	800cfb0 <_fx_file_open+0x9b8>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 800c6b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c6ba:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800c6be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c6c2:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 800c6c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 800c6ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c6d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	2300      	movs	r3, #0
 800c6dc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800c6e0:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800c6e4:	f7fe fd6c 	bl	800b1c0 <_fx_directory_search>
 800c6e8:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800c6ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00a      	beq.n	800c70a <_fx_file_open+0x112>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c6f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c6f8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f007 f897 	bl	8013830 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800c702:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c706:	f000 bc53 	b.w	800cfb0 <_fx_file_open+0x9b8>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 800c70a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c70e:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 800c712:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800c716:	4013      	ands	r3, r2
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d009      	beq.n	800c732 <_fx_file_open+0x13a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c71e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c722:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c726:	4618      	mov	r0, r3
 800c728:	f007 f882 	bl	8013830 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 800c72c:	2305      	movs	r3, #5
 800c72e:	f000 bc3f 	b.w	800cfb0 <_fx_file_open+0x9b8>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 800c732:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c736:	2b01      	cmp	r3, #1
 800c738:	d160      	bne.n	800c7fc <_fx_file_open+0x204>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 800c73a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c73e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c742:	2b00      	cmp	r3, #0
 800c744:	d009      	beq.n	800c75a <_fx_file_open+0x162>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800c746:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c74a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c74e:	4618      	mov	r0, r3
 800c750:	f007 f86e 	bl	8013830 <_tx_mutex_put>

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 800c754:	2323      	movs	r3, #35	; 0x23
 800c756:	f000 bc2b 	b.w	800cfb0 <_fx_file_open+0x9b8>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 800c75a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c75e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c762:	f003 0301 	and.w	r3, r3, #1
 800c766:	2b00      	cmp	r3, #0
 800c768:	d009      	beq.n	800c77e <_fx_file_open+0x186>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800c76a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c76e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c772:	4618      	mov	r0, r3
 800c774:	f007 f85c 	bl	8013830 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 800c778:	2306      	movs	r3, #6
 800c77a:	f000 bc19 	b.w	800cfb0 <_fx_file_open+0x9b8>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800c77e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c782:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c786:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800c78a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c78e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c792:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        while (open_count)
 800c796:	e02d      	b.n	800c7f4 <_fx_file_open+0x1fc>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800c798:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800c79c:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800c7a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c7a4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800c7a8:	4299      	cmp	r1, r3
 800c7aa:	bf08      	it	eq
 800c7ac:	4290      	cmpeq	r0, r2
 800c7ae:	d117      	bne.n	800c7e0 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800c7b0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800c7b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800c7b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c7bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d10d      	bne.n	800c7e0 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 800c7c4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800c7c8:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d108      	bne.n	800c7e0 <_fx_file_open+0x1e8>
#endif
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800c7ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c7d2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f007 f82a 	bl	8013830 <_tx_mutex_put>

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 800c7dc:	2306      	movs	r3, #6
 800c7de:	e3e7      	b.n	800cfb0 <_fx_file_open+0x9b8>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800c7e0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800c7e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            open_count--;
 800c7ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        while (open_count)
 800c7f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1cd      	bne.n	800c798 <_fx_file_open+0x1a0>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800c7fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c800:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c804:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800c808:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c80c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800c810:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800c814:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800c81a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c81e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800c820:	fb02 f303 	mul.w	r3, r2, r3
 800c824:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    file_ptr -> fx_file_current_physical_cluster =  0;
 800c828:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c82c:	2300      	movs	r3, #0
 800c82e:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800c830:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c834:	2b00      	cmp	r3, #0
 800c836:	d108      	bne.n	800c84a <_fx_file_open+0x252>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c838:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c83c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c840:	4618      	mov	r0, r3
 800c842:	f006 fff5 	bl	8013830 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800c846:	2302      	movs	r3, #2
 800c848:	e3b2      	b.n	800cfb0 <_fx_file_open+0x9b8>
    }

    last_cluster =      0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    cluster_count =     0;
 800c850:	2300      	movs	r3, #0
 800c852:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 800c856:	2301      	movs	r3, #1
 800c858:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 800c85c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c860:	2301      	movs	r3, #1
 800c862:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 800c864:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800c868:	2b00      	cmp	r3, #0
 800c86a:	f000 8103 	beq.w	800ca74 <_fx_file_open+0x47c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 800c86e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c872:	2200      	movs	r2, #0
 800c874:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800c878:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800c87c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800c880:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800c884:	4621      	mov	r1, r4
 800c886:	eb11 0a02 	adds.w	sl, r1, r2
 800c88a:	4629      	mov	r1, r5
 800c88c:	eb41 0b03 	adc.w	fp, r1, r3
 800c890:	f11a 33ff 	adds.w	r3, sl, #4294967295
 800c894:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c898:	f14b 33ff 	adc.w	r3, fp, #4294967295
 800c89c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c8a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c8aa:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800c8ae:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c8b2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800c8b6:	f7f3 fe2f 	bl	8000518 <__aeabi_uldivmod>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	4610      	mov	r0, r2
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c8cc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800c8d0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800c8d4:	4623      	mov	r3, r4
 800c8d6:	fb03 f201 	mul.w	r2, r3, r1
 800c8da:	462b      	mov	r3, r5
 800c8dc:	fb00 f303 	mul.w	r3, r0, r3
 800c8e0:	4413      	add	r3, r2
 800c8e2:	4622      	mov	r2, r4
 800c8e4:	fba0 8902 	umull	r8, r9, r0, r2
 800c8e8:	444b      	add	r3, r9
 800c8ea:	4699      	mov	r9, r3
 800c8ec:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800c8f0:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800c8f4:	e12f      	b.n	800cb56 <_fx_file_open+0x55e>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800c8f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800c900:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800c904:	461a      	mov	r2, r3
 800c906:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800c90a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800c90e:	f003 fad5 	bl	800febc <_fx_utility_FAT_entry_read>
 800c912:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800c916:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d009      	beq.n	800c932 <_fx_file_open+0x33a>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800c91e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c922:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c926:	4618      	mov	r0, r3
 800c928:	f006 ff82 	bl	8013830 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800c92c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c930:	e33e      	b.n	800cfb0 <_fx_file_open+0x9b8>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 800c932:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800c936:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d006      	beq.n	800c94c <_fx_file_open+0x354>
 800c93e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c944:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800c948:	4293      	cmp	r3, r2
 800c94a:	d908      	bls.n	800c95e <_fx_file_open+0x366>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800c94c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c950:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c954:	4618      	mov	r0, r3
 800c956:	f006 ff6b 	bl	8013830 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 800c95a:	2303      	movs	r3, #3
 800c95c:	e328      	b.n	800cfb0 <_fx_file_open+0x9b8>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 800c95e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800c968:	429a      	cmp	r2, r3
 800c96a:	d10f      	bne.n	800c98c <_fx_file_open+0x394>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 800c96c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00e      	beq.n	800c992 <_fx_file_open+0x39a>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 800c974:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c978:	699b      	ldr	r3, [r3, #24]
 800c97a:	1c5a      	adds	r2, r3, #1
 800c97c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c980:	619a      	str	r2, [r3, #24]
 800c982:	e006      	b.n	800c992 <_fx_file_open+0x39a>
 800c984:	4d454449 	.word	0x4d454449
 800c988:	0ffffff8 	.word	0x0ffffff8
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800c992:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c996:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

                /* Setup for the next cluster.  */
                cluster =  contents;
 800c99a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800c99e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 800c9a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c9ac:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800c9b0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800c9b4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800c9b8:	4641      	mov	r1, r8
 800c9ba:	4291      	cmp	r1, r2
 800c9bc:	4649      	mov	r1, r9
 800c9be:	eb71 0303 	sbcs.w	r3, r1, r3
 800c9c2:	d216      	bcs.n	800c9f2 <_fx_file_open+0x3fa>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800c9c4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c9ce:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800c9d2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800c9d6:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800c9da:	4641      	mov	r1, r8
 800c9dc:	1a51      	subs	r1, r2, r1
 800c9de:	6039      	str	r1, [r7, #0]
 800c9e0:	4649      	mov	r1, r9
 800c9e2:	eb63 0301 	sbc.w	r3, r3, r1
 800c9e6:	607b      	str	r3, [r7, #4]
 800c9e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9ec:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 800c9f0:	e040      	b.n	800ca74 <_fx_file_open+0x47c>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 800c9f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c9f6:	6a1b      	ldr	r3, [r3, #32]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d13b      	bne.n	800ca74 <_fx_file_open+0x47c>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800c9fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ca00:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800ca04:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800ca06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ca0a:	1e5a      	subs	r2, r3, #1
 800ca0c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca10:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800ca12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ca16:	2200      	movs	r2, #0
 800ca18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ca1c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ca20:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800ca24:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800ca28:	4641      	mov	r1, r8
 800ca2a:	4648      	mov	r0, r9
 800ca2c:	4283      	cmp	r3, r0
 800ca2e:	bf08      	it	eq
 800ca30:	428a      	cmpeq	r2, r1
 800ca32:	d11f      	bne.n	800ca74 <_fx_file_open+0x47c>
 800ca34:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d91b      	bls.n	800ca74 <_fx_file_open+0x47c>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800ca3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ca44:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800ca48:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d211      	bcs.n	800ca74 <_fx_file_open+0x47c>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800ca50:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ca54:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ca58:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800ca5a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca60:	1c5a      	adds	r2, r3, #1
 800ca62:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca66:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800ca68:	f04f 0200 	mov.w	r2, #0
 800ca6c:	f04f 0300 	mov.w	r3, #0
 800ca70:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800ca74:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d90a      	bls.n	800ca92 <_fx_file_open+0x49a>
 800ca7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ca84:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800ca88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	f4ff af32 	bcc.w	800c8f6 <_fx_file_open+0x2fe>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800ca92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca98:	2200      	movs	r2, #0
 800ca9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ca9e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 800caa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800caa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caa8:	2200      	movs	r2, #0
 800caaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800caae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800cab2:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 800cab6:	464b      	mov	r3, r9
 800cab8:	e9d7 ab36 	ldrd	sl, fp, [r7, #216]	; 0xd8
 800cabc:	4652      	mov	r2, sl
 800cabe:	fb02 f203 	mul.w	r2, r2, r3
 800cac2:	465b      	mov	r3, fp
 800cac4:	4641      	mov	r1, r8
 800cac6:	fb01 f303 	mul.w	r3, r1, r3
 800caca:	4413      	add	r3, r2
 800cacc:	4642      	mov	r2, r8
 800cace:	4651      	mov	r1, sl
 800cad0:	fba2 4501 	umull	r4, r5, r2, r1
 800cad4:	442b      	add	r3, r5
 800cad6:	461d      	mov	r5, r3
                ((ULONG64)cluster_count);
 800cad8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cadc:	2200      	movs	r2, #0
 800cade:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cae2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800cae6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800caea:	4603      	mov	r3, r0
 800caec:	fb03 f205 	mul.w	r2, r3, r5
 800caf0:	460b      	mov	r3, r1
 800caf2:	fb04 f303 	mul.w	r3, r4, r3
 800caf6:	4413      	add	r3, r2
 800caf8:	4602      	mov	r2, r0
 800cafa:	fba4 1202 	umull	r1, r2, r4, r2
 800cafe:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800cb02:	460a      	mov	r2, r1
 800cb04:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800cb08:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800cb0c:	4413      	add	r3, r2
 800cb0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800cb12:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800cb16:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
 800cb1a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 800cb1e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb22:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800cb26:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800cb2a:	4282      	cmp	r2, r0
 800cb2c:	418b      	sbcs	r3, r1
 800cb2e:	d309      	bcc.n	800cb44 <_fx_file_open+0x54c>
 800cb30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00e      	beq.n	800cb56 <_fx_file_open+0x55e>
                ((cluster_count) && (contents < fat_last)))
 800cb38:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800cb3c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d908      	bls.n	800cb56 <_fx_file_open+0x55e>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT
 800cb44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb48:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f006 fe6f 	bl	8013830 <_tx_mutex_put>

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 800cb52:	2308      	movs	r3, #8
 800cb54:	e22c      	b.n	800cfb0 <_fx_file_open+0x9b8>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 800cb56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb5a:	4baa      	ldr	r3, [pc, #680]	; (800ce04 <_fx_file_open+0x80c>)
 800cb5c:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 800cb5e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb62:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800cb66:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb6a:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 800cb6c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb74:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 800cb76:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb7a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cb7e:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 800cb80:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb84:	2300      	movs	r3, #0
 800cb86:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 800cb88:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cb90:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800cb92:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb96:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800cb9a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb9e:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 800cba0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cba4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800cba8:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800cbaa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cbae:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800cbb2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cbb6:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 800cbba:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800cbbe:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800cbc2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 800cbc6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cbca:	2300      	movs	r3, #0
 800cbcc:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 800cbd0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d163      	bne.n	800cca0 <_fx_file_open+0x6a8>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800cbd8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cbdc:	695a      	ldr	r2, [r3, #20]
 800cbde:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cbe2:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 800cbe4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cbe8:	2200      	movs	r2, #0
 800cbea:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cbec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cbf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cbf8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800cbfc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cc00:	695b      	ldr	r3, [r3, #20]
 800cc02:	3b02      	subs	r3, #2
 800cc04:	2200      	movs	r2, #0
 800cc06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cc0a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800cc0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc14:	2200      	movs	r2, #0
 800cc16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc1a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800cc1e:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800cc22:	462b      	mov	r3, r5
 800cc24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cc28:	4642      	mov	r2, r8
 800cc2a:	fb02 f203 	mul.w	r2, r2, r3
 800cc2e:	464b      	mov	r3, r9
 800cc30:	4621      	mov	r1, r4
 800cc32:	fb01 f303 	mul.w	r3, r1, r3
 800cc36:	4413      	add	r3, r2
 800cc38:	4622      	mov	r2, r4
 800cc3a:	4641      	mov	r1, r8
 800cc3c:	fba2 1201 	umull	r1, r2, r2, r1
 800cc40:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800cc44:	460a      	mov	r2, r1
 800cc46:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800cc4a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800cc4e:	4413      	add	r3, r2
 800cc50:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cc54:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800cc58:	4623      	mov	r3, r4
 800cc5a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800cc5e:	4602      	mov	r2, r0
 800cc60:	189b      	adds	r3, r3, r2
 800cc62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc66:	460b      	mov	r3, r1
 800cc68:	462a      	mov	r2, r5
 800cc6a:	eb42 0303 	adc.w	r3, r2, r3
 800cc6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc72:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cc76:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800cc7a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 800cc7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cc82:	2200      	movs	r2, #0
 800cc84:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 800cc86:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 800cc8e:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800cc92:	f04f 0200 	mov.w	r2, #0
 800cc96:	f04f 0300 	mov.w	r3, #0
 800cc9a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800cc9e:	e140      	b.n	800cf22 <_fx_file_open+0x92a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 800cca0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cca4:	2200      	movs	r2, #0
 800cca6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ccaa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ccae:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800ccb2:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4628      	mov	r0, r5
 800ccba:	4283      	cmp	r3, r0
 800ccbc:	bf08      	it	eq
 800ccbe:	428a      	cmpeq	r2, r1
 800ccc0:	f040 80a2 	bne.w	800ce08 <_fx_file_open+0x810>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ccc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ccc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccca:	2200      	movs	r2, #0
 800cccc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ccd0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800ccd4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cce0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800cce4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800cce8:	460b      	mov	r3, r1
 800ccea:	3b02      	subs	r3, #2
 800ccec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	f143 33ff 	adc.w	r3, r3, #4294967295
 800ccf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800ccfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ccfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd00:	2200      	movs	r2, #0
 800cd02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cd06:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800cd0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cd0e:	462b      	mov	r3, r5
 800cd10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cd14:	4642      	mov	r2, r8
 800cd16:	fb02 f203 	mul.w	r2, r2, r3
 800cd1a:	464b      	mov	r3, r9
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	fb01 f303 	mul.w	r3, r1, r3
 800cd22:	4413      	add	r3, r2
 800cd24:	4622      	mov	r2, r4
 800cd26:	4641      	mov	r1, r8
 800cd28:	fba2 1201 	umull	r1, r2, r2, r1
 800cd2c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800cd30:	460a      	mov	r2, r1
 800cd32:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800cd36:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800cd3a:	4413      	add	r3, r2
 800cd3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cd40:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800cd44:	4623      	mov	r3, r4
 800cd46:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	189b      	adds	r3, r3, r2
 800cd4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd52:	460b      	mov	r3, r1
 800cd54:	462a      	mov	r2, r5
 800cd56:	eb42 0303 	adc.w	r3, r2, r3
 800cd5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800cd5e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cd62:	1e51      	subs	r1, r2, #1
 800cd64:	67b9      	str	r1, [r7, #120]	; 0x78
 800cd66:	f143 33ff 	adc.w	r3, r3, #4294967295
 800cd6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cd6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd72:	2200      	movs	r2, #0
 800cd74:	673b      	str	r3, [r7, #112]	; 0x70
 800cd76:	677a      	str	r2, [r7, #116]	; 0x74
 800cd78:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800cd7c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800cd80:	f7f3 fbca 	bl	8000518 <__aeabi_uldivmod>
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	2300      	movs	r3, #0
 800cd8a:	66ba      	str	r2, [r7, #104]	; 0x68
 800cd8c:	66fb      	str	r3, [r7, #108]	; 0x6c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800cd8e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800cd92:	4623      	mov	r3, r4
 800cd94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cd98:	4602      	mov	r2, r0
 800cd9a:	189b      	adds	r3, r3, r2
 800cd9c:	663b      	str	r3, [r7, #96]	; 0x60
 800cd9e:	460b      	mov	r3, r1
 800cda0:	462a      	mov	r2, r5
 800cda2:	eb42 0303 	adc.w	r3, r2, r3
 800cda6:	667b      	str	r3, [r7, #100]	; 0x64
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cda8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cdac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800cdb0:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800cdb4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cdb8:	1e51      	subs	r1, r2, #1
 800cdba:	65b9      	str	r1, [r7, #88]	; 0x58
 800cdbc:	f143 33ff 	adc.w	r3, r3, #4294967295
 800cdc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cdc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cdc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc8:	2200      	movs	r2, #0
 800cdca:	653b      	str	r3, [r7, #80]	; 0x50
 800cdcc:	657a      	str	r2, [r7, #84]	; 0x54
 800cdce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cdd2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cdd6:	f7f3 fb9f 	bl	8000518 <__aeabi_uldivmod>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cde2:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800cde4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cde8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800cdec:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800cdf0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800cdf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cdf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cdfa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cdfe:	631a      	str	r2, [r3, #48]	; 0x30
 800ce00:	e08f      	b.n	800cf22 <_fx_file_open+0x92a>
 800ce02:	bf00      	nop
 800ce04:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ce08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ce0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce0e:	2200      	movs	r2, #0
 800ce10:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce12:	64fa      	str	r2, [r7, #76]	; 0x4c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800ce14:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	643b      	str	r3, [r7, #64]	; 0x40
 800ce1e:	647a      	str	r2, [r7, #68]	; 0x44
 800ce20:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ce24:	460b      	mov	r3, r1
 800ce26:	3b02      	subs	r3, #2
 800ce28:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800ce30:	63fb      	str	r3, [r7, #60]	; 0x3c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800ce32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ce36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce38:	2200      	movs	r2, #0
 800ce3a:	633b      	str	r3, [r7, #48]	; 0x30
 800ce3c:	637a      	str	r2, [r7, #52]	; 0x34
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800ce3e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800ce42:	462b      	mov	r3, r5
 800ce44:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800ce48:	4642      	mov	r2, r8
 800ce4a:	fb02 f203 	mul.w	r2, r2, r3
 800ce4e:	464b      	mov	r3, r9
 800ce50:	4621      	mov	r1, r4
 800ce52:	fb01 f303 	mul.w	r3, r1, r3
 800ce56:	4413      	add	r3, r2
 800ce58:	4622      	mov	r2, r4
 800ce5a:	4641      	mov	r1, r8
 800ce5c:	fba2 1201 	umull	r1, r2, r2, r1
 800ce60:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800ce64:	460a      	mov	r2, r1
 800ce66:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800ce6a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800ce6e:	4413      	add	r3, r2
 800ce70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ce74:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800ce78:	4623      	mov	r3, r4
 800ce7a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800ce7e:	4602      	mov	r2, r0
 800ce80:	189b      	adds	r3, r3, r2
 800ce82:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce84:	460b      	mov	r3, r1
 800ce86:	462a      	mov	r2, r5
 800ce88:	eb42 0303 	adc.w	r3, r2, r3
 800ce8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800ce8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ce92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce94:	2200      	movs	r2, #0
 800ce96:	623b      	str	r3, [r7, #32]
 800ce98:	627a      	str	r2, [r7, #36]	; 0x24
 800ce9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ce9e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800cea2:	f7f3 fb39 	bl	8000518 <__aeabi_uldivmod>
 800cea6:	4602      	mov	r2, r0
 800cea8:	460b      	mov	r3, r1
 800ceaa:	2300      	movs	r3, #0
 800ceac:	61ba      	str	r2, [r7, #24]
 800ceae:	61fb      	str	r3, [r7, #28]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800ceb0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800ceb4:	4623      	mov	r3, r4
 800ceb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ceba:	4602      	mov	r2, r0
 800cebc:	189b      	adds	r3, r3, r2
 800cebe:	613b      	str	r3, [r7, #16]
 800cec0:	460b      	mov	r3, r1
 800cec2:	462a      	mov	r2, r5
 800cec4:	eb42 0303 	adc.w	r3, r2, r3
 800cec8:	617b      	str	r3, [r7, #20]
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ceca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cece:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ced2:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800ced6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ceda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cedc:	2200      	movs	r2, #0
 800cede:	60bb      	str	r3, [r7, #8]
 800cee0:	60fa      	str	r2, [r7, #12]
 800cee2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cee6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800ceea:	f7f3 fb15 	bl	8000518 <__aeabi_uldivmod>
 800ceee:	4602      	mov	r2, r0
 800cef0:	460b      	mov	r3, r1
 800cef2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cef6:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800cef8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cefc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800cf00:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800cf04:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 800cf08:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800cf0c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800cf10:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800cf12:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf16:	fb01 f202 	mul.w	r2, r1, r2
 800cf1a:	1a9a      	subs	r2, r3, r2
 800cf1c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf20:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 800cf22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cf26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d01f      	beq.n	800cf6e <_fx_file_open+0x976>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 800cf2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cf32:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800cf36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf38:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 800cf3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cf40:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800cf44:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf48:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 800cf4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800cf4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf52:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 800cf54:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf58:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800cf5c:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 800cf5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cf62:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800cf66:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf6a:	65da      	str	r2, [r3, #92]	; 0x5c
 800cf6c:	e00f      	b.n	800cf8e <_fx_file_open+0x996>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 800cf6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cf72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf76:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 800cf7a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf82:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 800cf84:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf88:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf8c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 800cf8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cf92:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cf9c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Release media protection.  */
    FX_UNPROTECT
 800cfa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cfa4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f006 fc41 	bl	8013830 <_tx_mutex_put>

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cfbc <_fx_file_read>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 800cfbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfc0:	b0aa      	sub	sp, #168	; 0xa8
 800cfc2:	af04      	add	r7, sp, #16
 800cfc4:	66f8      	str	r0, [r7, #108]	; 0x6c
 800cfc6:	66b9      	str	r1, [r7, #104]	; 0x68
 800cfc8:	667a      	str	r2, [r7, #100]	; 0x64
 800cfca:	663b      	str	r3, [r7, #96]	; 0x60
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800cfcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	4b9d      	ldr	r3, [pc, #628]	; (800d248 <_fx_file_read+0x28c>)
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d001      	beq.n	800cfda <_fx_file_read+0x1e>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800cfd6:	2307      	movs	r3, #7
 800cfd8:	e28d      	b.n	800d4f6 <_fx_file_read+0x53a>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800cfda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfde:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_reads++;
 800cfe0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cfe2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800cfe6:	1c5a      	adds	r2, r3, #1
 800cfe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cfea:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800cfee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cff2:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800cff4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	4b94      	ldr	r3, [pc, #592]	; (800d24c <_fx_file_read+0x290>)
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d001      	beq.n	800d002 <_fx_file_read+0x46>
 800cffe:	2311      	movs	r3, #17
 800d000:	e279      	b.n	800d4f6 <_fx_file_read+0x53a>
 800d002:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d004:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d008:	f04f 31ff 	mov.w	r1, #4294967295
 800d00c:	4618      	mov	r0, r3
 800d00e:	f006 f997 	bl	8013340 <_tx_mutex_get>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <_fx_file_read+0x60>
 800d018:	2311      	movs	r3, #17
 800d01a:	e26c      	b.n	800d4f6 <_fx_file_read+0x53a>

    /* Next, determine if there is any more bytes to read in the file.  */
    if (file_ptr -> fx_file_current_file_offset >=
 800d01c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d01e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800d022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d024:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 800d028:	4290      	cmp	r0, r2
 800d02a:	eb71 0303 	sbcs.w	r3, r1, r3
 800d02e:	d30a      	bcc.n	800d046 <_fx_file_read+0x8a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d030:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d032:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d036:	4618      	mov	r0, r3
 800d038:	f006 fbfa 	bl	8013830 <_tx_mutex_put>

        /* The file is at the end, return the proper status and set the
           actual size to 0.  */
        *actual_size =  0;
 800d03c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d03e:	2200      	movs	r2, #0
 800d040:	601a      	str	r2, [r3, #0]
        return(FX_END_OF_FILE);
 800d042:	2309      	movs	r3, #9
 800d044:	e257      	b.n	800d4f6 <_fx_file_read+0x53a>
    }

    /* At this point there is something to read.  */

    /* Setup local buffer pointer.  */
    destination_ptr =  (UCHAR *)buffer_ptr;
 800d046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Determine if there are less bytes left in the file than that specified
       by the request.  If so, adjust the requested size.  */
    if ((ULONG64)request_size >
 800d04c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d04e:	2200      	movs	r2, #0
 800d050:	4698      	mov	r8, r3
 800d052:	4691      	mov	r9, r2
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 800d054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d056:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800d05a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d05c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d060:	1a84      	subs	r4, r0, r2
 800d062:	eb61 0503 	sbc.w	r5, r1, r3
    if ((ULONG64)request_size >
 800d066:	4544      	cmp	r4, r8
 800d068:	eb75 0309 	sbcs.w	r3, r5, r9
 800d06c:	d209      	bcs.n	800d082 <_fx_file_read+0xc6>
    {

        /* Adjust the bytes remaining to what's available.  */
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 800d06e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d070:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d074:	4611      	mov	r1, r2
 800d076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d078:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d07c:	4613      	mov	r3, r2
 800d07e:	1acb      	subs	r3, r1, r3
 800d080:	667b      	str	r3, [r7, #100]	; 0x64
    }

    /* Setup the remaining number of bytes to read.  */
    bytes_remaining =  request_size;
 800d082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Loop to read all of the bytes.  */
    while (bytes_remaining)
 800d088:	e20a      	b.n	800d4a0 <_fx_file_read+0x4e4>
    {

        /* Determine if a beginning or ending partial read is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800d08a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d105      	bne.n	800d09e <_fx_file_read+0xe2>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800d092:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800d096:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d24d      	bcs.n	800d13a <_fx_file_read+0x17e>
        {

            /* A partial sector read is required.  */

            /* Read the current logical sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr,
 800d09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0a0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                      file_ptr -> fx_file_current_logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800d0a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d0a6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr,
 800d0a8:	2304      	movs	r3, #4
 800d0aa:	9302      	str	r3, [sp, #8]
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	9301      	str	r3, [sp, #4]
 800d0b0:	9200      	str	r2, [sp, #0]
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d0b8:	f004 fb0e 	bl	80116d8 <_fx_utility_logical_sector_read>
 800d0bc:	67b8      	str	r0, [r7, #120]	; 0x78

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800d0be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d007      	beq.n	800d0d4 <_fx_file_read+0x118>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800d0c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d0c6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f006 fbb0 	bl	8013830 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800d0d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0d2:	e210      	b.n	800d4f6 <_fx_file_read+0x53a>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800d0d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d0d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800d0d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            /* Check to see if only a portion of the read sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800d0e2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d0e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d903      	bls.n	800d0f6 <_fx_file_read+0x13a>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  bytes_remaining;
 800d0ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800d0f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d0f8:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800d0fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800d0fe:	4413      	add	r3, r2
 800d100:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d104:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d108:	4618      	mov	r0, r3
 800d10a:	f004 fee1 	bl	8011ed0 <_fx_utility_memory_copy>
                                    destination_ptr, copy_bytes);

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800d10e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d116:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800d118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d11a:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800d11c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d120:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr + copy_bytes;
 800d12a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d12e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d132:	4413      	add	r3, r2
 800d134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d138:	e108      	b.n	800d34c <_fx_file_read+0x390>
            /* Attempt to read multiple sectors directly into the destination
               buffer.  */

            /* Calculate the number of whole sectors to read directly into
               the destination buffer.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800d13a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d13c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d13e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d142:	fbb3 f3f2 	udiv	r3, r3, r2
 800d146:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800d14a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d14c:	6a1b      	ldr	r3, [r3, #32]
 800d14e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d156:	677b      	str	r3, [r7, #116]	; 0x74
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d15a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800d15c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d160:	1ad3      	subs	r3, r2, r3
 800d162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d166:	e033      	b.n	800d1d0 <_fx_file_read+0x214>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800d168:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d16c:	461a      	mov	r2, r3
 800d16e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d172:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d174:	f002 fea2 	bl	800febc <_fx_utility_FAT_entry_read>
 800d178:	67b8      	str	r0, [r7, #120]	; 0x78

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d17a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10a      	bne.n	800d196 <_fx_file_read+0x1da>
 800d180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d182:	2b01      	cmp	r3, #1
 800d184:	d907      	bls.n	800d196 <_fx_file_read+0x1da>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800d186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d188:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d18c:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d192:	429a      	cmp	r2, r3
 800d194:	d20c      	bcs.n	800d1b0 <_fx_file_read+0x1f4>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d196:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d198:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d19c:	4618      	mov	r0, r3
 800d19e:	f006 fb47 	bl	8013830 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800d1a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <_fx_file_read+0x1f0>
                        {
                            return(status);
 800d1a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1aa:	e1a4      	b.n	800d4f6 <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800d1ac:	2308      	movs	r3, #8
 800d1ae:	e1a2      	b.n	800d4f6 <_fx_file_read+0x53a>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800d1b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d1b4:	1c5a      	adds	r2, r3, #1
 800d1b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d110      	bne.n	800d1de <_fx_file_read+0x222>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800d1bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800d1c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1ca:	4413      	add	r3, r2
 800d1cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d1d0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d1d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d3c5      	bcc.n	800d168 <_fx_file_read+0x1ac>
 800d1dc:	e000      	b.n	800d1e0 <_fx_file_read+0x224>
                        break;
 800d1de:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800d1e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d1e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d203      	bcs.n	800d1f4 <_fx_file_read+0x238>
            {
                sectors = i;
 800d1ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            /* Determine if this is a single sector read request.  If so, read the sector so it will
               come from the internal cache.  */
            if (sectors == 1)
 800d1f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d129      	bne.n	800d250 <_fx_file_read+0x294>
            {

                /* Read the current logical sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr,
 800d1fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800d202:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d204:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800d206:	2304      	movs	r3, #4
 800d208:	9302      	str	r3, [sp, #8]
 800d20a:	2301      	movs	r3, #1
 800d20c:	9301      	str	r3, [sp, #4]
 800d20e:	9200      	str	r2, [sp, #0]
 800d210:	4602      	mov	r2, r0
 800d212:	460b      	mov	r3, r1
 800d214:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d216:	f004 fa5f 	bl	80116d8 <_fx_utility_logical_sector_read>
 800d21a:	67b8      	str	r0, [r7, #120]	; 0x78

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800d21c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d007      	beq.n	800d232 <_fx_file_read+0x276>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d222:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d224:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d228:	4618      	mov	r0, r3
 800d22a:	f006 fb01 	bl	8013830 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800d22e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d230:	e161      	b.n	800d4f6 <_fx_file_read+0x53a>
                }

                /* Actually perform the memory copy.  */
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 800d232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d234:	6898      	ldr	r0, [r3, #8]
 800d236:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d23a:	461a      	mov	r2, r3
 800d23c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d240:	f004 fe46 	bl	8011ed0 <_fx_utility_memory_copy>
 800d244:	e02f      	b.n	800d2a6 <_fx_file_read+0x2ea>
 800d246:	bf00      	nop
 800d248:	46494c45 	.word	0x46494c45
 800d24c:	4d454449 	.word	0x4d454449

                /* Multiple sector read request.  Read all the sectors at once.  */

                /* Perform the data read directly into the user's buffer of
                   the appropriate number of sectors.  */
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 800d250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d252:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800d256:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d258:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d25c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800d260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d262:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800d266:	2304      	movs	r3, #4
 800d268:	9302      	str	r3, [sp, #8]
 800d26a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d26e:	9301      	str	r3, [sp, #4]
 800d270:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d274:	9300      	str	r3, [sp, #0]
 800d276:	4602      	mov	r2, r0
 800d278:	460b      	mov	r3, r1
 800d27a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d27c:	f004 fa2c 	bl	80116d8 <_fx_utility_logical_sector_read>
 800d280:	67b8      	str	r0, [r7, #120]	; 0x78
                                                          destination_ptr, (ULONG) sectors, FX_DATA_SECTOR);
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 800d282:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d284:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d288:	461a      	mov	r2, r3
 800d28a:	2300      	movs	r3, #0
 800d28c:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800d290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d292:	2b00      	cmp	r3, #0
 800d294:	d007      	beq.n	800d2a6 <_fx_file_read+0x2ea>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d296:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d298:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d29c:	4618      	mov	r0, r3
 800d29e:	f006 fac7 	bl	8013830 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800d2a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2a4:	e127      	b.n	800d4f6 <_fx_file_read+0x53a>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800d2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2a8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800d2ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2b6:	65fa      	str	r2, [r7, #92]	; 0x5c
                file_ptr -> fx_file_current_logical_sector +
 800d2b8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800d2bc:	4623      	mov	r3, r4
 800d2be:	18c3      	adds	r3, r0, r3
 800d2c0:	653b      	str	r3, [r7, #80]	; 0x50
 800d2c2:	462b      	mov	r3, r5
 800d2c4:	eb41 0303 	adc.w	r3, r1, r3
 800d2c8:	657b      	str	r3, [r7, #84]	; 0x54
            file_ptr -> fx_file_current_logical_sector =
 800d2ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2cc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d2d0:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative sector and cluster as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800d2d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800d2d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d2e0:	4413      	add	r3, r2
 800d2e2:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800d2e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d2e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800d2e8:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800d2ec:	18ca      	adds	r2, r1, r3
 800d2ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2f0:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector +
 800d2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d2fa:	4413      	add	r3, r2
 800d2fc:	1e59      	subs	r1, r3, #1
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 800d2fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d302:	fbb1 f3f2 	udiv	r3, r1, r2
 800d306:	fb02 f303 	mul.w	r3, r2, r3
 800d30a:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800d30c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d30e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800d310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800d314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d316:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800d318:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d31a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d31e:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800d320:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d328:	fb03 f202 	mul.w	r2, r3, r2
            bytes_remaining =  bytes_remaining -
 800d32c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d330:	1a9b      	subs	r3, r3, r2
 800d332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800d336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d33a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d33e:	fb03 f202 	mul.w	r2, r3, r2
            destination_ptr =  destination_ptr +
 800d342:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d346:	4413      	add	r3, r2
 800d348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* At this point, we have either read a partial sector or have successfully
           read one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800d34c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d34e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800d350:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800d354:	429a      	cmp	r2, r3
 800d356:	f0c0 80a3 	bcc.w	800d4a0 <_fx_file_read+0x4e4>
        {

            /* Determine if we are at the exact physical end of the file at the end of reading.  */
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800d35a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d11a      	bne.n	800d398 <_fx_file_read+0x3dc>
 800d362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d364:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d368:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d36a:	2000      	movs	r0, #0
 800d36c:	64b9      	str	r1, [r7, #72]	; 0x48
 800d36e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d370:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d374:	4621      	mov	r1, r4
 800d376:	1851      	adds	r1, r2, r1
 800d378:	6439      	str	r1, [r7, #64]	; 0x40
 800d37a:	4629      	mov	r1, r5
 800d37c:	414b      	adcs	r3, r1
 800d37e:	647b      	str	r3, [r7, #68]	; 0x44
                                           file_ptr -> fx_file_current_available_size))
 800d380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d382:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800d386:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d38a:	4621      	mov	r1, r4
 800d38c:	4291      	cmp	r1, r2
 800d38e:	4629      	mov	r1, r5
 800d390:	eb71 0303 	sbcs.w	r3, r1, r3
 800d394:	f080 808a 	bcs.w	800d4ac <_fx_file_read+0x4f0>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800d398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39c:	1c5a      	adds	r2, r3, #1
 800d39e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800d3a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800d3a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d368      	bcc.n	800d480 <_fx_file_read+0x4c4>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800d3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3b0:	6a19      	ldr	r1, [r3, #32]
 800d3b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d3ba:	f002 fd7f 	bl	800febc <_fx_utility_FAT_entry_read>
 800d3be:	67b8      	str	r0, [r7, #120]	; 0x78
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d3c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d10a      	bne.n	800d3dc <_fx_file_read+0x420>
 800d3c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d907      	bls.n	800d3dc <_fx_file_read+0x420>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800d3cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d3ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d3d2:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d3d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d20c      	bcs.n	800d3f6 <_fx_file_read+0x43a>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d3dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d3de:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f006 fa24 	bl	8013830 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800d3e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <_fx_file_read+0x436>
                        {
                            return(status);
 800d3ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3f0:	e081      	b.n	800d4f6 <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800d3f2:	2308      	movs	r3, #8
 800d3f4:	e07f      	b.n	800d4f6 <_fx_file_read+0x53a>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800d3f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d3f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3fa:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800d3fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d400:	1c5a      	adds	r2, r3, #1
 800d402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d404:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d406:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d40a:	2200      	movs	r2, #0
 800d40c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d40e:	63fa      	str	r2, [r7, #60]	; 0x3c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800d410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d412:	2200      	movs	r2, #0
 800d414:	633b      	str	r3, [r7, #48]	; 0x30
 800d416:	637a      	str	r2, [r7, #52]	; 0x34
 800d418:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d41c:	460b      	mov	r3, r1
 800d41e:	3b02      	subs	r3, #2
 800d420:	62bb      	str	r3, [r7, #40]	; 0x28
 800d422:	4613      	mov	r3, r2
 800d424:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d428:	62fb      	str	r3, [r7, #44]	; 0x2c
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800d42a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d42e:	2200      	movs	r2, #0
 800d430:	623b      	str	r3, [r7, #32]
 800d432:	627a      	str	r2, [r7, #36]	; 0x24
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800d434:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d438:	462b      	mov	r3, r5
 800d43a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d43e:	4642      	mov	r2, r8
 800d440:	fb02 f203 	mul.w	r2, r2, r3
 800d444:	464b      	mov	r3, r9
 800d446:	4621      	mov	r1, r4
 800d448:	fb01 f303 	mul.w	r3, r1, r3
 800d44c:	4413      	add	r3, r2
 800d44e:	4622      	mov	r2, r4
 800d450:	4641      	mov	r1, r8
 800d452:	fba2 ab01 	umull	sl, fp, r2, r1
 800d456:	445b      	add	r3, fp
 800d458:	469b      	mov	fp, r3
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d45a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d45e:	460b      	mov	r3, r1
 800d460:	eb13 030a 	adds.w	r3, r3, sl
 800d464:	61bb      	str	r3, [r7, #24]
 800d466:	4613      	mov	r3, r2
 800d468:	eb43 030b 	adc.w	r3, r3, fp
 800d46c:	61fb      	str	r3, [r7, #28]
 800d46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d470:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d474:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800d478:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d47a:	2300      	movs	r3, #0
 800d47c:	6393      	str	r3, [r2, #56]	; 0x38
 800d47e:	e00c      	b.n	800d49a <_fx_file_read+0x4de>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800d480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d482:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800d486:	1c51      	adds	r1, r2, #1
 800d488:	6139      	str	r1, [r7, #16]
 800d48a:	f143 0300 	adc.w	r3, r3, #0
 800d48e:	617b      	str	r3, [r7, #20]
 800d490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d492:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d496:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800d49a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d49c:	2300      	movs	r3, #0
 800d49e:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800d4a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f47f adf0 	bne.w	800d08a <_fx_file_read+0xce>
 800d4aa:	e000      	b.n	800d4ae <_fx_file_read+0x4f2>
                break;
 800d4ac:	bf00      	nop
        }
    }

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + (ULONG64)request_size;
 800d4ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d4b4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d4b6:	2000      	movs	r0, #0
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d4c0:	4621      	mov	r1, r4
 800d4c2:	1851      	adds	r1, r2, r1
 800d4c4:	6039      	str	r1, [r7, #0]
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	eb43 0101 	adc.w	r1, r3, r1
 800d4cc:	6079      	str	r1, [r7, #4]
    file_ptr -> fx_file_current_file_offset =
 800d4ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d4d4:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Store the number of bytes actually read.  */
    *actual_size =  request_size;
 800d4d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d4dc:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the bytes read.  */
    FX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, FX_TRACE_FILE_READ, 0, 0, 0, request_size)

    /* Update the last accessed date.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800d4de:	4b08      	ldr	r3, [pc, #32]	; (800d500 <_fx_file_read+0x544>)
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Release media protection.  */
    FX_UNPROTECT
 800d4e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4ea:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f006 f99e 	bl	8013830 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3798      	adds	r7, #152	; 0x98
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d500:	24014c30 	.word	0x24014c30

0800d504 <_fx_file_seek>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef FX_DISABLE_ONE_LINE_FUNCTION
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 800d50e:	6839      	ldr	r1, [r7, #0]
 800d510:	2000      	movs	r0, #0
 800d512:	460a      	mov	r2, r1
 800d514:	4603      	mov	r3, r0
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7fe fd9e 	bl	800c058 <_fx_file_extended_seek>
 800d51c:	4603      	mov	r3, r0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
	...

0800d528 <_fx_file_write>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 800d528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d52c:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800d530:	af04      	add	r7, sp, #16
 800d532:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 800d536:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800d53a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800d53e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	4bd9      	ldr	r3, [pc, #868]	; (800d8ac <_fx_file_write+0x384>)
 800d546:	429a      	cmp	r2, r3
 800d548:	d002      	beq.n	800d550 <_fx_file_write+0x28>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800d54a:	2307      	movs	r3, #7
 800d54c:	f000 bf26 	b.w	800e39c <_fx_file_write+0xe74>
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800d550:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d556:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_writes++;
 800d55a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d55e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d562:	1c5a      	adds	r2, r3, #1
 800d564:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d568:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
#else
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 800d56c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d570:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d574:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800d578:	2000      	movs	r0, #0
 800d57a:	460c      	mov	r4, r1
 800d57c:	4605      	mov	r5, r0
 800d57e:	eb12 0804 	adds.w	r8, r2, r4
 800d582:	eb43 0905 	adc.w	r9, r3, r5
 800d586:	f1b9 0f01 	cmp.w	r9, #1
 800d58a:	d302      	bcc.n	800d592 <_fx_file_write+0x6a>
#endif /* FX_ENABLE_EXFAT */
    {

        /* Return the no more space error, since the new file size would be larger than
           the 32-bit field to represent it in the file's directory entry.  */
        return(FX_NO_MORE_SPACE);
 800d58c:	230a      	movs	r3, #10
 800d58e:	f000 bf05 	b.w	800e39c <_fx_file_write+0xe74>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_WRITE, file_ptr, buffer_ptr, size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800d592:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	4bc5      	ldr	r3, [pc, #788]	; (800d8b0 <_fx_file_write+0x388>)
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d002      	beq.n	800d5a4 <_fx_file_write+0x7c>
 800d59e:	2311      	movs	r3, #17
 800d5a0:	f000 befc 	b.w	800e39c <_fx_file_write+0xe74>
 800d5a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d5a8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d5ac:	f04f 31ff 	mov.w	r1, #4294967295
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f005 fec5 	bl	8013340 <_tx_mutex_get>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d002      	beq.n	800d5c2 <_fx_file_write+0x9a>
 800d5bc:	2311      	movs	r3, #17
 800d5be:	f000 beed 	b.w	800e39c <_fx_file_write+0xe74>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800d5c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d5c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d009      	beq.n	800d5e2 <_fx_file_write+0xba>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d5ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d5d2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f006 f92a 	bl	8013830 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800d5dc:	2323      	movs	r3, #35	; 0x23
 800d5de:	f000 bedd 	b.w	800e39c <_fx_file_write+0xe74>
    }

    /* Make sure this file is open for writing.  */
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 800d5e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d009      	beq.n	800d600 <_fx_file_write+0xd8>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d5ec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d5f0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f006 f91b 	bl	8013830 <_tx_mutex_put>

        /* Return the access error exception - a write was attempted from
           a file opened for reading!  */
        return(FX_ACCESS_ERROR);
 800d5fa:	2306      	movs	r3, #6
 800d5fc:	f000 bece 	b.w	800e39c <_fx_file_write+0xe74>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d600:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800d606:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d60c:	fb02 f303 	mul.w	r3, r2, r3
 800d610:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800d614:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d109      	bne.n	800d630 <_fx_file_write+0x108>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800d61c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d620:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d624:	4618      	mov	r0, r3
 800d626:	f006 f903 	bl	8013830 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800d62a:	2302      	movs	r3, #2
 800d62c:	f000 beb6 	b.w	800e39c <_fx_file_write+0xe74>
    }

    /* Initialized first new cluster. */
    first_new_cluster =  0;
 800d630:	2300      	movs	r3, #0
 800d632:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Next, determine if there is enough room to write the specified number of
       bytes to the clusters already allocated to this file.  */
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 800d636:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d63a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800d63e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d642:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d646:	ebb0 0a02 	subs.w	sl, r0, r2
 800d64a:	eb61 0b03 	sbc.w	fp, r1, r3
 800d64e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d652:	2200      	movs	r2, #0
 800d654:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800d658:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800d65c:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 800d660:	460b      	mov	r3, r1
 800d662:	459a      	cmp	sl, r3
 800d664:	4613      	mov	r3, r2
 800d666:	eb7b 0303 	sbcs.w	r3, fp, r3
 800d66a:	f080 82a9 	bcs.w	800dbc0 <_fx_file_write+0x698>

        if (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset < size)
        {
#endif /* FX_ENABLE_FAULT_TOLERANT */
            /* Calculate clusters that are needed for data append except ones overwritten. */
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800d66e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800d672:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d676:	4413      	add	r3, r2
 800d678:	3b01      	subs	r3, #1
 800d67a:	2200      	movs	r2, #0
 800d67c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800d680:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800d684:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d688:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800d68c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d690:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800d694:	1a84      	subs	r4, r0, r2
 800d696:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800d69a:	eb61 0303 	sbc.w	r3, r1, r3
 800d69e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800d6a2:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800d6a6:	4623      	mov	r3, r4
 800d6a8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	189b      	adds	r3, r3, r2
 800d6b0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	462a      	mov	r2, r5
 800d6b8:	eb42 0303 	adc.w	r3, r2, r3
 800d6bc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800d6c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800d6ca:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800d6ce:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d6d2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800d6d6:	f7f2 ff1f 	bl	8000518 <__aeabi_uldivmod>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	460b      	mov	r3, r1
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800d6de:	4613      	mov	r3, r2
 800d6e0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        /* Determine if we have enough space left.  */
#ifdef FX_ENABLE_FAULT_TOLERANT
        if (clusters + replace_clusters > media_ptr -> fx_media_available_clusters)
#else
        if (clusters > media_ptr -> fx_media_available_clusters)
 800d6e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d6e8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d6ea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d909      	bls.n	800d706 <_fx_file_write+0x1de>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 800d6f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d6f6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f006 f898 	bl	8013830 <_tx_mutex_put>

            /* Out of disk space.  */
            return(FX_NO_MORE_SPACE);
 800d700:	230a      	movs	r3, #10
 800d702:	f000 be4b 	b.w	800e39c <_fx_file_write+0xe74>
        }

        /* Update the file total cluster count.  */
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 800d706:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d70a:	691a      	ldr	r2, [r3, #16]
 800d70c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d710:	441a      	add	r2, r3
 800d712:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d716:	611a      	str	r2, [r3, #16]
        /* Check for wrap-around when updating the available size.  */
#ifdef FX_ENABLE_EXFAT
        if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
            (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL))
#else
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 800d718:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d71c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800d720:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d724:	2200      	movs	r2, #0
 800d726:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800d72a:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800d72e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d732:	2200      	movs	r2, #0
 800d734:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800d738:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800d73c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800d740:	464b      	mov	r3, r9
 800d742:	e9d7 ab4a 	ldrd	sl, fp, [r7, #296]	; 0x128
 800d746:	4652      	mov	r2, sl
 800d748:	fb02 f203 	mul.w	r2, r2, r3
 800d74c:	465b      	mov	r3, fp
 800d74e:	4644      	mov	r4, r8
 800d750:	fb04 f303 	mul.w	r3, r4, r3
 800d754:	4413      	add	r3, r2
 800d756:	4642      	mov	r2, r8
 800d758:	4654      	mov	r4, sl
 800d75a:	fba2 4204 	umull	r4, r2, r2, r4
 800d75e:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800d762:	4622      	mov	r2, r4
 800d764:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 800d768:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800d76c:	4413      	add	r3, r2
 800d76e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800d772:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 800d776:	4623      	mov	r3, r4
 800d778:	18c3      	adds	r3, r0, r3
 800d77a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800d77e:	462b      	mov	r3, r5
 800d780:	eb41 0303 	adc.w	r3, r1, r3
 800d784:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800d788:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d308      	bcc.n	800d7a2 <_fx_file_write+0x27a>
#endif /* FX_ENABLE_EXFAT */
        {

            /* 32-bit wrap around condition is present.  Just set the available file size to all ones, which is
               the maximum file size.  */
            file_ptr -> fx_file_current_available_size =  0xFFFFFFFFULL;
 800d790:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800d794:	f04f 32ff 	mov.w	r2, #4294967295
 800d798:	f04f 0300 	mov.w	r3, #0
 800d79c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800d7a0:	e03d      	b.n	800d81e <_fx_file_write+0x2f6>
        else
        {

            /* Normal condition, update the available size.  */
            file_ptr -> fx_file_current_available_size =
                file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters;
 800d7a2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d7a6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800d7aa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800d7b4:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800d7b8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800d7c2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800d7c6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800d7ca:	464b      	mov	r3, r9
 800d7cc:	e9d7 ab44 	ldrd	sl, fp, [r7, #272]	; 0x110
 800d7d0:	4652      	mov	r2, sl
 800d7d2:	fb02 f203 	mul.w	r2, r2, r3
 800d7d6:	465b      	mov	r3, fp
 800d7d8:	4644      	mov	r4, r8
 800d7da:	fb04 f303 	mul.w	r3, r4, r3
 800d7de:	4413      	add	r3, r2
 800d7e0:	4642      	mov	r2, r8
 800d7e2:	4654      	mov	r4, sl
 800d7e4:	fba2 4204 	umull	r4, r2, r2, r4
 800d7e8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800d7ec:	4622      	mov	r2, r4
 800d7ee:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 800d7f2:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800d7f6:	4413      	add	r3, r2
 800d7f8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800d7fc:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 800d800:	4623      	mov	r3, r4
 800d802:	18c3      	adds	r3, r0, r3
 800d804:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d808:	462b      	mov	r3, r5
 800d80a:	eb41 0303 	adc.w	r3, r1, r3
 800d80e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            file_ptr -> fx_file_current_available_size =
 800d812:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d816:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800d81a:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
        /* Account for newly allocated clusters. */
        clusters += replace_clusters;
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Decrease the available clusters in the media control block. */
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 800d81e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d822:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d824:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d828:	1ad2      	subs	r2, r2, r3
 800d82a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d82e:	67da      	str	r2, [r3, #124]	; 0x7c
            dont_use_fat_old = (UCHAR)file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat;
        }
#endif /* FX_ENABLE_EXFAT && FX_ENABLE_FAULT_TOLERANT */

        /* Search for the additional clusters we need.  */
        total_clusters =     media_ptr -> fx_media_total_clusters;
 800d830:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d836:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
#endif /* FX_ENABLE_EXFAT */
        }
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 800d83a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d83e:	69db      	ldr	r3, [r3, #28]
 800d840:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        }

        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800d844:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d84c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

        /* Loop to find the needed clusters.  */
        while (clusters)
 800d850:	e16f      	b.n	800db32 <_fx_file_write+0x60a>
        {

            /* Decrease the cluster count.  */
            clusters--;
 800d852:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d856:	3b01      	subs	r3, #1
 800d858:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
                /* Loop to find the first available cluster.  */
                do
                {

                    /* Make sure we stop looking after one pass through the FAT table.  */
                    if (!total_clusters)
 800d85c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800d860:	2b00      	cmp	r3, #0
 800d862:	d109      	bne.n	800d878 <_fx_file_write+0x350>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d864:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d868:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d86c:	4618      	mov	r0, r3
 800d86e:	f005 ffdf 	bl	8013830 <_tx_mutex_put>

                        /* Something is wrong with the media - the desired clusters were
                           not found in the FAT table.  */
                        return(FX_NO_MORE_SPACE);
 800d872:	230a      	movs	r3, #10
 800d874:	f000 bd92 	b.w	800e39c <_fx_file_write+0xe74>
                    }

                    /* Read FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800d878:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800d87c:	461a      	mov	r2, r3
 800d87e:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800d882:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800d886:	f002 fb19 	bl	800febc <_fx_utility_FAT_entry_read>
 800d88a:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Check for a bad status.  */
                    if (status != FX_SUCCESS)
 800d88e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00e      	beq.n	800d8b4 <_fx_file_write+0x38c>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d896:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d89a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f005 ffc6 	bl	8013830 <_tx_mutex_put>

                        /* Return the bad status.  */
                        return(status);
 800d8a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d8a8:	f000 bd78 	b.w	800e39c <_fx_file_write+0xe74>
 800d8ac:	46494c45 	.word	0x46494c45
 800d8b0:	4d454449 	.word	0x4d454449
                    }

                    /* Decrement the total cluster count.  */
                    total_clusters--;
 800d8b4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800d8b8:	3b01      	subs	r3, #1
 800d8ba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

                    /* Determine if the FAT entry is free.  */
                    if (FAT_value == FX_FREE_CLUSTER)
 800d8be:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d116      	bne.n	800d8f4 <_fx_file_write+0x3cc>
                    {

                        /* Move cluster search pointer forward.  */
                        media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800d8c6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d8ca:	1c5a      	adds	r2, r3, #1
 800d8cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                        /* Determine if this needs to be wrapped.  */
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800d8d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8d8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800d8dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8e2:	3302      	adds	r3, #2
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d316      	bcc.n	800d916 <_fx_file_write+0x3ee>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800d8e8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d8ec:	2302      	movs	r3, #2
 800d8ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                        }

                        /* Break this loop.  */
                        break;
 800d8f2:	e010      	b.n	800d916 <_fx_file_write+0x3ee>
                    }
                    else
                    {

                        /* FAT entry is not free... Advance the FAT index.  */
                        FAT_index++;
 800d8f4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

                        /* Determine if we need to wrap the FAT index around.  */
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800d8fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d904:	1c9a      	adds	r2, r3, #2
 800d906:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d3a6      	bcc.n	800d85c <_fx_file_write+0x334>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            FAT_index =  FX_FAT_ENTRY_START;
 800d90e:	2302      	movs	r3, #2
 800d910:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
                    if (!total_clusters)
 800d914:	e7a2      	b.n	800d85c <_fx_file_write+0x334>
                        break;
 800d916:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if we have found the first new cluster yet.  */
            if (first_new_cluster == 0)
 800d918:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d103      	bne.n	800d928 <_fx_file_write+0x400>
            {

                /* Remember the first new cluster. */
                first_new_cluster =  FAT_index;
 800d920:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d924:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Make a quick check to see if an empty, cluster-less file
               is being written to for the first time.  */
            if (last_cluster)
 800d928:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f000 808f 	beq.w	800da50 <_fx_file_write+0x528>
            {

                /* Check for the file's cluster.  We won't perform this link until the
                   entire FAT chain is built.  */
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 800d932:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d936:	69da      	ldr	r2, [r3, #28]
 800d938:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d009      	beq.n	800d954 <_fx_file_write+0x42c>
                    {
#endif /* FX_ENABLE_EXFAT */

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800d940:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800d944:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800d948:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800d94c:	f002 fcdf 	bl	801030e <_fx_utility_FAT_entry_write>
 800d950:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                    }
#endif /* FX_ENABLE_EXFAT */
                }

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800d954:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d00a      	beq.n	800d972 <_fx_file_write+0x44a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d95c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d960:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d964:	4618      	mov	r0, r3
 800d966:	f005 ff63 	bl	8013830 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800d96a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d96e:	f000 bd15 	b.w	800e39c <_fx_file_write+0xe74>
                }

                /* Determine if we are adding a sector after a write filled the previously
                   allocated cluster exactly.  */
                if ((file_ptr -> fx_file_current_relative_sector >=
 800d972:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800d978:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d97e:	3b01      	subs	r3, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 800d980:	429a      	cmp	r2, r3
 800d982:	f0c0 80cc 	bcc.w	800db1e <_fx_file_write+0x5f6>
                    (file_ptr -> fx_file_current_logical_offset >=
 800d986:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d98a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                     media_ptr -> fx_media_bytes_per_sector))
 800d98c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800d992:	429a      	cmp	r2, r3
 800d994:	f0c0 80c3 	bcc.w	800db1e <_fx_file_write+0x5f6>
                {

                    /* Yes, we need to adjust all of the pertinent file parameters for
                       writing into this newly allocated cluster.  */
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800d998:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800d99c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d9a0:	6213      	str	r3, [r2, #32]
                    file_ptr -> fx_file_current_relative_cluster++;
 800d9a2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a8:	1c5a      	adds	r2, r3, #1
 800d9aa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d9ae:	635a      	str	r2, [r3, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 800d9b0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	6393      	str	r3, [r2, #56]	; 0x38
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d9b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d9c4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800d9c8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d9cc:	3b02      	subs	r3, #2
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d9d4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800d9d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d9e4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800d9e8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800d9ec:	462b      	mov	r3, r5
 800d9ee:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800d9f2:	4642      	mov	r2, r8
 800d9f4:	fb02 f203 	mul.w	r2, r2, r3
 800d9f8:	464b      	mov	r3, r9
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	fb01 f303 	mul.w	r3, r1, r3
 800da00:	4413      	add	r3, r2
 800da02:	4622      	mov	r2, r4
 800da04:	4641      	mov	r1, r8
 800da06:	fba2 1201 	umull	r1, r2, r2, r1
 800da0a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800da0e:	460a      	mov	r2, r1
 800da10:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800da14:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800da18:	4413      	add	r3, r2
 800da1a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800da1e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800da22:	4623      	mov	r3, r4
 800da24:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800da28:	4602      	mov	r2, r0
 800da2a:	189b      	adds	r3, r3, r2
 800da2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800da30:	462b      	mov	r3, r5
 800da32:	460a      	mov	r2, r1
 800da34:	4153      	adcs	r3, r2
 800da36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800da3a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800da3e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800da42:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    file_ptr -> fx_file_current_logical_offset =    0;
 800da46:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800da4a:	2300      	movs	r3, #0
 800da4c:	6313      	str	r3, [r2, #48]	; 0x30
 800da4e:	e066      	b.n	800db1e <_fx_file_write+0x5f6>
            {

                /* This is the first cluster allocated for the file.  Just
                   remember it as being the first and setup the other file
                   pointers accordingly.  */
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 800da50:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800da54:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800da58:	6153      	str	r3, [r2, #20]
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800da5a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800da5e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800da62:	6213      	str	r3, [r2, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 800da64:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800da68:	2300      	movs	r3, #0
 800da6a:	6353      	str	r3, [r2, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800da6c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800da70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da72:	2200      	movs	r2, #0
 800da74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800da78:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800da7c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800da80:	3b02      	subs	r3, #2
 800da82:	2200      	movs	r2, #0
 800da84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800da88:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800da8c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800da90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da92:	2200      	movs	r2, #0
 800da94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800da98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800da9c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800daa0:	462b      	mov	r3, r5
 800daa2:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800daa6:	4642      	mov	r2, r8
 800daa8:	fb02 f203 	mul.w	r2, r2, r3
 800daac:	464b      	mov	r3, r9
 800daae:	4621      	mov	r1, r4
 800dab0:	fb01 f303 	mul.w	r3, r1, r3
 800dab4:	4413      	add	r3, r2
 800dab6:	4622      	mov	r2, r4
 800dab8:	4641      	mov	r1, r8
 800daba:	fba2 1201 	umull	r1, r2, r2, r1
 800dabe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800dac2:	460a      	mov	r2, r1
 800dac4:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800dac8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800dacc:	4413      	add	r3, r2
 800dace:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800dad2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800dad6:	4623      	mov	r3, r4
 800dad8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800dadc:	4602      	mov	r2, r0
 800dade:	189b      	adds	r3, r3, r2
 800dae0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dae4:	462b      	mov	r3, r5
 800dae6:	460a      	mov	r2, r1
 800dae8:	4153      	adcs	r3, r2
 800daea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800daee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800daf2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800daf6:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
#ifdef FX_ENABLE_FAULT_TOLERANT
                if (file_ptr -> fx_file_last_physical_cluster == 0)
#endif /* FX_ENABLE_FAULT_TOLERANT */
                {
                    file_ptr -> fx_file_current_logical_offset =    0;
 800dafa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dafe:	2300      	movs	r3, #0
 800db00:	6313      	str	r3, [r2, #48]	; 0x30
                    file_ptr -> fx_file_current_file_offset =       0;
 800db02:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800db06:	f04f 0200 	mov.w	r2, #0
 800db0a:	f04f 0300 	mov.w	r3, #0
 800db0e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }

                /* Also remember this as the first cluster in the directory
                   entry.  */
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 800db12:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800db16:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800db1a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                }
            }
#endif /* FX_ENABLE_EXFAT */

            /* Otherwise, remember the new FAT index as the last.  */
            last_cluster =  FAT_index;
 800db1e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800db22:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

            /* Move to the next FAT entry.  */
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800db26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db2e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        while (clusters)
 800db32:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800db36:	2b00      	cmp	r3, #0
 800db38:	f47f ae8b 	bne.w	800d852 <_fx_file_write+0x32a>
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800db3c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800db44:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800db48:	461a      	mov	r2, r3
 800db4a:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800db4e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800db52:	f002 fbdc 	bl	801030e <_fx_utility_FAT_entry_write>
 800db56:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for a bad FAT write status.  */
            if (status !=  FX_SUCCESS)
 800db5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d00a      	beq.n	800db78 <_fx_file_write+0x650>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800db62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db66:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800db6a:	4618      	mov	r0, r3
 800db6c:	f005 fe60 	bl	8013830 <_tx_mutex_put>

                /* Return the bad status.  */
                return(status);
 800db70:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800db74:	f000 bc12 	b.w	800e39c <_fx_file_write+0xe74>
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Determine if the file already had clusters.  */
        if (file_ptr -> fx_file_last_physical_cluster)
 800db78:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800db7c:	69db      	ldr	r3, [r3, #28]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d019      	beq.n	800dbb6 <_fx_file_write+0x68e>
                         ((replace_clusters == 0) && (first_new_cluster)))
                {
                    status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
                }
#else
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 800db82:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800db86:	69db      	ldr	r3, [r3, #28]
 800db88:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800db8c:	4619      	mov	r1, r3
 800db8e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800db92:	f002 fbbc 	bl	801030e <_fx_utility_FAT_entry_write>
 800db96:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800db9a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d009      	beq.n	800dbb6 <_fx_file_write+0x68e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800dba2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dba6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f005 fe40 	bl	8013830 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800dbb0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dbb4:	e3f2      	b.n	800e39c <_fx_file_write+0xe74>
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {

            /* Update the file control block with the last physical cluster.  */
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 800dbb6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dbba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800dbbe:	61d3      	str	r3, [r2, #28]
        }
    }

    /* Check for a need to increment to the next sector within a previously
       allocated cluster.  */
    if (file_ptr -> fx_file_current_logical_offset >=
 800dbc0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        media_ptr -> fx_media_bytes_per_sector)
 800dbc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if (file_ptr -> fx_file_current_logical_offset >=
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d31b      	bcc.n	800dc08 <_fx_file_write+0x6e0>
    {

        /* Update the sector specific file parameters to start at the
           next logical sector.  */
        file_ptr -> fx_file_current_logical_sector++;
 800dbd0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbd4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800dbd8:	1c51      	adds	r1, r2, #1
 800dbda:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800dbde:	f143 0300 	adc.w	r3, r3, #0
 800dbe2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dbe6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dbee:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 800dbf2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbfe:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 800dc00:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dc04:	2300      	movs	r3, #0
 800dc06:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* At this point there is enough room to perform the file write operation.  */

    /* Setup local buffer pointer.  */
    source_ptr =  (UCHAR *)buffer_ptr;
 800dc08:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800dc0c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Setup the remaining number of bytes to write.  */
    bytes_remaining =  size;
 800dc10:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800dc14:	2200      	movs	r2, #0
 800dc16:	613b      	str	r3, [r7, #16]
 800dc18:	617a      	str	r2, [r7, #20]
 800dc1a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dc1e:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0
        }
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Loop to write all of the bytes.  */
    while (bytes_remaining)
 800dc22:	e290      	b.n	800e146 <_fx_file_write+0xc1e>
    {

        /* Determine if a beginning or ending partial write is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800dc24:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dc28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d111      	bne.n	800dc52 <_fx_file_write+0x72a>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800dc2e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc34:	2200      	movs	r2, #0
 800dc36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc3a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800dc3e:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800dc42:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800dc46:	4621      	mov	r1, r4
 800dc48:	428a      	cmp	r2, r1
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	418b      	sbcs	r3, r1
 800dc4e:	f080 8096 	bcs.w	800dd7e <_fx_file_write+0x856>
                }
            }
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {
                status =  _fx_utility_logical_sector_read(media_ptr,
 800dc52:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dc56:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800dc5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc5e:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800dc60:	2304      	movs	r3, #4
 800dc62:	9302      	str	r3, [sp, #8]
 800dc64:	2301      	movs	r3, #1
 800dc66:	9301      	str	r3, [sp, #4]
 800dc68:	9200      	str	r2, [sp, #0]
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800dc72:	f003 fd31 	bl	80116d8 <_fx_utility_logical_sector_read>
 800dc76:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800dc7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d009      	beq.n	800dc96 <_fx_file_write+0x76e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800dc82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc86:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f005 fdd0 	bl	8013830 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800dc90:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc94:	e382      	b.n	800e39c <_fx_file_write+0xe74>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800dc96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800dc9c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800dca2:	1ad3      	subs	r3, r2, r3
 800dca4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

            /* Check to see if only a portion of the sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800dca8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800dcac:	2200      	movs	r2, #0
 800dcae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dcb2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800dcb6:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800dcba:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	428a      	cmp	r2, r1
 800dcc2:	4629      	mov	r1, r5
 800dcc4:	418b      	sbcs	r3, r1
 800dcc6:	d203      	bcs.n	800dcd0 <_fx_file_write+0x7a8>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  (ULONG)bytes_remaining;
 800dcc8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800dccc:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800dcd0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dcd4:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800dcd6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800dcdc:	4413      	add	r3, r2
 800dcde:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800dce2:	4619      	mov	r1, r3
 800dce4:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 800dce8:	f004 f8f2 	bl	8011ed0 <_fx_utility_memory_copy>
                                    copy_bytes);

            /* Write back the current logical sector.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800dcec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dcf0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800dcf4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dcf8:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800dcfa:	2304      	movs	r3, #4
 800dcfc:	9302      	str	r3, [sp, #8]
 800dcfe:	2301      	movs	r3, #1
 800dd00:	9301      	str	r3, [sp, #4]
 800dd02:	9200      	str	r2, [sp, #0]
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800dd0c:	f003 ff78 	bl	8011c00 <_fx_utility_logical_sector_write>
 800dd10:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800dd14:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d009      	beq.n	800dd30 <_fx_file_write+0x808>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800dd1c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dd20:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dd24:	4618      	mov	r0, r3
 800dd26:	f005 fd83 	bl	8013830 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800dd2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dd2e:	e335      	b.n	800e39c <_fx_file_write+0xe74>
            }


            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800dd30:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dd34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd36:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800dd3a:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800dd3c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dd40:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800dd42:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800dd46:	2200      	movs	r2, #0
 800dd48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dd4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800dd50:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800dd54:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800dd58:	4621      	mov	r1, r4
 800dd5a:	1a51      	subs	r1, r2, r1
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	4629      	mov	r1, r5
 800dd60:	eb63 0301 	sbc.w	r3, r3, r1
 800dd64:	60fb      	str	r3, [r7, #12]
 800dd66:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dd6a:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr + copy_bytes;
 800dd6e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800dd72:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800dd76:	4413      	add	r3, r2
 800dd78:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800dd7c:	e10d      	b.n	800df9a <_fx_file_write+0xa72>
        {

            /* Attempt to write multiple sectors directly to the media.  */

            /* Calculate the number of whole sectors to write.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800dd7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd84:	2200      	movs	r2, #0
 800dd86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dd8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dd8e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800dd92:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 800dd96:	f7f2 fbbf 	bl	8000518 <__aeabi_uldivmod>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	4613      	mov	r3, r2
 800dda0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800dda4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dda8:	6a1b      	ldr	r3, [r3, #32]
 800ddaa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800ddae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800ddb2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800ddb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ddba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800ddbc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ddc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800ddc8:	e03f      	b.n	800de4a <_fx_file_write+0x922>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800ddca:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800ddce:	461a      	mov	r2, r3
 800ddd0:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800ddd4:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800ddd8:	f002 f870 	bl	800febc <_fx_utility_FAT_entry_read>
 800dddc:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800dde0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10d      	bne.n	800de04 <_fx_file_write+0x8dc>
 800dde8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d909      	bls.n	800de04 <_fx_file_write+0x8dc>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800ddf0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ddf4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ddf8:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800ddfc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800de00:	429a      	cmp	r2, r3
 800de02:	d20f      	bcs.n	800de24 <_fx_file_write+0x8fc>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800de04:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800de08:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800de0c:	4618      	mov	r0, r3
 800de0e:	f005 fd0f 	bl	8013830 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800de12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de16:	2b00      	cmp	r3, #0
 800de18:	d002      	beq.n	800de20 <_fx_file_write+0x8f8>
                        {
                            return(status);
 800de1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de1e:	e2bd      	b.n	800e39c <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800de20:	2308      	movs	r3, #8
 800de22:	e2bb      	b.n	800e39c <_fx_file_write+0xe74>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800de24:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800de28:	1c5a      	adds	r2, r3, #1
 800de2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800de2e:	429a      	cmp	r2, r3
 800de30:	d112      	bne.n	800de58 <_fx_file_write+0x930>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800de32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800de36:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800de3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800de3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de40:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800de44:	4413      	add	r3, r2
 800de46:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800de4a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800de4e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800de52:	429a      	cmp	r2, r3
 800de54:	d3b9      	bcc.n	800ddca <_fx_file_write+0x8a2>
 800de56:	e000      	b.n	800de5a <_fx_file_write+0x932>
                        break;
 800de58:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800de5a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800de5e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800de62:	429a      	cmp	r2, r3
 800de64:	d203      	bcs.n	800de6e <_fx_file_write+0x946>
            {
                sectors = i;
 800de66:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800de6a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            }

            /* Perform the data write directly from the user's buffer of
               the appropriate number of sectors.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800de6e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800de72:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800de76:	2304      	movs	r3, #4
 800de78:	9302      	str	r3, [sp, #8]
 800de7a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800de7e:	9301      	str	r3, [sp, #4]
 800de80:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800de84:	9300      	str	r3, [sp, #0]
 800de86:	4602      	mov	r2, r0
 800de88:	460b      	mov	r3, r1
 800de8a:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800de8e:	f003 feb7 	bl	8011c00 <_fx_utility_logical_sector_write>
 800de92:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                       source_ptr, (ULONG) sectors, FX_DATA_SECTOR);

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800de96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d009      	beq.n	800deb2 <_fx_file_write+0x98a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800de9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dea2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dea6:	4618      	mov	r0, r3
 800dea8:	f005 fcc2 	bl	8013830 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800deac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800deb0:	e274      	b.n	800e39c <_fx_file_write+0xe74>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800deb2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800deb6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800deba:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800debe:	3b01      	subs	r3, #1
 800dec0:	2200      	movs	r2, #0
 800dec2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dec6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector +
 800deca:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800dece:	4623      	mov	r3, r4
 800ded0:	18c3      	adds	r3, r0, r3
 800ded2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ded6:	462b      	mov	r3, r5
 800ded8:	eb41 0303 	adc.w	r3, r1, r3
 800dedc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            file_ptr -> fx_file_current_logical_sector =
 800dee0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dee4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800dee8:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative cluster and sector as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800deec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800def0:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800def2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800def6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800def8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800defc:	4413      	add	r3, r2
 800defe:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800df00:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800df04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800df06:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800df0a:	18ca      	adds	r2, r1, r3
 800df0c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df10:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800df12:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df18:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800df1c:	4413      	add	r3, r2
 800df1e:	1e59      	subs	r1, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800df20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800df24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800df26:	fbb1 f3f2 	udiv	r3, r1, r2
 800df2a:	fb02 f303 	mul.w	r3, r2, r3
 800df2e:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800df30:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df34:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800df36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800df3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800df3c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df40:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800df42:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800df46:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800df4a:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800df4c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800df50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df52:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800df56:	fb02 f303 	mul.w	r3, r2, r3
 800df5a:	2200      	movs	r2, #0
 800df5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800df60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
            bytes_remaining =  bytes_remaining -
 800df64:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800df68:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800df6c:	4621      	mov	r1, r4
 800df6e:	1a51      	subs	r1, r2, r1
 800df70:	6039      	str	r1, [r7, #0]
 800df72:	4629      	mov	r1, r5
 800df74:	eb63 0301 	sbc.w	r3, r3, r1
 800df78:	607b      	str	r3, [r7, #4]
 800df7a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800df7e:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800df82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800df86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df88:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800df8c:	fb03 f202 	mul.w	r2, r3, r2
            source_ptr =  source_ptr +
 800df90:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800df94:	4413      	add	r3, r2
 800df96:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
        }

        /* At this point, we have either written a partial sector or have successfully
           written one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800df9a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800dfa0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dfa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	f0c0 80cd 	bcc.w	800e146 <_fx_file_write+0xc1e>
        {

            /* Determine if we are at the exact physical end of the file.  */
            if ((bytes_remaining == 0) &&
 800dfac:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	d11f      	bne.n	800dff4 <_fx_file_write+0xacc>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 800dfb4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dfb8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800dfbc:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800dfc6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 800dfca:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800dfce:	4621      	mov	r1, r4
 800dfd0:	1851      	adds	r1, r2, r1
 800dfd2:	67b9      	str	r1, [r7, #120]	; 0x78
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	414b      	adcs	r3, r1
 800dfd8:	67fb      	str	r3, [r7, #124]	; 0x7c
                 file_ptr -> fx_file_current_available_size))
 800dfda:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dfde:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) &&
 800dfe2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	4291      	cmp	r1, r2
 800dfea:	4629      	mov	r1, r5
 800dfec:	eb71 0303 	sbcs.w	r3, r1, r3
 800dff0:	f080 80af 	bcs.w	800e152 <_fx_file_write+0xc2a>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800dff4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffa:	1c5a      	adds	r2, r3, #1
 800dffc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e000:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800e002:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800e008:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800e00e:	429a      	cmp	r2, r3
 800e010:	f0c0 8086 	bcc.w	800e120 <_fx_file_write+0xbf8>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800e014:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e018:	6a19      	ldr	r1, [r3, #32]
 800e01a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800e01e:	461a      	mov	r2, r3
 800e020:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e024:	f001 ff4a 	bl	800febc <_fx_utility_FAT_entry_read>
 800e028:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800e02c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e030:	2b00      	cmp	r3, #0
 800e032:	d10d      	bne.n	800e050 <_fx_file_write+0xb28>
 800e034:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d909      	bls.n	800e050 <_fx_file_write+0xb28>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800e03c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e040:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e044:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800e048:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d20f      	bcs.n	800e070 <_fx_file_write+0xb48>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800e050:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e054:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e058:	4618      	mov	r0, r3
 800e05a:	f005 fbe9 	bl	8013830 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800e05e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e062:	2b00      	cmp	r3, #0
 800e064:	d002      	beq.n	800e06c <_fx_file_write+0xb44>
                        {
                            return(status);
 800e066:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e06a:	e197      	b.n	800e39c <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800e06c:	2308      	movs	r3, #8
 800e06e:	e195      	b.n	800e39c <_fx_file_write+0xe74>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800e070:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800e074:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e078:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800e07a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e080:	1c5a      	adds	r2, r3, #1
 800e082:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e086:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e088:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e08c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e08e:	2200      	movs	r2, #0
 800e090:	673b      	str	r3, [r7, #112]	; 0x70
 800e092:	677a      	str	r2, [r7, #116]	; 0x74
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800e094:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e098:	2200      	movs	r2, #0
 800e09a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e09c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e09e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	3b02      	subs	r3, #2
 800e0a6:	663b      	str	r3, [r7, #96]	; 0x60
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e0ae:	667b      	str	r3, [r7, #100]	; 0x64
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800e0b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e0b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0ba:	65fa      	str	r2, [r7, #92]	; 0x5c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800e0bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800e0c0:	462b      	mov	r3, r5
 800e0c2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800e0c6:	4642      	mov	r2, r8
 800e0c8:	fb02 f203 	mul.w	r2, r2, r3
 800e0cc:	464b      	mov	r3, r9
 800e0ce:	4621      	mov	r1, r4
 800e0d0:	fb01 f303 	mul.w	r3, r1, r3
 800e0d4:	4413      	add	r3, r2
 800e0d6:	4622      	mov	r2, r4
 800e0d8:	4641      	mov	r1, r8
 800e0da:	fba2 1201 	umull	r1, r2, r2, r1
 800e0de:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800e0e2:	460a      	mov	r2, r1
 800e0e4:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 800e0e8:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800e0ec:	4413      	add	r3, r2
 800e0ee:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e0f2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800e0f6:	4623      	mov	r3, r4
 800e0f8:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	189b      	adds	r3, r3, r2
 800e100:	653b      	str	r3, [r7, #80]	; 0x50
 800e102:	462b      	mov	r3, r5
 800e104:	460a      	mov	r2, r1
 800e106:	4153      	adcs	r3, r2
 800e108:	657b      	str	r3, [r7, #84]	; 0x54
 800e10a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e10e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e112:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800e116:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e11a:	2300      	movs	r3, #0
 800e11c:	6393      	str	r3, [r2, #56]	; 0x38
 800e11e:	e00e      	b.n	800e13e <_fx_file_write+0xc16>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800e120:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e124:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800e128:	1c51      	adds	r1, r2, #1
 800e12a:	64b9      	str	r1, [r7, #72]	; 0x48
 800e12c:	f143 0300 	adc.w	r3, r3, #0
 800e130:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e132:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e136:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e13a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800e13e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e142:	2300      	movs	r3, #0
 800e144:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800e146:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e14a:	4313      	orrs	r3, r2
 800e14c:	f47f ad6a 	bne.w	800dc24 <_fx_file_write+0x6fc>
 800e150:	e000      	b.n	800e154 <_fx_file_write+0xc2c>
                break;
 800e152:	bf00      	nop
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + size;
 800e154:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e158:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e15c:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800e160:	2000      	movs	r0, #0
 800e162:	6439      	str	r1, [r7, #64]	; 0x40
 800e164:	6478      	str	r0, [r7, #68]	; 0x44
 800e166:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800e16a:	4621      	mov	r1, r4
 800e16c:	1851      	adds	r1, r2, r1
 800e16e:	63b9      	str	r1, [r7, #56]	; 0x38
 800e170:	4629      	mov	r1, r5
 800e172:	eb43 0101 	adc.w	r1, r3, r1
 800e176:	63f9      	str	r1, [r7, #60]	; 0x3c
    file_ptr -> fx_file_current_file_offset =
 800e178:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e17c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e180:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Copy the new file size into the directory entry.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
        file_ptr -> fx_file_current_file_size;
 800e184:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e188:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800e18c:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e190:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    /* Determine if this write was done past the previous file size.  */
    if (file_ptr -> fx_file_current_file_offset >
 800e194:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e198:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800e19c:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e1a0:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >
 800e1a4:	4290      	cmp	r0, r2
 800e1a6:	eb71 0303 	sbcs.w	r3, r1, r3
 800e1aa:	f080 80de 	bcs.w	800e36a <_fx_file_write+0xe42>
    {

        /* Yes, we have written past the previous end of the file.  Update
           the file size.  */
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800e1ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e1b2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e1b6:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e1ba:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

#ifndef FX_DONT_UPDATE_OPEN_FILES

        /* Search the opened files list to see if the same file is opened for reading.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800e1be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e1c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e1c6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800e1ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e1ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e1d2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        while (open_count)
 800e1d6:	e0c3      	b.n	800e360 <_fx_file_write+0xe38>
        {

            /* Is this file the same file opened for reading?  */
            if ((search_ptr != file_ptr) &&
 800e1d8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800e1dc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	f000 80b3 	beq.w	800e34c <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800e1e6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e1ea:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800e1ee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e1f2:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr != file_ptr) &&
 800e1f6:	4299      	cmp	r1, r3
 800e1f8:	bf08      	it	eq
 800e1fa:	4290      	cmpeq	r0, r2
 800e1fc:	f040 80a6 	bne.w	800e34c <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800e200:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e204:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
 800e208:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e20c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800e210:	429a      	cmp	r2, r3
 800e212:	f040 809b 	bne.w	800e34c <_fx_file_write+0xe24>
            {

                /* Yes, the same file is opened for reading.  */

                /* Setup the new size.  */
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800e216:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e21a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e21e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e222:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

                /* Setup the new directory entry.  */
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800e226:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e22a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800e22e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e232:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800e236:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e23a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800e23e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e242:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector =   file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector;
 800e246:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e24a:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800e24e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e252:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset =  file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset;
 800e256:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e25a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800e25e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e262:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Setup the last cluster. This really isn't used during reading, but it is nice to keep things
                   consistent.  */
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 800e266:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e26a:	69da      	ldr	r2, [r3, #28]
 800e26c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e270:	61da      	str	r2, [r3, #28]

                /* Update the available clusters as well.  */
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 800e272:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e276:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800e27a:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e27e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

                /* Determine if an empty file was previously opened.  */
                if (search_ptr -> fx_file_total_clusters == 0)
 800e282:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d15f      	bne.n	800e34c <_fx_file_write+0xe24>
                {

                    /* Setup initial parameters.  */
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 800e28c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e290:	691a      	ldr	r2, [r3, #16]
 800e292:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e296:	611a      	str	r2, [r3, #16]
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800e298:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e29c:	695a      	ldr	r2, [r3, #20]
 800e29e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e2a2:	621a      	str	r2, [r3, #32]
                    search_ptr -> fx_file_current_relative_cluster =  0;
 800e2a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	635a      	str	r2, [r3, #52]	; 0x34
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e2ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	633b      	str	r3, [r7, #48]	; 0x30
 800e2b6:	637a      	str	r2, [r7, #52]	; 0x34
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800e2b8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e2bc:	695b      	ldr	r3, [r3, #20]
 800e2be:	3b02      	subs	r3, #2
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2c4:	62fa      	str	r2, [r7, #44]	; 0x2c
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800e2c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e2ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	623b      	str	r3, [r7, #32]
 800e2d0:	627a      	str	r2, [r7, #36]	; 0x24
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800e2d2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e2d6:	462b      	mov	r3, r5
 800e2d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e2dc:	4642      	mov	r2, r8
 800e2de:	fb02 f203 	mul.w	r2, r2, r3
 800e2e2:	464b      	mov	r3, r9
 800e2e4:	4621      	mov	r1, r4
 800e2e6:	fb01 f303 	mul.w	r3, r1, r3
 800e2ea:	4413      	add	r3, r2
 800e2ec:	4622      	mov	r2, r4
 800e2ee:	4641      	mov	r1, r8
 800e2f0:	fba2 1201 	umull	r1, r2, r2, r1
 800e2f4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800e2f8:	460a      	mov	r2, r1
 800e2fa:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 800e2fe:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800e302:	4413      	add	r3, r2
 800e304:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e308:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e30c:	4623      	mov	r3, r4
 800e30e:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800e312:	4602      	mov	r2, r0
 800e314:	189b      	adds	r3, r3, r2
 800e316:	61bb      	str	r3, [r7, #24]
 800e318:	462b      	mov	r3, r5
 800e31a:	460a      	mov	r2, r1
 800e31c:	4153      	adcs	r3, r2
 800e31e:	61fb      	str	r3, [r7, #28]
 800e320:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e324:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e328:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    search_ptr -> fx_file_current_relative_sector =   0;
 800e32c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e330:	2200      	movs	r2, #0
 800e332:	639a      	str	r2, [r3, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 800e334:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e338:	2200      	movs	r2, #0
 800e33a:	631a      	str	r2, [r3, #48]	; 0x30
                    search_ptr -> fx_file_current_file_offset =       0;
 800e33c:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e340:	f04f 0200 	mov.w	r2, #0
 800e344:	f04f 0300 	mov.w	r3, #0
 800e348:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800e34c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e352:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            open_count--;
 800e356:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e35a:	3b01      	subs	r3, #1
 800e35c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        while (open_count)
 800e360:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e364:	2b00      	cmp	r3, #0
 800e366:	f47f af37 	bne.w	800e1d8 <_fx_file_write+0xcb0>
        }
#endif
    }

    /* Finally, mark this file as modified.  */
    file_ptr -> fx_file_modified =  FX_TRUE;
 800e36a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e36e:	2201      	movs	r2, #1
 800e370:	731a      	strb	r2, [r3, #12]
        file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_offset;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Invoke file write callback. */
    if (file_ptr -> fx_file_write_notify)
 800e372:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e376:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d006      	beq.n	800e38c <_fx_file_write+0xe64>
    {
        file_ptr -> fx_file_write_notify(file_ptr);
 800e37e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e382:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800e386:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800e38a:	4798      	blx	r3
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800e38c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e390:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e394:	4618      	mov	r0, r3
 800e396:	f005 fa4b 	bl	8013830 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e3a8 <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b088      	sub	sp, #32
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e3b6:	1c5a      	adds	r2, r3, #1
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a3f      	ldr	r2, [pc, #252]	; (800e4c0 <_fx_media_abort+0x118>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d001      	beq.n	800e3cc <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800e3c8:	2311      	movs	r3, #17
 800e3ca:	e074      	b.n	800e4b6 <_fx_media_abort+0x10e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_ABORT, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a3b      	ldr	r2, [pc, #236]	; (800e4c0 <_fx_media_abort+0x118>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d001      	beq.n	800e3da <_fx_media_abort+0x32>
 800e3d6:	2311      	movs	r3, #17
 800e3d8:	e06d      	b.n	800e4b6 <_fx_media_abort+0x10e>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e3e0:	f04f 31ff 	mov.w	r1, #4294967295
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f004 ffab 	bl	8013340 <_tx_mutex_get>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d001      	beq.n	800e3f4 <_fx_media_abort+0x4c>
 800e3f0:	2311      	movs	r3, #17
 800e3f2:	e060      	b.n	800e4b6 <_fx_media_abort+0x10e>

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e3fa:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e402:	61bb      	str	r3, [r7, #24]
    while (open_count)
 800e404:	e008      	b.n	800e418 <_fx_media_abort+0x70>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	4a2e      	ldr	r2, [pc, #184]	; (800e4c4 <_fx_media_abort+0x11c>)
 800e40a:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e410:	61bb      	str	r3, [r7, #24]
        open_count--;
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	3b01      	subs	r3, #1
 800e416:	61fb      	str	r3, [r7, #28]
    while (open_count)
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d1f3      	bne.n	800e406 <_fx_media_abort+0x5e>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2203      	movs	r2, #3
 800e422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2290      	movs	r2, #144	; 0x90
 800e42a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e438:	f3ef 8310 	mrs	r3, PRIMASK
 800e43c:	613b      	str	r3, [r7, #16]
    return(posture);
 800e43e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e440:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e442:	b672      	cpsid	i
    return(int_posture);
 800e444:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800e446:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800e448:	4b1f      	ldr	r3, [pc, #124]	; (800e4c8 <_fx_media_abort+0x120>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d103      	bne.n	800e458 <_fx_media_abort+0xb0>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800e450:	4b1e      	ldr	r3, [pc, #120]	; (800e4cc <_fx_media_abort+0x124>)
 800e452:	2200      	movs	r2, #0
 800e454:	601a      	str	r2, [r3, #0]
 800e456:	e019      	b.n	800e48c <_fx_media_abort+0xe4>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e464:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e474:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800e478:	4b14      	ldr	r3, [pc, #80]	; (800e4cc <_fx_media_abort+0x124>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d104      	bne.n	800e48c <_fx_media_abort+0xe4>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e488:	4a10      	ldr	r2, [pc, #64]	; (800e4cc <_fx_media_abort+0x124>)
 800e48a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800e48c:	4b0e      	ldr	r3, [pc, #56]	; (800e4c8 <_fx_media_abort+0x120>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	3b01      	subs	r3, #1
 800e492:	4a0d      	ldr	r2, [pc, #52]	; (800e4c8 <_fx_media_abort+0x120>)
 800e494:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	4a0d      	ldr	r2, [pc, #52]	; (800e4d0 <_fx_media_abort+0x128>)
 800e49a:	601a      	str	r2, [r3, #0]
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	f383 8810 	msr	PRIMASK, r3
}
 800e4a6:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f004 fe9c 	bl	80131ec <_tx_mutex_delete>
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800e4b4:	2300      	movs	r3, #0
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3720      	adds	r7, #32
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	4d454449 	.word	0x4d454449
 800e4c4:	46494c41 	.word	0x46494c41
 800e4c8:	24014c2c 	.word	0x24014c2c
 800e4cc:	24014c28 	.word	0x24014c28
 800e4d0:	4d454441 	.word	0x4d454441

0800e4d4 <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 800e4d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e4d8:	b084      	sub	sp, #16
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4e4:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	330b      	adds	r3, #11
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f001 fc80 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d101      	bne.n	800e502 <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 800e4fe:	2302      	movs	r3, #2
 800e500:	e08c      	b.n	800e61c <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3318      	adds	r3, #24
 800e506:	4618      	mov	r0, r3
 800e508:	f001 fc72 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 800e50c:	4602      	mov	r2, r0
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	331a      	adds	r3, #26
 800e516:	4618      	mov	r0, r3
 800e518:	f001 fc6a 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 800e51c:	4602      	mov	r2, r0
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	3313      	adds	r3, #19
 800e526:	4618      	mov	r0, r3
 800e528:	f001 fc62 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2200      	movs	r2, #0
 800e530:	4698      	mov	r8, r3
 800e532:	4691      	mov	r9, r2
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e540:	4313      	orrs	r3, r2
 800e542:	d10b      	bne.n	800e55c <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	3320      	adds	r3, #32
 800e548:	4618      	mov	r0, r3
 800e54a:	f001 fc79 	bl	800fe40 <_fx_utility_32_unsigned_read>
 800e54e:	4603      	mov	r3, r0
 800e550:	2200      	movs	r2, #0
 800e552:	461c      	mov	r4, r3
 800e554:	4615      	mov	r5, r2
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e562:	4313      	orrs	r3, r2
 800e564:	d101      	bne.n	800e56a <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 800e566:	2302      	movs	r3, #2
 800e568:	e058      	b.n	800e61c <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	330e      	adds	r3, #14
 800e56e:	4618      	mov	r0, r3
 800e570:	f001 fc3e 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 800e574:	4602      	mov	r2, r0
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d101      	bne.n	800e586 <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 800e582:	2302      	movs	r3, #2
 800e584:	e04a      	b.n	800e61c <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	330d      	adds	r3, #13
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	461a      	mov	r2, r3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e596:	2b00      	cmp	r3, #0
 800e598:	d101      	bne.n	800e59e <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 800e59a:	2302      	movs	r3, #2
 800e59c:	e03e      	b.n	800e61c <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	3316      	adds	r3, #22
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f001 fc24 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d107      	bne.n	800e5c6 <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	3324      	adds	r3, #36	; 0x24
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f001 fc40 	bl	800fe40 <_fx_utility_32_unsigned_read>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d101      	bne.n	800e5d2 <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 800e5ce:	2302      	movs	r3, #2
 800e5d0:	e024      	b.n	800e61c <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	3310      	adds	r3, #16
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	461a      	mov	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d101      	bne.n	800e5ea <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	e018      	b.n	800e61c <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	331c      	adds	r3, #28
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f001 fc26 	bl	800fe40 <_fx_utility_32_unsigned_read>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	3311      	adds	r3, #17
 800e5fe:	4618      	mov	r0, r3
 800e600:	f001 fbf6 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 800e604:	4602      	mov	r2, r0
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	332c      	adds	r3, #44	; 0x2c
 800e60e:	4618      	mov	r0, r3
 800e610:	f001 fc16 	bl	800fe40 <_fx_utility_32_unsigned_read>
 800e614:	4602      	mov	r2, r0
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800e61a:	2300      	movs	r3, #0
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800e628 <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b092      	sub	sp, #72	; 0x48
 800e62c:	af04      	add	r7, sp, #16
 800e62e:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4aa6      	ldr	r2, [pc, #664]	; (800e8d0 <_fx_media_close+0x2a8>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d001      	beq.n	800e63e <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800e63a:	2311      	movs	r3, #17
 800e63c:	e1c2      	b.n	800e9c4 <_fx_media_close+0x39c>

    /* If trace is enabled, unregister this object.  */
    FX_TRACE_OBJECT_UNREGISTER(media_ptr)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	4aa3      	ldr	r2, [pc, #652]	; (800e8d0 <_fx_media_close+0x2a8>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d001      	beq.n	800e64c <_fx_media_close+0x24>
 800e648:	2311      	movs	r3, #17
 800e64a:	e1bb      	b.n	800e9c4 <_fx_media_close+0x39c>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e652:	f04f 31ff 	mov.w	r1, #4294967295
 800e656:	4618      	mov	r0, r3
 800e658:	f004 fe72 	bl	8013340 <_tx_mutex_get>
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d001      	beq.n	800e666 <_fx_media_close+0x3e>
 800e662:	2311      	movs	r3, #17
 800e664:	e1ae      	b.n	800e9c4 <_fx_media_close+0x39c>

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e66c:	637b      	str	r3, [r7, #52]	; 0x34
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e674:	633b      	str	r3, [r7, #48]	; 0x30
    while (open_count)
 800e676:	e046      	b.n	800e706 <_fx_media_close+0xde>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d139      	bne.n	800e6f4 <_fx_media_close+0xcc>
            (file_ptr -> fx_file_modified))
 800e680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e682:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e684:	2b00      	cmp	r3, #0
 800e686:	d035      	beq.n	800e6f4 <_fx_media_close+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e688:	f3ef 8310 	mrs	r3, PRIMASK
 800e68c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e68e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e690:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e692:	b672      	cpsid	i
    return(int_posture);
 800e694:	697b      	ldr	r3, [r7, #20]
        {

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS
 800e696:	623b      	str	r3, [r7, #32]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800e698:	4b8e      	ldr	r3, [pc, #568]	; (800e8d4 <_fx_media_close+0x2ac>)
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800e6a2:	4b8d      	ldr	r3, [pc, #564]	; (800e8d8 <_fx_media_close+0x2b0>)
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800e6ac:	6a3b      	ldr	r3, [r7, #32]
 800e6ae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	f383 8810 	msr	PRIMASK, r3
}
 800e6b6:	bf00      	nop
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800e6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ba:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800e6be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6c0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800e6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c6:	3368      	adds	r3, #104	; 0x68
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7fb fa9a 	bl	8009c04 <_fx_directory_entry_write>
 800e6d0:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 800e6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00a      	beq.n	800e6ee <_fx_media_close+0xc6>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f005 f8a6 	bl	8013830 <_tx_mutex_put>

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f7ff fe5f 	bl	800e3a8 <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 800e6ea:	2390      	movs	r3, #144	; 0x90
 800e6ec:	e16a      	b.n	800e9c4 <_fx_media_close+0x39c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800e6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f6:	4a79      	ldr	r2, [pc, #484]	; (800e8dc <_fx_media_close+0x2b4>)
 800e6f8:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800e6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6fe:	633b      	str	r3, [r7, #48]	; 0x30
        open_count--;
 800e700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e702:	3b01      	subs	r3, #1
 800e704:	637b      	str	r3, [r7, #52]	; 0x34
    while (open_count)
 800e706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d1b5      	bne.n	800e678 <_fx_media_close+0x50>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f001 fef2 	bl	80104f6 <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f002 fa40 	bl	8010b98 <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e71e:	2100      	movs	r1, #0
 800e720:	9102      	str	r1, [sp, #8]
 800e722:	e9cd 2300 	strd	r2, r3, [sp]
 800e726:	f04f 0201 	mov.w	r2, #1
 800e72a:	f04f 0300 	mov.w	r3, #0
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f002 fdbc 	bl	80112ac <_fx_utility_logical_sector_flush>
 800e734:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00a      	beq.n	800e752 <_fx_media_close+0x12a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e742:	4618      	mov	r0, r3
 800e744:	f005 f874 	bl	8013830 <_tx_mutex_put>

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7ff fe2d 	bl	800e3a8 <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 800e74e:	2390      	movs	r3, #144	; 0x90
 800e750:	e138      	b.n	800e9c4 <_fx_media_close+0x39c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e756:	2b00      	cmp	r3, #0
 800e758:	f000 80ca 	beq.w	800e8f0 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800e764:	429a      	cmp	r2, r3
 800e766:	f000 80c3 	beq.w	800e8f0 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800e770:	2b00      	cmp	r3, #0
 800e772:	f040 80bd 	bne.w	800e8f0 <_fx_media_close+0x2c8>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	69db      	ldr	r3, [r3, #28]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	69d9      	ldr	r1, [r3, #28]
 800e782:	f04f 32ff 	mov.w	r2, #4294967295
 800e786:	f04f 33ff 	mov.w	r3, #4294967295
 800e78a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	69db      	ldr	r3, [r3, #28]
 800e792:	2200      	movs	r2, #0
 800e794:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2290      	movs	r2, #144	; 0x90
 800e7a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2203      	movs	r2, #3
 800e7c4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800e7ce:	1c5a      	adds	r2, r3, #1
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00a      	beq.n	800e800 <_fx_media_close+0x1d8>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f005 f81d 	bl	8013830 <_tx_mutex_put>

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7ff fdd6 	bl	800e3a8 <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800e7fc:	2390      	movs	r3, #144	; 0x90
 800e7fe:	e0e1      	b.n	800e9c4 <_fx_media_close+0x39c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e806:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800e808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e80a:	f001 fb19 	bl	800fe40 <_fx_utility_32_unsigned_read>
 800e80e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800e810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e812:	4a33      	ldr	r2, [pc, #204]	; (800e8e0 <_fx_media_close+0x2b8>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d16b      	bne.n	800e8f0 <_fx_media_close+0x2c8>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e81e:	4618      	mov	r0, r3
 800e820:	f001 fb0e 	bl	800fe40 <_fx_utility_32_unsigned_read>
 800e824:	6278      	str	r0, [r7, #36]	; 0x24

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800e826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e828:	4a2e      	ldr	r2, [pc, #184]	; (800e8e4 <_fx_media_close+0x2bc>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d160      	bne.n	800e8f0 <_fx_media_close+0x2c8>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800e82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e830:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e838:	4619      	mov	r1, r3
 800e83a:	4610      	mov	r0, r2
 800e83c:	f001 fb1d 	bl	800fe7a <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800e840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e842:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e84c:	4619      	mov	r1, r3
 800e84e:	4610      	mov	r0, r2
 800e850:	f001 fb13 	bl	800fe7a <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2201      	movs	r2, #1
 800e858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2290      	movs	r2, #144	; 0x90
 800e860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e868:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2201      	movs	r2, #1
 800e87a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2203      	movs	r2, #3
 800e882:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2201      	movs	r2, #1
 800e88a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e894:	1c5a      	adds	r2, r3, #1
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d017      	beq.n	800e8e8 <_fx_media_close+0x2c0>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f004 ffb6 	bl	8013830 <_tx_mutex_put>

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f7ff fd6f 	bl	800e3a8 <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800e8ca:	2390      	movs	r3, #144	; 0x90
 800e8cc:	e07a      	b.n	800e9c4 <_fx_media_close+0x39c>
 800e8ce:	bf00      	nop
 800e8d0:	4d454449 	.word	0x4d454449
 800e8d4:	24014c34 	.word	0x24014c34
 800e8d8:	24014c30 	.word	0x24014c30
 800e8dc:	46494c43 	.word	0x46494c43
 800e8e0:	41615252 	.word	0x41615252
 800e8e4:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800e8f6:	1c5a      	adds	r2, r3, #1
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2202      	movs	r2, #2
 800e902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2290      	movs	r2, #144	; 0x90
 800e90a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2208      	movs	r2, #8
 800e91c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2290      	movs	r2, #144	; 0x90
 800e924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e932:	f3ef 8310 	mrs	r3, PRIMASK
 800e936:	613b      	str	r3, [r7, #16]
    return(posture);
 800e938:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e93a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e93c:	b672      	cpsid	i
    return(int_posture);
 800e93e:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800e940:	623b      	str	r3, [r7, #32]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800e942:	4b22      	ldr	r3, [pc, #136]	; (800e9cc <_fx_media_close+0x3a4>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	2b01      	cmp	r3, #1
 800e948:	d103      	bne.n	800e952 <_fx_media_close+0x32a>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800e94a:	4b21      	ldr	r3, [pc, #132]	; (800e9d0 <_fx_media_close+0x3a8>)
 800e94c:	2200      	movs	r2, #0
 800e94e:	601a      	str	r2, [r3, #0]
 800e950:	e019      	b.n	800e986 <_fx_media_close+0x35e>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e95e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e96e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800e972:	4b17      	ldr	r3, [pc, #92]	; (800e9d0 <_fx_media_close+0x3a8>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d104      	bne.n	800e986 <_fx_media_close+0x35e>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e982:	4a13      	ldr	r2, [pc, #76]	; (800e9d0 <_fx_media_close+0x3a8>)
 800e984:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800e986:	4b11      	ldr	r3, [pc, #68]	; (800e9cc <_fx_media_close+0x3a4>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	3b01      	subs	r3, #1
 800e98c:	4a0f      	ldr	r2, [pc, #60]	; (800e9cc <_fx_media_close+0x3a4>)
 800e98e:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	4a10      	ldr	r2, [pc, #64]	; (800e9d4 <_fx_media_close+0x3ac>)
 800e994:	601a      	str	r2, [r3, #0]
 800e996:	6a3b      	ldr	r3, [r7, #32]
 800e998:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	f383 8810 	msr	PRIMASK, r3
}
 800e9a0:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f004 fc1f 	bl	80131ec <_tx_mutex_delete>
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d004      	beq.n	800e9c2 <_fx_media_close+0x39a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 800e9c2:	2300      	movs	r3, #0
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3738      	adds	r7, #56	; 0x38
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	24014c2c 	.word	0x24014c2c
 800e9d0:	24014c28 	.word	0x24014c28
 800e9d4:	4d454443 	.word	0x4d454443

0800e9d8 <_fx_media_flush>:
/*                                            disable cache,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_flush(FX_MEDIA  *media_ptr)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b090      	sub	sp, #64	; 0x40
 800e9dc:	af04      	add	r7, sp, #16
 800e9de:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_flushes++;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800e9e6:	1c5a      	adds	r2, r3, #1
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	4aa2      	ldr	r2, [pc, #648]	; (800ec7c <_fx_media_flush+0x2a4>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d001      	beq.n	800e9fc <_fx_media_flush+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800e9f8:	2311      	movs	r3, #17
 800e9fa:	e175      	b.n	800ece8 <_fx_media_flush+0x310>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a9e      	ldr	r2, [pc, #632]	; (800ec7c <_fx_media_flush+0x2a4>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d001      	beq.n	800ea0a <_fx_media_flush+0x32>
 800ea06:	2311      	movs	r3, #17
 800ea08:	e16e      	b.n	800ece8 <_fx_media_flush+0x310>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ea10:	f04f 31ff 	mov.w	r1, #4294967295
 800ea14:	4618      	mov	r0, r3
 800ea16:	f004 fc93 	bl	8013340 <_tx_mutex_get>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d001      	beq.n	800ea24 <_fx_media_flush+0x4c>
 800ea20:	2311      	movs	r3, #17
 800ea22:	e161      	b.n	800ece8 <_fx_media_flush+0x310>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d007      	beq.n	800ea3e <_fx_media_flush+0x66>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ea34:	4618      	mov	r0, r3
 800ea36:	f004 fefb 	bl	8013830 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800ea3a:	2323      	movs	r3, #35	; 0x23
 800ea3c:	e154      	b.n	800ece8 <_fx_media_flush+0x310>
    }

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ea44:	62fb      	str	r3, [r7, #44]	; 0x2c
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ea4c:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count)
 800ea4e:	e040      	b.n	800ead2 <_fx_media_flush+0xfa>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800ea50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d136      	bne.n	800eac6 <_fx_media_flush+0xee>
            (file_ptr -> fx_file_modified))
 800ea58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5a:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d032      	beq.n	800eac6 <_fx_media_flush+0xee>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ea60:	f3ef 8310 	mrs	r3, PRIMASK
 800ea64:	613b      	str	r3, [r7, #16]
    return(posture);
 800ea66:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ea68:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ea6a:	b672      	cpsid	i
    return(int_posture);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
        {

            /* Protect against update.  */
            FX_DISABLE_INTS
 800ea6e:	61bb      	str	r3, [r7, #24]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800ea70:	4b83      	ldr	r3, [pc, #524]	; (800ec80 <_fx_media_flush+0x2a8>)
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800ea7a:	4b82      	ldr	r3, [pc, #520]	; (800ec84 <_fx_media_flush+0x2ac>)
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea80:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	f383 8810 	msr	PRIMASK, r3
}
 800ea8e:	bf00      	nop
            /* Restore interrupts.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800ea90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea92:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800ea96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea98:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                        media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800ea9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9e:	3368      	adds	r3, #104	; 0x68
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f7fb f8ae 	bl	8009c04 <_fx_directory_entry_write>
 800eaa8:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Check for a good status.  */
            if (status != FX_SUCCESS)
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d007      	beq.n	800eac0 <_fx_media_flush+0xe8>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800eab6:	4618      	mov	r0, r3
 800eab8:	f004 feba 	bl	8013830 <_tx_mutex_put>

                /* Error writing the directory.  */
                return(status);
 800eabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabe:	e113      	b.n	800ece8 <_fx_media_flush+0x310>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800eac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac2:	2200      	movs	r2, #0
 800eac4:	731a      	strb	r2, [r3, #12]
        }

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eaca:	62bb      	str	r3, [r7, #40]	; 0x28
        open_count--;
 800eacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eace:	3b01      	subs	r3, #1
 800ead0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count)
 800ead2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d1bb      	bne.n	800ea50 <_fx_media_flush+0x78>
    }

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f001 fd0c 	bl	80104f6 <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f002 f85a 	bl	8010b98 <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800eaea:	2100      	movs	r1, #0
 800eaec:	9102      	str	r1, [sp, #8]
 800eaee:	e9cd 2300 	strd	r2, r3, [sp]
 800eaf2:	f04f 0201 	mov.w	r2, #1
 800eaf6:	f04f 0300 	mov.w	r3, #0
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f002 fbd6 	bl	80112ac <_fx_utility_logical_sector_flush>
 800eb00:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check for a good status.  */
    if (status != FX_SUCCESS)
 800eb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d007      	beq.n	800eb18 <_fx_media_flush+0x140>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f004 fe8e 	bl	8013830 <_tx_mutex_put>

        /* Error writing the directory.  */
        return(status);
 800eb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb16:	e0e7      	b.n	800ece8 <_fx_media_flush+0x310>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f000 80bb 	beq.w	800ec98 <_fx_media_flush+0x2c0>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters))
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	f000 80b4 	beq.w	800ec98 <_fx_media_flush+0x2c0>
    ULONG  signature;

#ifndef FX_DISABLE_CACHE

        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	69db      	ldr	r3, [r3, #28]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	623b      	str	r3, [r7, #32]

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	69d9      	ldr	r1, [r3, #28]
 800eb3c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb40:	f04f 33ff 	mov.w	r3, #4294967295
 800eb44:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	69db      	ldr	r3, [r3, #28]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2200      	movs	r2, #0
 800eb54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2290      	movs	r2, #144	; 0x90
 800eb5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6a3a      	ldr	r2, [r7, #32]
 800eb64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2201      	movs	r2, #1
 800eb76:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2203      	movs	r2, #3
 800eb7e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800eb88:	1c5a      	adds	r2, r3, #1
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d007      	beq.n	800ebb4 <_fx_media_flush+0x1dc>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f004 fe40 	bl	8013830 <_tx_mutex_put>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800ebb0:	2390      	movs	r3, #144	; 0x90
 800ebb2:	e099      	b.n	800ece8 <_fx_media_flush+0x310>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebba:	623b      	str	r3, [r7, #32]

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800ebbc:	6a38      	ldr	r0, [r7, #32]
 800ebbe:	f001 f93f 	bl	800fe40 <_fx_utility_32_unsigned_read>
 800ebc2:	61f8      	str	r0, [r7, #28]

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800ebc4:	69fb      	ldr	r3, [r7, #28]
 800ebc6:	4a30      	ldr	r2, [pc, #192]	; (800ec88 <_fx_media_flush+0x2b0>)
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d165      	bne.n	800ec98 <_fx_media_flush+0x2c0>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800ebcc:	6a3b      	ldr	r3, [r7, #32]
 800ebce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f001 f934 	bl	800fe40 <_fx_utility_32_unsigned_read>
 800ebd8:	61f8      	str	r0, [r7, #28]

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	4a2b      	ldr	r2, [pc, #172]	; (800ec8c <_fx_media_flush+0x2b4>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d15a      	bne.n	800ec98 <_fx_media_flush+0x2c0>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800ebe2:	6a3b      	ldr	r3, [r7, #32]
 800ebe4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebec:	4619      	mov	r1, r3
 800ebee:	4610      	mov	r0, r2
 800ebf0:	f001 f943 	bl	800fe7a <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800ebf4:	6a3b      	ldr	r3, [r7, #32]
 800ebf6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec00:	4619      	mov	r1, r3
 800ec02:	4610      	mov	r0, r2
 800ec04:	f001 f939 	bl	800fe7a <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2290      	movs	r2, #144	; 0x90
 800ec14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6a3a      	ldr	r2, [r7, #32]
 800ec1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2203      	movs	r2, #3
 800ec36:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800ec48:	1c5a      	adds	r2, r3, #1
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d011      	beq.n	800ec90 <_fx_media_flush+0x2b8>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ec72:	4618      	mov	r0, r3
 800ec74:	f004 fddc 	bl	8013830 <_tx_mutex_put>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800ec78:	2390      	movs	r3, #144	; 0x90
 800ec7a:	e035      	b.n	800ece8 <_fx_media_flush+0x310>
 800ec7c:	4d454449 	.word	0x4d454449
 800ec80:	24014c34 	.word	0x24014c34
 800ec84:	24014c30 	.word	0x24014c30
 800ec88:	41615252 	.word	0x41615252
 800ec8c:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800ec9e:	1c5a      	adds	r2, r3, #1
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2202      	movs	r2, #2
 800ecaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2290      	movs	r2, #144	; 0x90
 800ecb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	4798      	blx	r3

    /* Determine if the I/O driver flushed successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d007      	beq.n	800ecda <_fx_media_flush+0x302>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f004 fdad 	bl	8013830 <_tx_mutex_put>

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800ecd6:	2390      	movs	r3, #144	; 0x90
 800ecd8:	e006      	b.n	800ece8 <_fx_media_flush+0x310>
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ece0:	4618      	mov	r0, r3
 800ece2:	f004 fda5 	bl	8013830 <_tx_mutex_put>

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 800ece6:	2300      	movs	r3, #0
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3730      	adds	r7, #48	; 0x30
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 800ecf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecf4:	b09a      	sub	sp, #104	; 0x68
 800ecf6:	af04      	add	r7, sp, #16
 800ecf8:	60f8      	str	r0, [r7, #12]
 800ecfa:	60b9      	str	r1, [r7, #8]
 800ecfc:	607a      	str	r2, [r7, #4]
 800ecfe:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800ed00:	4bba      	ldr	r3, [pc, #744]	; (800efec <_fx_media_open+0x2fc>)
 800ed02:	681a      	ldr	r2, [r3, #0]
 800ed04:	4bba      	ldr	r3, [pc, #744]	; (800eff0 <_fx_media_open+0x300>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	431a      	orrs	r2, r3
 800ed0a:	4bba      	ldr	r3, [pc, #744]	; (800eff4 <_fx_media_open+0x304>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d003      	beq.n	800ed1c <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 800ed14:	4bb8      	ldr	r3, [pc, #736]	; (800eff8 <_fx_media_open+0x308>)
 800ed16:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d102      	bne.n	800ed22 <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 800ed1c:	2322      	movs	r3, #34	; 0x22
 800ed1e:	f000 bd53 	b.w	800f7c8 <_fx_media_open+0xad8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	68ba      	ldr	r2, [r7, #8]
 800ed26:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ed34:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ed3a:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ed42:	461a      	mov	r2, r3
 800ed44:	2300      	movs	r3, #0
 800ed46:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ed50:	2200      	movs	r2, #0
 800ed52:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 800ed56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed58:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2200      	movs	r2, #0
 800ed66:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2200      	movs	r2, #0
 800ed76:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2200      	movs	r2, #0
 800ed96:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2200      	movs	r2, #0
 800eda6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2200      	movs	r2, #0
 800edae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2200      	movs	r2, #0
 800edb6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2200      	movs	r2, #0
 800edbe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2200      	movs	r2, #0
 800edce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2200      	movs	r2, #0
 800edde:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2200      	movs	r2, #0
 800ede6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2200      	movs	r2, #0
 800edee:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2200      	movs	r2, #0
 800edfe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2200      	movs	r2, #0
 800ee06:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	2200      	movs	r2, #0
 800ee16:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2200      	movs	r2, #0
 800ee26:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2200      	movs	r2, #0
 800ee46:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	2200      	movs	r2, #0
 800ee56:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2200      	movs	r2, #0
 800ee66:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2200      	movs	r2, #0
 800ee86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2200      	movs	r2, #0
 800eeae:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2200      	movs	r2, #0
 800eec6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	2200      	movs	r2, #0
 800eece:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2200      	movs	r2, #0
 800eed6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2200      	movs	r2, #0
 800eede:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2200      	movs	r2, #0
 800eeee:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2200      	movs	r2, #0
 800eef6:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2200      	movs	r2, #0
 800ef06:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2200      	movs	r2, #0
 800ef16:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2200      	movs	r2, #0
 800ef26:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2200      	movs	r2, #0
 800ef36:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2204      	movs	r2, #4
 800ef3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2290      	movs	r2, #144	; 0x90
 800ef46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	683a      	ldr	r2, [r7, #0]
 800ef4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2200      	movs	r2, #0
 800ef56:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2200      	movs	r2, #0
 800ef66:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ef70:	68f8      	ldr	r0, [r7, #12]
 800ef72:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d002      	beq.n	800ef84 <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800ef7e:	2390      	movs	r3, #144	; 0x90
 800ef80:	f000 bc22 	b.w	800f7c8 <_fx_media_open+0xad8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800ef8a:	1c5a      	adds	r2, r3, #1
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2205      	movs	r2, #5
 800ef96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2290      	movs	r2, #144	; 0x90
 800ef9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800efa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2201      	movs	r2, #1
 800efae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2201      	movs	r2, #1
 800efb6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d016      	beq.n	800effc <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2208      	movs	r2, #8
 800efd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2290      	movs	r2, #144	; 0x90
 800efda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800efe4:	68f8      	ldr	r0, [r7, #12]
 800efe6:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 800efe8:	2301      	movs	r3, #1
 800efea:	e3ed      	b.n	800f7c8 <_fx_media_open+0xad8>
 800efec:	24014c40 	.word	0x24014c40
 800eff0:	24014c44 	.word	0x24014c44
 800eff4:	24014c48 	.word	0x24014c48
 800eff8:	24000010 	.word	0x24000010
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f7ff fa69 	bl	800e4d4 <_fx_media_boot_info_extract>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d00e      	beq.n	800f026 <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2208      	movs	r2, #8
 800f00c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2290      	movs	r2, #144	; 0x90
 800f014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 800f022:	2302      	movs	r3, #2
 800f024:	e3d0      	b.n	800f7c8 <_fx_media_open+0xad8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f02c:	3330      	adds	r3, #48	; 0x30
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 fede 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 800f034:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f03a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d20e      	bcs.n	800f05e <_fx_media_open+0x36e>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2208      	movs	r2, #8
 800f044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2290      	movs	r2, #144	; 0x90
 800f04c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 800f05a:	2321      	movs	r3, #33	; 0x21
 800f05c:	e3b4      	b.n	800f7c8 <_fx_media_open+0xad8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f062:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f064:	fbb2 f2f3 	udiv	r2, r2, r3
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	695b      	ldr	r3, [r3, #20]
 800f070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f074:	d903      	bls.n	800f07e <_fx_media_open+0x38e>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f07c:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	695b      	ldr	r3, [r3, #20]
 800f082:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800f08a:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 800f08c:	e01c      	b.n	800f0c8 <_fx_media_open+0x3d8>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 800f08e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f090:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f092:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 800f094:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f096:	f04f 32ff 	mov.w	r2, #4294967295
 800f09a:	f04f 33ff 	mov.w	r3, #4294967295
 800f09e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 800f0a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 800f0a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 800f0ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0b0:	f103 0218 	add.w	r2, r3, #24
 800f0b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0b6:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 800f0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ba:	3318      	adds	r3, #24
 800f0bc:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f0c4:	4413      	add	r3, r2
 800f0c6:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 800f0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0ca:	1e5a      	subs	r2, r3, #1
 800f0cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d1dd      	bne.n	800f08e <_fx_media_open+0x39e>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 800f0d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0d4:	3b18      	subs	r3, #24
 800f0d6:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 800f0d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0da:	2200      	movs	r2, #0
 800f0dc:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 800f0de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0e0:	1e5a      	subs	r2, r3, #1
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	695b      	ldr	r3, [r3, #20]
 800f100:	2b0f      	cmp	r3, #15
 800f102:	d91a      	bls.n	800f13a <_fx_media_open+0x44a>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	695a      	ldr	r2, [r3, #20]
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	695b      	ldr	r3, [r3, #20]
 800f10c:	3b01      	subs	r3, #1
 800f10e:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	6959      	ldr	r1, [r3, #20]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	695b      	ldr	r3, [r3, #20]
 800f118:	3b01      	subs	r3, #1
 800f11a:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d10c      	bne.n	800f13a <_fx_media_open+0x44a>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2201      	movs	r2, #1
 800f124:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	695b      	ldr	r3, [r3, #20]
 800f12a:	089b      	lsrs	r3, r3, #2
 800f12c:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 800f12e:	68fa      	ldr	r2, [r7, #12]
 800f130:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800f134:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 800f138:	e002      	b.n	800f140 <_fx_media_open+0x450>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2200      	movs	r2, #0
 800f13e:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800f140:	2300      	movs	r3, #0
 800f142:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f144:	e023      	b.n	800f18e <_fx_media_open+0x49e>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800f146:	68f9      	ldr	r1, [r7, #12]
 800f148:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f14a:	4613      	mov	r3, r2
 800f14c:	005b      	lsls	r3, r3, #1
 800f14e:	4413      	add	r3, r2
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	440b      	add	r3, r1
 800f154:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800f158:	2200      	movs	r2, #0
 800f15a:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800f15c:	68f9      	ldr	r1, [r7, #12]
 800f15e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f160:	4613      	mov	r3, r2
 800f162:	005b      	lsls	r3, r3, #1
 800f164:	4413      	add	r3, r2
 800f166:	009b      	lsls	r3, r3, #2
 800f168:	440b      	add	r3, r1
 800f16a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800f16e:	2200      	movs	r2, #0
 800f170:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800f172:	68f9      	ldr	r1, [r7, #12]
 800f174:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f176:	4613      	mov	r3, r2
 800f178:	005b      	lsls	r3, r3, #1
 800f17a:	4413      	add	r3, r2
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	440b      	add	r3, r1
 800f180:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800f184:	2200      	movs	r2, #0
 800f186:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800f188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f18a:	3301      	adds	r3, #1
 800f18c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f18e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f190:	2b0f      	cmp	r3, #15
 800f192:	d9d8      	bls.n	800f146 <_fx_media_open+0x456>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800f194:	2300      	movs	r3, #0
 800f196:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f198:	e009      	b.n	800f1ae <_fx_media_open+0x4be>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800f19a:	68fa      	ldr	r2, [r7, #12]
 800f19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f19e:	4413      	add	r3, r2
 800f1a0:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800f1a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1b0:	2b7f      	cmp	r3, #127	; 0x7f
 800f1b2:	d9f2      	bls.n	800f19a <_fx_media_open+0x4aa>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 800f1bc:	68f9      	ldr	r1, [r7, #12]
 800f1be:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 800f1c0:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800f1c4:	441a      	add	r2, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1ce:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800f1d4:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800f1d6:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800f1dc:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800f1ec:	441a      	add	r2, r3
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f1f8:	68f9      	ldr	r1, [r7, #12]
 800f1fa:	6d09      	ldr	r1, [r1, #80]	; 0x50
 800f1fc:	2000      	movs	r0, #0
 800f1fe:	460c      	mov	r4, r1
 800f200:	4605      	mov	r5, r0
 800f202:	ebb2 0804 	subs.w	r8, r2, r4
 800f206:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f20e:	2200      	movs	r2, #0
 800f210:	469a      	mov	sl, r3
 800f212:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800f214:	4652      	mov	r2, sl
 800f216:	465b      	mov	r3, fp
 800f218:	4640      	mov	r0, r8
 800f21a:	4649      	mov	r1, r9
 800f21c:	f7f1 f97c 	bl	8000518 <__aeabi_uldivmod>
 800f220:	4602      	mov	r2, r0
 800f222:	460b      	mov	r3, r1
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f22c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f230:	4293      	cmp	r3, r2
 800f232:	d819      	bhi.n	800f268 <_fx_media_open+0x578>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2201      	movs	r2, #1
 800f238:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2200      	movs	r2, #0
 800f23e:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	2200      	movs	r2, #0
 800f244:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f24c:	461a      	mov	r2, r3
 800f24e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800f252:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f25c:	461a      	mov	r2, r3
 800f25e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f262:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800f266:	e037      	b.n	800f2d8 <_fx_media_open+0x5e8>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f26c:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 800f270:	4293      	cmp	r3, r2
 800f272:	d819      	bhi.n	800f2a8 <_fx_media_open+0x5b8>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2200      	movs	r2, #0
 800f278:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2200      	movs	r2, #0
 800f27e:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2200      	movs	r2, #0
 800f284:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f28c:	461a      	mov	r2, r3
 800f28e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800f292:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f29c:	461a      	mov	r2, r3
 800f29e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f2a2:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800f2a6:	e017      	b.n	800f2d8 <_fx_media_open+0x5e8>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f2b8:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	4b95      	ldr	r3, [pc, #596]	; (800f518 <_fx_media_open+0x828>)
 800f2c4:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800f2d4:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d15f      	bne.n	800f3a0 <_fx_media_open+0x6b0>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d801      	bhi.n	800f2ec <_fx_media_open+0x5fc>
            {
                return(FX_MEDIA_INVALID);
 800f2e8:	2302      	movs	r3, #2
 800f2ea:	e26d      	b.n	800f7c8 <_fx_media_open+0xad8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2f4:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 800f2f6:	68f9      	ldr	r1, [r7, #12]
 800f2f8:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800f2fa:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800f2fe:	441a      	add	r2, r3
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 800f304:	2300      	movs	r3, #0
 800f306:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f30c:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800f30e:	f107 0310 	add.w	r3, r7, #16
 800f312:	461a      	mov	r2, r3
 800f314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f000 fdd0 	bl	800febc <_fx_utility_FAT_entry_read>
 800f31c:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 800f31e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f320:	3301      	adds	r3, #1
 800f322:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800f324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00e      	beq.n	800f348 <_fx_media_open+0x658>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2208      	movs	r2, #8
 800f32e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2290      	movs	r2, #144	; 0x90
 800f336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f344:	2303      	movs	r3, #3
 800f346:	e23f      	b.n	800f7c8 <_fx_media_open+0xad8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d004      	beq.n	800f35a <_fx_media_open+0x66a>
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f356:	429a      	cmp	r2, r3
 800f358:	d90e      	bls.n	800f378 <_fx_media_open+0x688>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2208      	movs	r2, #8
 800f35e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2290      	movs	r2, #144	; 0x90
 800f366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f370:	68f8      	ldr	r0, [r7, #12]
 800f372:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f374:	2303      	movs	r3, #3
 800f376:	e227      	b.n	800f7c8 <_fx_media_open+0xad8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	4a68      	ldr	r2, [pc, #416]	; (800f51c <_fx_media_open+0x82c>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d802      	bhi.n	800f386 <_fx_media_open+0x696>
            {
                break;
            }
            cluster_number = FAT_entry;
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800f384:	e7c3      	b.n	800f30e <_fx_media_open+0x61e>
                break;
 800f386:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f38c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f38e:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800f396:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800f39a:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f000 808e 	beq.w	800f4d4 <_fx_media_open+0x7e4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	69db      	ldr	r3, [r3, #28]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	69d9      	ldr	r1, [r3, #28]
 800f3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	69db      	ldr	r3, [r3, #28]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2290      	movs	r2, #144	; 0x90
 800f3e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2203      	movs	r2, #3
 800f406:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800f410:	1c5a      	adds	r2, r3, #1
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d150      	bne.n	800f4ce <_fx_media_open+0x7de>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f432:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800f434:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f436:	f000 fd03 	bl	800fe40 <_fx_utility_32_unsigned_read>
 800f43a:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 800f43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43e:	4a38      	ldr	r2, [pc, #224]	; (800f520 <_fx_media_open+0x830>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d140      	bne.n	800f4c6 <_fx_media_open+0x7d6>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800f444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f446:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f44a:	4618      	mov	r0, r3
 800f44c:	f000 fcf8 	bl	800fe40 <_fx_utility_32_unsigned_read>
 800f450:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 800f452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f454:	4a33      	ldr	r2, [pc, #204]	; (800f524 <_fx_media_open+0x834>)
 800f456:	4293      	cmp	r3, r2
 800f458:	d131      	bne.n	800f4be <_fx_media_open+0x7ce>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 800f45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f45c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f460:	4618      	mov	r0, r3
 800f462:	f000 fced 	bl	800fe40 <_fx_utility_32_unsigned_read>
 800f466:	4602      	mov	r2, r0
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 800f474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f476:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f47a:	4618      	mov	r0, r3
 800f47c:	f000 fce0 	bl	800fe40 <_fx_utility_32_unsigned_read>
 800f480:	4602      	mov	r2, r0
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f490:	429a      	cmp	r2, r3
 800f492:	d80c      	bhi.n	800f4ae <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f49e:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d804      	bhi.n	800f4ae <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800f4aa:	2b01      	cmp	r3, #1
 800f4ac:	d812      	bhi.n	800f4d4 <_fx_media_open+0x7e4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800f4bc:	e00a      	b.n	800f4d4 <_fx_media_open+0x7e4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	669a      	str	r2, [r3, #104]	; 0x68
 800f4c4:	e006      	b.n	800f4d4 <_fx_media_open+0x7e4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	669a      	str	r2, [r3, #104]	; 0x68
 800f4cc:	e002      	b.n	800f4d4 <_fx_media_open+0x7e4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d040      	beq.n	800f55e <_fx_media_open+0x86e>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 800f4dc:	2302      	movs	r3, #2
 800f4de:	657b      	str	r3, [r7, #84]	; 0x54
 800f4e0:	e036      	b.n	800f550 <_fx_media_open+0x860>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800f4e2:	f107 0310 	add.w	r3, r7, #16
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f4ea:	68f8      	ldr	r0, [r7, #12]
 800f4ec:	f000 fce6 	bl	800febc <_fx_utility_FAT_entry_read>
 800f4f0:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800f4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d017      	beq.n	800f528 <_fx_media_open+0x838>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2208      	movs	r2, #8
 800f4fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2290      	movs	r2, #144	; 0x90
 800f504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f50e:	68f8      	ldr	r0, [r7, #12]
 800f510:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f512:	2303      	movs	r3, #3
 800f514:	e158      	b.n	800f7c8 <_fx_media_open+0xad8>
 800f516:	bf00      	nop
 800f518:	0ffffff0 	.word	0x0ffffff0
 800f51c:	0fffffef 	.word	0x0fffffef
 800f520:	41615252 	.word	0x41615252
 800f524:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d10d      	bne.n	800f54a <_fx_media_open+0x85a>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f532:	1c5a      	adds	r2, r3, #1
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d103      	bne.n	800f54a <_fx_media_open+0x85a>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 800f54a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f54c:	3301      	adds	r3, #1
 800f54e:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f554:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 800f556:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f558:	429a      	cmp	r2, r3
 800f55a:	d3c2      	bcc.n	800f4e2 <_fx_media_open+0x7f2>
 800f55c:	e0b4      	b.n	800f6c8 <_fx_media_open+0x9d8>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f562:	2b00      	cmp	r3, #0
 800f564:	f040 80b0 	bne.w	800f6c8 <_fx_media_open+0x9d8>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f56e:	2101      	movs	r1, #1
 800f570:	9102      	str	r1, [sp, #8]
 800f572:	e9cd 2300 	strd	r2, r3, [sp]
 800f576:	f04f 0201 	mov.w	r2, #1
 800f57a:	f04f 0300 	mov.w	r3, #0
 800f57e:	68f8      	ldr	r0, [r7, #12]
 800f580:	f001 fe94 	bl	80112ac <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f588:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 800f58a:	2300      	movs	r3, #0
 800f58c:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800f58e:	2300      	movs	r3, #0
 800f590:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f592:	e093      	b.n	800f6bc <_fx_media_open+0x9cc>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f59a:	4413      	add	r3, r2
 800f59c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5a4:	1ad3      	subs	r3, r2, r3
 800f5a6:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	695b      	ldr	r3, [r3, #20]
 800f5ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d902      	bls.n	800f5b8 <_fx_media_open+0x8c8>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	695b      	ldr	r3, [r3, #20]
 800f5b6:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	2290      	movs	r2, #144	; 0x90
 800f5c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	689a      	ldr	r2, [r3, #8]
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f5de:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2202      	movs	r2, #2
 800f5e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00e      	beq.n	800f61c <_fx_media_open+0x92c>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2208      	movs	r2, #8
 800f602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2290      	movs	r2, #144	; 0x90
 800f60a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f614:	68f8      	ldr	r0, [r7, #12]
 800f616:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f618:	2303      	movs	r3, #3
 800f61a:	e0d5      	b.n	800f7c8 <_fx_media_open+0xad8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f622:	fb02 f303 	mul.w	r3, r2, r3
 800f626:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 800f628:	2300      	movs	r3, #0
 800f62a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f62c:	e03d      	b.n	800f6aa <_fx_media_open+0x9ba>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f632:	2b00      	cmp	r3, #0
 800f634:	d009      	beq.n	800f64a <_fx_media_open+0x95a>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	689a      	ldr	r2, [r3, #8]
 800f63a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f63c:	4413      	add	r3, r2
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 800f642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f644:	3304      	adds	r3, #4
 800f646:	64bb      	str	r3, [r7, #72]	; 0x48
 800f648:	e011      	b.n	800f66e <_fx_media_open+0x97e>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	689a      	ldr	r2, [r3, #8]
 800f64e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f650:	4413      	add	r3, r2
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	689a      	ldr	r2, [r3, #8]
 800f65a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f65c:	3301      	adds	r3, #1
 800f65e:	4413      	add	r3, r2
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800f664:	430b      	orrs	r3, r1
 800f666:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 800f668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f66a:	3302      	adds	r3, #2
 800f66c:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d10d      	bne.n	800f690 <_fx_media_open+0x9a0>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f684:	2b00      	cmp	r3, #0
 800f686:	d103      	bne.n	800f690 <_fx_media_open+0x9a0>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f68c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 800f690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f692:	3301      	adds	r3, #1
 800f694:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f69a:	3302      	adds	r3, #2
 800f69c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d303      	bcc.n	800f6aa <_fx_media_open+0x9ba>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 800f6a8:	e003      	b.n	800f6b2 <_fx_media_open+0x9c2>
            for (j = 0; j < bytes_in_buffer;)
 800f6aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d3bd      	bcc.n	800f62e <_fx_media_open+0x93e>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	695b      	ldr	r3, [r3, #20]
 800f6b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f6b8:	4413      	add	r3, r2
 800f6ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	f4ff af66 	bcc.w	800f594 <_fx_media_open+0x8a4>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d103      	bne.n	800f6da <_fx_media_open+0x9ea>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2202      	movs	r2, #2
 800f6d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2200      	movs	r2, #0
 800f704:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2200      	movs	r2, #0
 800f70c:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2200      	movs	r2, #0
 800f714:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2200      	movs	r2, #0
 800f71c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2200      	movs	r2, #0
 800f724:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f72e:	2200      	movs	r2, #0
 800f730:	4928      	ldr	r1, [pc, #160]	; (800f7d4 <_fx_media_open+0xae4>)
 800f732:	4618      	mov	r0, r3
 800f734:	f003 fd00 	bl	8013138 <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f738:	f3ef 8310 	mrs	r3, PRIMASK
 800f73c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f73e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f740:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f742:	b672      	cpsid	i
    return(int_posture);
 800f744:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 800f746:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	4a23      	ldr	r2, [pc, #140]	; (800f7d8 <_fx_media_open+0xae8>)
 800f74c:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 800f74e:	4b23      	ldr	r3, [pc, #140]	; (800f7dc <_fx_media_open+0xaec>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d017      	beq.n	800f786 <_fx_media_open+0xa96>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 800f756:	4b21      	ldr	r3, [pc, #132]	; (800f7dc <_fx_media_open+0xaec>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f75e:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 800f760:	4b1e      	ldr	r3, [pc, #120]	; (800f7dc <_fx_media_open+0xaec>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 800f76a:	6a3b      	ldr	r3, [r7, #32]
 800f76c:	68fa      	ldr	r2, [r7, #12]
 800f76e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6a3a      	ldr	r2, [r7, #32]
 800f776:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 800f77a:	4b18      	ldr	r3, [pc, #96]	; (800f7dc <_fx_media_open+0xaec>)
 800f77c:	681a      	ldr	r2, [r3, #0]
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800f784:	e00a      	b.n	800f79c <_fx_media_open+0xaac>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 800f786:	4a15      	ldr	r2, [pc, #84]	; (800f7dc <_fx_media_open+0xaec>)
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	68fa      	ldr	r2, [r7, #12]
 800f790:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	68fa      	ldr	r2, [r7, #12]
 800f798:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 800f79c:	4b10      	ldr	r3, [pc, #64]	; (800f7e0 <_fx_media_open+0xaf0>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	4a0f      	ldr	r2, [pc, #60]	; (800f7e0 <_fx_media_open+0xaf0>)
 800f7a4:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d004      	beq.n	800f7ba <_fx_media_open+0xaca>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	4798      	blx	r3
 800f7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7bc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	f383 8810 	msr	PRIMASK, r3
}
 800f7c4:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800f7c6:	2300      	movs	r3, #0
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3758      	adds	r7, #88	; 0x58
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f7d2:	bf00      	nop
 800f7d4:	08016344 	.word	0x08016344
 800f7d8:	4d454449 	.word	0x4d454449
 800f7dc:	24014c28 	.word	0x24014c28
 800f7e0:	24014c2c 	.word	0x24014c2c

0800f7e4 <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 800f7e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f7e8:	b090      	sub	sp, #64	; 0x40
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	60f8      	str	r0, [r7, #12]
 800f7ee:	60b9      	str	r1, [r7, #8]
 800f7f0:	607a      	str	r2, [r7, #4]
 800f7f2:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 800f7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	2be9      	cmp	r3, #233	; 0xe9
 800f802:	d008      	beq.n	800f816 <_fx_partition_offset_calculate+0x32>
 800f804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	2beb      	cmp	r3, #235	; 0xeb
 800f80a:	d17d      	bne.n	800f908 <_fx_partition_offset_calculate+0x124>
 800f80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f80e:	3302      	adds	r3, #2
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	2b90      	cmp	r3, #144	; 0x90
 800f814:	d178      	bne.n	800f908 <_fx_partition_offset_calculate+0x124>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 800f816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f818:	3316      	adds	r3, #22
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d118      	bne.n	800f852 <_fx_partition_offset_calculate+0x6e>
 800f820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f822:	3317      	adds	r3, #23
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d113      	bne.n	800f852 <_fx_partition_offset_calculate+0x6e>
 800f82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f82c:	3324      	adds	r3, #36	; 0x24
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d10e      	bne.n	800f852 <_fx_partition_offset_calculate+0x6e>
 800f834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f836:	3325      	adds	r3, #37	; 0x25
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d109      	bne.n	800f852 <_fx_partition_offset_calculate+0x6e>
 800f83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f840:	3326      	adds	r3, #38	; 0x26
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d104      	bne.n	800f852 <_fx_partition_offset_calculate+0x6e>
 800f848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f84a:	3327      	adds	r3, #39	; 0x27
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d05a      	beq.n	800f908 <_fx_partition_offset_calculate+0x124>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 800f852:	f04f 0200 	mov.w	r2, #0
 800f856:	f04f 0300 	mov.w	r3, #0
 800f85a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 800f85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f860:	3313      	adds	r3, #19
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d104      	bne.n	800f872 <_fx_partition_offset_calculate+0x8e>
 800f868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f86a:	3314      	adds	r3, #20
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00d      	beq.n	800f88e <_fx_partition_offset_calculate+0xaa>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 800f872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f874:	3314      	adds	r3, #20
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	021b      	lsls	r3, r3, #8
 800f87a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f87c:	3213      	adds	r2, #19
 800f87e:	7812      	ldrb	r2, [r2, #0]
 800f880:	4313      	orrs	r3, r2
 800f882:	2200      	movs	r2, #0
 800f884:	4698      	mov	r8, r3
 800f886:	4691      	mov	r9, r2
 800f888:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800f88c:	e02a      	b.n	800f8e4 <_fx_partition_offset_calculate+0x100>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 800f88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f890:	3320      	adds	r3, #32
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d10e      	bne.n	800f8b6 <_fx_partition_offset_calculate+0xd2>
 800f898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f89a:	3321      	adds	r3, #33	; 0x21
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d109      	bne.n	800f8b6 <_fx_partition_offset_calculate+0xd2>
 800f8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8a4:	3322      	adds	r3, #34	; 0x22
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d104      	bne.n	800f8b6 <_fx_partition_offset_calculate+0xd2>
 800f8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ae:	3323      	adds	r3, #35	; 0x23
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d016      	beq.n	800f8e4 <_fx_partition_offset_calculate+0x100>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800f8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8b8:	3323      	adds	r3, #35	; 0x23
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800f8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c0:	3322      	adds	r3, #34	; 0x22
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800f8c6:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800f8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ca:	3321      	adds	r3, #33	; 0x21
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800f8d0:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 800f8d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8d4:	3220      	adds	r2, #32
 800f8d6:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800f8d8:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800f8da:	2200      	movs	r2, #0
 800f8dc:	461c      	mov	r4, r3
 800f8de:	4615      	mov	r5, r2
 800f8e0:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 800f8e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	d00d      	beq.n	800f908 <_fx_partition_offset_calculate+0x124>
            {

                if (partition_start != FX_NULL)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d002      	beq.n	800f8f8 <_fx_partition_offset_calculate+0x114>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d002      	beq.n	800f904 <_fx_partition_offset_calculate+0x120>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 800f8fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 800f904:	2300      	movs	r3, #0
 800f906:	e032      	b.n	800f96e <_fx_partition_offset_calculate+0x18a>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 800f908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f90a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	2b55      	cmp	r3, #85	; 0x55
 800f912:	d105      	bne.n	800f920 <_fx_partition_offset_calculate+0x13c>
 800f914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f916:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	2baa      	cmp	r3, #170	; 0xaa
 800f91e:	d001      	beq.n	800f924 <_fx_partition_offset_calculate+0x140>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 800f920:	2304      	movs	r3, #4
 800f922:	e024      	b.n	800f96e <_fx_partition_offset_calculate+0x18a>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 800f924:	f107 0110 	add.w	r1, r7, #16
 800f928:	f107 0014 	add.w	r0, r7, #20
 800f92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f92e:	2200      	movs	r2, #0
 800f930:	f000 f822 	bl	800f978 <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d301      	bcc.n	800f940 <_fx_partition_offset_calculate+0x15c>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 800f93c:	2304      	movs	r3, #4
 800f93e:	e016      	b.n	800f96e <_fx_partition_offset_calculate+0x18a>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d007      	beq.n	800f956 <_fx_partition_offset_calculate+0x172>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	00db      	lsls	r3, r3, #3
 800f94a:	3340      	adds	r3, #64	; 0x40
 800f94c:	443b      	add	r3, r7
 800f94e:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d007      	beq.n	800f96c <_fx_partition_offset_calculate+0x188>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	00db      	lsls	r3, r3, #3
 800f960:	3340      	adds	r3, #64	; 0x40
 800f962:	443b      	add	r3, r7
 800f964:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3740      	adds	r7, #64	; 0x40
 800f972:	46bd      	mov	sp, r7
 800f974:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800f978 <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 800f978:	b480      	push	{r7}
 800f97a:	b089      	sub	sp, #36	; 0x24
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
 800f984:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 800f986:	2300      	movs	r3, #0
 800f988:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 800f98a:	f44f 73df 	mov.w	r3, #446	; 0x1be
 800f98e:	61fb      	str	r3, [r7, #28]
 800f990:	e06f      	b.n	800fa72 <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	3304      	adds	r3, #4
 800f996:	683a      	ldr	r2, [r7, #0]
 800f998:	4413      	add	r3, r2
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d10e      	bne.n	800f9be <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	00db      	lsls	r3, r3, #3
 800f9a6:	68fa      	ldr	r2, [r7, #12]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	00db      	lsls	r3, r3, #3
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	4413      	add	r3, r2
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	605a      	str	r2, [r3, #4]
 800f9bc:	e051      	b.n	800fa62 <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	3308      	adds	r3, #8
 800f9c2:	683a      	ldr	r2, [r7, #0]
 800f9c4:	4413      	add	r3, r2
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	3309      	adds	r3, #9
 800f9ce:	683a      	ldr	r2, [r7, #0]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	021b      	lsls	r3, r3, #8
 800f9d6:	697a      	ldr	r2, [r7, #20]
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800f9dc:	69fb      	ldr	r3, [r7, #28]
 800f9de:	330a      	adds	r3, #10
 800f9e0:	683a      	ldr	r2, [r7, #0]
 800f9e2:	4413      	add	r3, r2
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	041b      	lsls	r3, r3, #16
 800f9e8:	697a      	ldr	r2, [r7, #20]
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	330b      	adds	r3, #11
 800f9f2:	683a      	ldr	r2, [r7, #0]
 800f9f4:	4413      	add	r3, r2
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	061b      	lsls	r3, r3, #24
 800f9fa:	697a      	ldr	r2, [r7, #20]
 800f9fc:	4313      	orrs	r3, r2
 800f9fe:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	00db      	lsls	r3, r3, #3
 800fa06:	68fa      	ldr	r2, [r7, #12]
 800fa08:	4413      	add	r3, r2
 800fa0a:	6979      	ldr	r1, [r7, #20]
 800fa0c:	69ba      	ldr	r2, [r7, #24]
 800fa0e:	440a      	add	r2, r1
 800fa10:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	330c      	adds	r3, #12
 800fa16:	683a      	ldr	r2, [r7, #0]
 800fa18:	4413      	add	r3, r2
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 800fa1e:	69fb      	ldr	r3, [r7, #28]
 800fa20:	330d      	adds	r3, #13
 800fa22:	683a      	ldr	r2, [r7, #0]
 800fa24:	4413      	add	r3, r2
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	021b      	lsls	r3, r3, #8
 800fa2a:	697a      	ldr	r2, [r7, #20]
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	330e      	adds	r3, #14
 800fa34:	683a      	ldr	r2, [r7, #0]
 800fa36:	4413      	add	r3, r2
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	041b      	lsls	r3, r3, #16
 800fa3c:	697a      	ldr	r2, [r7, #20]
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	330f      	adds	r3, #15
 800fa46:	683a      	ldr	r2, [r7, #0]
 800fa48:	4413      	add	r3, r2
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	061b      	lsls	r3, r3, #24
 800fa4e:	697a      	ldr	r2, [r7, #20]
 800fa50:	4313      	orrs	r3, r2
 800fa52:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	00db      	lsls	r3, r3, #3
 800fa5a:	68fa      	ldr	r2, [r7, #12]
 800fa5c:	4413      	add	r3, r2
 800fa5e:	697a      	ldr	r2, [r7, #20]
 800fa60:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	1c5a      	adds	r2, r3, #1
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	3310      	adds	r3, #16
 800fa70:	61fb      	str	r3, [r7, #28]
 800fa72:	69fb      	ldr	r3, [r7, #28]
 800fa74:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 800fa78:	d98b      	bls.n	800f992 <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 800fa7a:	2300      	movs	r3, #0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3724      	adds	r7, #36	; 0x24
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800fa8e:	4b27      	ldr	r3, [pc, #156]	; (800fb2c <_fx_system_initialize+0xa4>)
 800fa90:	2200      	movs	r2, #0
 800fa92:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800fa94:	4b26      	ldr	r3, [pc, #152]	; (800fb30 <_fx_system_initialize+0xa8>)
 800fa96:	2200      	movs	r2, #0
 800fa98:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800fa9a:	4b26      	ldr	r3, [pc, #152]	; (800fb34 <_fx_system_initialize+0xac>)
 800fa9c:	f644 2221 	movw	r2, #18977	; 0x4a21
 800faa0:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800faa2:	4b25      	ldr	r3, [pc, #148]	; (800fb38 <_fx_system_initialize+0xb0>)
 800faa4:	2200      	movs	r2, #0
 800faa6:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800faa8:	4b24      	ldr	r3, [pc, #144]	; (800fb3c <_fx_system_initialize+0xb4>)
 800faaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800faae:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800fab0:	4b23      	ldr	r3, [pc, #140]	; (800fb40 <_fx_system_initialize+0xb8>)
 800fab2:	2210      	movs	r2, #16
 800fab4:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800fab6:	2301      	movs	r3, #1
 800fab8:	9302      	str	r3, [sp, #8]
 800faba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fabe:	9301      	str	r3, [sp, #4]
 800fac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fac4:	9300      	str	r3, [sp, #0]
 800fac6:	4b1f      	ldr	r3, [pc, #124]	; (800fb44 <_fx_system_initialize+0xbc>)
 800fac8:	4a1f      	ldr	r2, [pc, #124]	; (800fb48 <_fx_system_initialize+0xc0>)
 800faca:	4920      	ldr	r1, [pc, #128]	; (800fb4c <_fx_system_initialize+0xc4>)
 800facc:	4820      	ldr	r0, [pc, #128]	; (800fb50 <_fx_system_initialize+0xc8>)
 800face:	f005 fc97 	bl	8015400 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800fad2:	4b20      	ldr	r3, [pc, #128]	; (800fb54 <_fx_system_initialize+0xcc>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fada:	4a1e      	ldr	r2, [pc, #120]	; (800fb54 <_fx_system_initialize+0xcc>)
 800fadc:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800fade:	4b1d      	ldr	r3, [pc, #116]	; (800fb54 <_fx_system_initialize+0xcc>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fae6:	4a1b      	ldr	r2, [pc, #108]	; (800fb54 <_fx_system_initialize+0xcc>)
 800fae8:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800faea:	4b1b      	ldr	r3, [pc, #108]	; (800fb58 <_fx_system_initialize+0xd0>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800faf2:	4a19      	ldr	r2, [pc, #100]	; (800fb58 <_fx_system_initialize+0xd0>)
 800faf4:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800faf6:	4b18      	ldr	r3, [pc, #96]	; (800fb58 <_fx_system_initialize+0xd0>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fafe:	4a16      	ldr	r2, [pc, #88]	; (800fb58 <_fx_system_initialize+0xd0>)
 800fb00:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800fb02:	4b15      	ldr	r3, [pc, #84]	; (800fb58 <_fx_system_initialize+0xd0>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f043 0310 	orr.w	r3, r3, #16
 800fb0a:	4a13      	ldr	r2, [pc, #76]	; (800fb58 <_fx_system_initialize+0xd0>)
 800fb0c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800fb0e:	4b13      	ldr	r3, [pc, #76]	; (800fb5c <_fx_system_initialize+0xd4>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800fb16:	4a11      	ldr	r2, [pc, #68]	; (800fb5c <_fx_system_initialize+0xd4>)
 800fb18:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800fb1a:	4b10      	ldr	r3, [pc, #64]	; (800fb5c <_fx_system_initialize+0xd4>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 800fb22:	4a0e      	ldr	r2, [pc, #56]	; (800fb5c <_fx_system_initialize+0xd4>)
 800fb24:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800fb26:	bf00      	nop
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}
 800fb2c:	24014c28 	.word	0x24014c28
 800fb30:	24014c2c 	.word	0x24014c2c
 800fb34:	24014c30 	.word	0x24014c30
 800fb38:	24014c34 	.word	0x24014c34
 800fb3c:	24014c38 	.word	0x24014c38
 800fb40:	24014c3c 	.word	0x24014c3c
 800fb44:	46585359 	.word	0x46585359
 800fb48:	0800fb61 	.word	0x0800fb61
 800fb4c:	08016358 	.word	0x08016358
 800fb50:	24014c4c 	.word	0x24014c4c
 800fb54:	24014c40 	.word	0x24014c40
 800fb58:	24014c44 	.word	0x24014c44
 800fb5c:	24014c48 	.word	0x24014c48

0800fb60 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b089      	sub	sp, #36	; 0x24
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	4a9d      	ldr	r2, [pc, #628]	; (800fde0 <_fx_system_timer_entry+0x280>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	f040 8132 	bne.w	800fdd6 <_fx_system_timer_entry+0x276>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800fb72:	4b9c      	ldr	r3, [pc, #624]	; (800fde4 <_fx_system_timer_entry+0x284>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f003 031f 	and.w	r3, r3, #31
 800fb7a:	005b      	lsls	r3, r3, #1
 800fb7c:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 800fb7e:	4b99      	ldr	r3, [pc, #612]	; (800fde4 <_fx_system_timer_entry+0x284>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	095b      	lsrs	r3, r3, #5
 800fb84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb88:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 800fb8a:	4b96      	ldr	r3, [pc, #600]	; (800fde4 <_fx_system_timer_entry+0x284>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	0adb      	lsrs	r3, r3, #11
 800fb90:	f003 031f 	and.w	r3, r3, #31
 800fb94:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 800fb96:	4b94      	ldr	r3, [pc, #592]	; (800fde8 <_fx_system_timer_entry+0x288>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f003 031f 	and.w	r3, r3, #31
 800fb9e:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 800fba0:	4b91      	ldr	r3, [pc, #580]	; (800fde8 <_fx_system_timer_entry+0x288>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	095b      	lsrs	r3, r3, #5
 800fba6:	f003 030f 	and.w	r3, r3, #15
 800fbaa:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 800fbac:	4b8e      	ldr	r3, [pc, #568]	; (800fde8 <_fx_system_timer_entry+0x288>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	0a5b      	lsrs	r3, r3, #9
 800fbb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbb6:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800fbba:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	330a      	adds	r3, #10
 800fbc0:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	2b3b      	cmp	r3, #59	; 0x3b
 800fbc6:	f240 80d4 	bls.w	800fd72 <_fx_system_timer_entry+0x212>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	4a87      	ldr	r2, [pc, #540]	; (800fdec <_fx_system_timer_entry+0x28c>)
 800fbce:	fba2 2303 	umull	r2, r3, r2, r3
 800fbd2:	095b      	lsrs	r3, r3, #5
 800fbd4:	69ba      	ldr	r2, [r7, #24]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 800fbda:	69fa      	ldr	r2, [r7, #28]
 800fbdc:	4b83      	ldr	r3, [pc, #524]	; (800fdec <_fx_system_timer_entry+0x28c>)
 800fbde:	fba3 1302 	umull	r1, r3, r3, r2
 800fbe2:	0959      	lsrs	r1, r3, #5
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	011b      	lsls	r3, r3, #4
 800fbe8:	1a5b      	subs	r3, r3, r1
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	1ad3      	subs	r3, r2, r3
 800fbee:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 800fbf0:	69bb      	ldr	r3, [r7, #24]
 800fbf2:	2b3b      	cmp	r3, #59	; 0x3b
 800fbf4:	f240 80bd 	bls.w	800fd72 <_fx_system_timer_entry+0x212>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 800fbf8:	69bb      	ldr	r3, [r7, #24]
 800fbfa:	4a7c      	ldr	r2, [pc, #496]	; (800fdec <_fx_system_timer_entry+0x28c>)
 800fbfc:	fba2 2303 	umull	r2, r3, r2, r3
 800fc00:	095b      	lsrs	r3, r3, #5
 800fc02:	697a      	ldr	r2, [r7, #20]
 800fc04:	4413      	add	r3, r2
 800fc06:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 800fc08:	69ba      	ldr	r2, [r7, #24]
 800fc0a:	4b78      	ldr	r3, [pc, #480]	; (800fdec <_fx_system_timer_entry+0x28c>)
 800fc0c:	fba3 1302 	umull	r1, r3, r3, r2
 800fc10:	0959      	lsrs	r1, r3, #5
 800fc12:	460b      	mov	r3, r1
 800fc14:	011b      	lsls	r3, r3, #4
 800fc16:	1a5b      	subs	r3, r3, r1
 800fc18:	009b      	lsls	r3, r3, #2
 800fc1a:	1ad3      	subs	r3, r2, r3
 800fc1c:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	2b17      	cmp	r3, #23
 800fc22:	f240 80a6 	bls.w	800fd72 <_fx_system_timer_entry+0x212>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 800fc26:	2300      	movs	r3, #0
 800fc28:	617b      	str	r3, [r7, #20]
                    day++;
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	3b01      	subs	r3, #1
 800fc34:	2b0b      	cmp	r3, #11
 800fc36:	f200 80cb 	bhi.w	800fdd0 <_fx_system_timer_entry+0x270>
 800fc3a:	a201      	add	r2, pc, #4	; (adr r2, 800fc40 <_fx_system_timer_entry+0xe0>)
 800fc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc40:	0800fc71 	.word	0x0800fc71
 800fc44:	0800fc83 	.word	0x0800fc83
 800fc48:	0800fcb1 	.word	0x0800fcb1
 800fc4c:	0800fcc3 	.word	0x0800fcc3
 800fc50:	0800fcd5 	.word	0x0800fcd5
 800fc54:	0800fce7 	.word	0x0800fce7
 800fc58:	0800fcf9 	.word	0x0800fcf9
 800fc5c:	0800fd0b 	.word	0x0800fd0b
 800fc60:	0800fd1d 	.word	0x0800fd1d
 800fc64:	0800fd2f 	.word	0x0800fd2f
 800fc68:	0800fd41 	.word	0x0800fd41
 800fc6c:	0800fd53 	.word	0x0800fd53

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	2b1f      	cmp	r3, #31
 800fc74:	d97f      	bls.n	800fd76 <_fx_system_timer_entry+0x216>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fc76:	2301      	movs	r3, #1
 800fc78:	613b      	str	r3, [r7, #16]
                            month++;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800fc80:	e079      	b.n	800fd76 <_fx_system_timer_entry+0x216>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	f003 0303 	and.w	r3, r3, #3
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d108      	bne.n	800fc9e <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	2b1d      	cmp	r3, #29
 800fc90:	d973      	bls.n	800fd7a <_fx_system_timer_entry+0x21a>
                            {

                                /* Adjust the month.  */
                                day =  1;
 800fc92:	2301      	movs	r3, #1
 800fc94:	613b      	str	r3, [r7, #16]
                                month++;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 800fc9c:	e06d      	b.n	800fd7a <_fx_system_timer_entry+0x21a>
                            if (day > 28)
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	2b1c      	cmp	r3, #28
 800fca2:	d96a      	bls.n	800fd7a <_fx_system_timer_entry+0x21a>
                                day = 1;
 800fca4:	2301      	movs	r3, #1
 800fca6:	613b      	str	r3, [r7, #16]
                                month++;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	60fb      	str	r3, [r7, #12]
                        break;
 800fcae:	e064      	b.n	800fd7a <_fx_system_timer_entry+0x21a>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	2b1f      	cmp	r3, #31
 800fcb4:	d963      	bls.n	800fd7e <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	613b      	str	r3, [r7, #16]
                            month++;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800fcc0:	e05d      	b.n	800fd7e <_fx_system_timer_entry+0x21e>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	2b1e      	cmp	r3, #30
 800fcc6:	d95c      	bls.n	800fd82 <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	613b      	str	r3, [r7, #16]
                            month++;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800fcd2:	e056      	b.n	800fd82 <_fx_system_timer_entry+0x222>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	2b1f      	cmp	r3, #31
 800fcd8:	d955      	bls.n	800fd86 <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fcda:	2301      	movs	r3, #1
 800fcdc:	613b      	str	r3, [r7, #16]
                            month++;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	3301      	adds	r3, #1
 800fce2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800fce4:	e04f      	b.n	800fd86 <_fx_system_timer_entry+0x226>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	2b1e      	cmp	r3, #30
 800fcea:	d94e      	bls.n	800fd8a <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fcec:	2301      	movs	r3, #1
 800fcee:	613b      	str	r3, [r7, #16]
                            month++;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800fcf6:	e048      	b.n	800fd8a <_fx_system_timer_entry+0x22a>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	2b1f      	cmp	r3, #31
 800fcfc:	d947      	bls.n	800fd8e <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fcfe:	2301      	movs	r3, #1
 800fd00:	613b      	str	r3, [r7, #16]
                            month++;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	3301      	adds	r3, #1
 800fd06:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800fd08:	e041      	b.n	800fd8e <_fx_system_timer_entry+0x22e>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	2b1f      	cmp	r3, #31
 800fd0e:	d940      	bls.n	800fd92 <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fd10:	2301      	movs	r3, #1
 800fd12:	613b      	str	r3, [r7, #16]
                            month++;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	3301      	adds	r3, #1
 800fd18:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800fd1a:	e03a      	b.n	800fd92 <_fx_system_timer_entry+0x232>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	2b1e      	cmp	r3, #30
 800fd20:	d939      	bls.n	800fd96 <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fd22:	2301      	movs	r3, #1
 800fd24:	613b      	str	r3, [r7, #16]
                            month++;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	3301      	adds	r3, #1
 800fd2a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800fd2c:	e033      	b.n	800fd96 <_fx_system_timer_entry+0x236>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	2b1f      	cmp	r3, #31
 800fd32:	d932      	bls.n	800fd9a <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fd34:	2301      	movs	r3, #1
 800fd36:	613b      	str	r3, [r7, #16]
                            month++;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800fd3e:	e02c      	b.n	800fd9a <_fx_system_timer_entry+0x23a>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	2b1e      	cmp	r3, #30
 800fd44:	d92b      	bls.n	800fd9e <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fd46:	2301      	movs	r3, #1
 800fd48:	613b      	str	r3, [r7, #16]
                            month++;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800fd50:	e025      	b.n	800fd9e <_fx_system_timer_entry+0x23e>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	2b1f      	cmp	r3, #31
 800fd56:	d924      	bls.n	800fda2 <_fx_system_timer_entry+0x242>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	613b      	str	r3, [r7, #16]
                            month = 1;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	3301      	adds	r3, #1
 800fd64:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	f640 023b 	movw	r2, #2107	; 0x83b
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d831      	bhi.n	800fdd4 <_fx_system_timer_entry+0x274>
                            {
                                return;
                            }
                        }
                        break;
 800fd70:	e017      	b.n	800fda2 <_fx_system_timer_entry+0x242>

                    default:                /* Invalid month!  */

                        return;             /* Skip updating date/time!  */
                    }
                }
 800fd72:	bf00      	nop
 800fd74:	e016      	b.n	800fda4 <_fx_system_timer_entry+0x244>
                        break;
 800fd76:	bf00      	nop
 800fd78:	e014      	b.n	800fda4 <_fx_system_timer_entry+0x244>
                        break;
 800fd7a:	bf00      	nop
 800fd7c:	e012      	b.n	800fda4 <_fx_system_timer_entry+0x244>
                        break;
 800fd7e:	bf00      	nop
 800fd80:	e010      	b.n	800fda4 <_fx_system_timer_entry+0x244>
                        break;
 800fd82:	bf00      	nop
 800fd84:	e00e      	b.n	800fda4 <_fx_system_timer_entry+0x244>
                        break;
 800fd86:	bf00      	nop
 800fd88:	e00c      	b.n	800fda4 <_fx_system_timer_entry+0x244>
                        break;
 800fd8a:	bf00      	nop
 800fd8c:	e00a      	b.n	800fda4 <_fx_system_timer_entry+0x244>
                        break;
 800fd8e:	bf00      	nop
 800fd90:	e008      	b.n	800fda4 <_fx_system_timer_entry+0x244>
                        break;
 800fd92:	bf00      	nop
 800fd94:	e006      	b.n	800fda4 <_fx_system_timer_entry+0x244>
                        break;
 800fd96:	bf00      	nop
 800fd98:	e004      	b.n	800fda4 <_fx_system_timer_entry+0x244>
                        break;
 800fd9a:	bf00      	nop
 800fd9c:	e002      	b.n	800fda4 <_fx_system_timer_entry+0x244>
                        break;
 800fd9e:	bf00      	nop
 800fda0:	e000      	b.n	800fda4 <_fx_system_timer_entry+0x244>
                        break;
 800fda2:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 800fdaa:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800fdb0:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800fdb6:	4a0c      	ldr	r2, [pc, #48]	; (800fde8 <_fx_system_timer_entry+0x288>)
 800fdb8:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800fdbe:	69bb      	ldr	r3, [r7, #24]
 800fdc0:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800fdc2:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	085b      	lsrs	r3, r3, #1
 800fdc8:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800fdca:	4a06      	ldr	r2, [pc, #24]	; (800fde4 <_fx_system_timer_entry+0x284>)
 800fdcc:	6013      	str	r3, [r2, #0]
 800fdce:	e002      	b.n	800fdd6 <_fx_system_timer_entry+0x276>
                        return;             /* Skip updating date/time!  */
 800fdd0:	bf00      	nop
 800fdd2:	e000      	b.n	800fdd6 <_fx_system_timer_entry+0x276>
                                return;
 800fdd4:	bf00      	nop
    }
}
 800fdd6:	3724      	adds	r7, #36	; 0x24
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr
 800fde0:	46585359 	.word	0x46585359
 800fde4:	24014c34 	.word	0x24014c34
 800fde8:	24014c30 	.word	0x24014c30
 800fdec:	88888889 	.word	0x88888889

0800fdf0 <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b085      	sub	sp, #20
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800fe04:	4313      	orrs	r3, r2
 800fe06:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800fe08:	68fb      	ldr	r3, [r7, #12]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3714      	adds	r7, #20
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr

0800fe16 <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 800fe16:	b480      	push	{r7}
 800fe18:	b083      	sub	sp, #12
 800fe1a:	af00      	add	r7, sp, #0
 800fe1c:	6078      	str	r0, [r7, #4]
 800fe1e:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	b2da      	uxtb	r2, r3
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	0a1a      	lsrs	r2, r3, #8
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	3301      	adds	r3, #1
 800fe30:	b2d2      	uxtb	r2, r2
 800fe32:	701a      	strb	r2, [r3, #0]
}
 800fe34:	bf00      	nop
 800fe36:	370c      	adds	r7, #12
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b085      	sub	sp, #20
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	3303      	adds	r3, #3
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	3302      	adds	r3, #2
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800fe58:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800fe62:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3714      	adds	r7, #20
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr

0800fe7a <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 800fe7a:	b480      	push	{r7}
 800fe7c:	b083      	sub	sp, #12
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
 800fe82:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	b2da      	uxtb	r2, r3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	0a1a      	lsrs	r2, r3, #8
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	3301      	adds	r3, #1
 800fe94:	b2d2      	uxtb	r2, r2
 800fe96:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	0c1a      	lsrs	r2, r3, #16
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	3302      	adds	r3, #2
 800fea0:	b2d2      	uxtb	r2, r2
 800fea2:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	0e1a      	lsrs	r2, r3, #24
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	3303      	adds	r3, #3
 800feac:	b2d2      	uxtb	r2, r2
 800feae:	701a      	strb	r2, [r3, #0]
}
 800feb0:	bf00      	nop
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 800febc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fec0:	b098      	sub	sp, #96	; 0x60
 800fec2:	af04      	add	r7, sp, #16
 800fec4:	61f8      	str	r0, [r7, #28]
 800fec6:	61b9      	str	r1, [r7, #24]
 800fec8:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 800feca:	69fb      	ldr	r3, [r7, #28]
 800fecc:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800fed0:	1c5a      	adds	r2, r3, #1
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800fede:	1c5a      	adds	r2, r3, #1
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	f003 0303 	and.w	r3, r3, #3
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 800fef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fef2:	4613      	mov	r3, r2
 800fef4:	005b      	lsls	r3, r3, #1
 800fef6:	4413      	add	r3, r2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800fefe:	69fa      	ldr	r2, [r7, #28]
 800ff00:	4413      	add	r3, r2
 800ff02:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 800ff04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	69ba      	ldr	r2, [r7, #24]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d105      	bne.n	800ff1a <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 800ff0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff10:	685a      	ldr	r2, [r3, #4]
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800ff16:	2300      	movs	r3, #0
 800ff18:	e1f4      	b.n	8010304 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 800ff1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff1c:	330c      	adds	r3, #12
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	69ba      	ldr	r2, [r7, #24]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d11d      	bne.n	800ff62 <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 800ff26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff28:	330c      	adds	r3, #12
 800ff2a:	685a      	ldr	r2, [r3, #4]
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800ff30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff36:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 800ff3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff40:	4614      	mov	r4, r2
 800ff42:	330c      	adds	r3, #12
 800ff44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ff48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800ff4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff4e:	330c      	adds	r3, #12
 800ff50:	461c      	mov	r4, r3
 800ff52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ff5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800ff5e:	2300      	movs	r3, #0
 800ff60:	e1d0      	b.n	8010304 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 800ff62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff64:	3318      	adds	r3, #24
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	69ba      	ldr	r2, [r7, #24]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d127      	bne.n	800ffbe <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 800ff6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff70:	3318      	adds	r3, #24
 800ff72:	685a      	ldr	r2, [r3, #4]
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800ff78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff7e:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 800ff84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff88:	4614      	mov	r4, r2
 800ff8a:	3318      	adds	r3, #24
 800ff8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ff90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800ff94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff96:	f103 0218 	add.w	r2, r3, #24
 800ff9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff9c:	4614      	mov	r4, r2
 800ff9e:	330c      	adds	r3, #12
 800ffa0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ffa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800ffa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffaa:	330c      	adds	r3, #12
 800ffac:	461c      	mov	r4, r3
 800ffae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ffb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ffb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800ffba:	2300      	movs	r3, #0
 800ffbc:	e1a2      	b.n	8010304 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 800ffbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffc0:	3324      	adds	r3, #36	; 0x24
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	69ba      	ldr	r2, [r7, #24]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d131      	bne.n	801002e <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 800ffca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffcc:	3324      	adds	r3, #36	; 0x24
 800ffce:	685a      	ldr	r2, [r3, #4]
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800ffd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ffd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ffda:	ca07      	ldmia	r2, {r0, r1, r2}
 800ffdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 800ffe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ffe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffe4:	4614      	mov	r4, r2
 800ffe6:	3324      	adds	r3, #36	; 0x24
 800ffe8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ffec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800fff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fff2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fff8:	4614      	mov	r4, r2
 800fffa:	3318      	adds	r3, #24
 800fffc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010000:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8010004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010006:	f103 0218 	add.w	r2, r3, #24
 801000a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801000c:	4614      	mov	r4, r2
 801000e:	330c      	adds	r3, #12
 8010010:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8010018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801001a:	330c      	adds	r3, #12
 801001c:	461c      	mov	r4, r3
 801001e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010022:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010026:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 801002a:	2300      	movs	r3, #0
 801002c:	e16a      	b.n	8010304 <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 801002e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010030:	1cda      	adds	r2, r3, #3
 8010032:	69f9      	ldr	r1, [r7, #28]
 8010034:	4613      	mov	r3, r2
 8010036:	005b      	lsls	r3, r3, #1
 8010038:	4413      	add	r3, r2
 801003a:	009b      	lsls	r3, r3, #2
 801003c:	440b      	add	r3, r1
 801003e:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d008      	beq.n	801005a <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 8010048:	69f8      	ldr	r0, [r7, #28]
 801004a:	f000 fa54 	bl	80104f6 <_fx_utility_FAT_flush>
 801004e:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 8010050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010052:	2b00      	cmp	r3, #0
 8010054:	d001      	beq.n	801005a <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 8010056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010058:	e154      	b.n	8010304 <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8010060:	1e5a      	subs	r2, r3, #1
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 801006e:	1c5a      	adds	r2, r3, #1
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801007a:	2b00      	cmp	r3, #0
 801007c:	f000 80a7 	beq.w	80101ce <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8010080:	69bb      	ldr	r3, [r7, #24]
 8010082:	005a      	lsls	r2, r3, #1
 8010084:	69bb      	ldr	r3, [r7, #24]
 8010086:	4413      	add	r3, r2
 8010088:	085b      	lsrs	r3, r3, #1
 801008a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010092:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801009a:	4413      	add	r3, r2
 801009c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801009e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100a0:	2200      	movs	r2, #0
 80100a2:	60bb      	str	r3, [r7, #8]
 80100a4:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80100aa:	2202      	movs	r2, #2
 80100ac:	9202      	str	r2, [sp, #8]
 80100ae:	2201      	movs	r2, #1
 80100b0:	9201      	str	r2, [sp, #4]
 80100b2:	9300      	str	r3, [sp, #0]
 80100b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80100b8:	69f8      	ldr	r0, [r7, #28]
 80100ba:	f001 fb0d 	bl	80116d8 <_fx_utility_logical_sector_read>
 80100be:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80100c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d001      	beq.n	80100ca <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 80100c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100c8:	e11c      	b.n	8010304 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80100ca:	69fb      	ldr	r3, [r7, #28]
 80100cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100d0:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 80100d2:	69fa      	ldr	r2, [r7, #28]
 80100d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80100d6:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 80100da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80100e0:	69fb      	ldr	r3, [r7, #28]
 80100e2:	689a      	ldr	r2, [r3, #8]
 80100e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e6:	4413      	add	r3, r2
 80100e8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 80100ea:	69bb      	ldr	r3, [r7, #24]
 80100ec:	f003 0301 	and.w	r3, r3, #1
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d030      	beq.n	8010156 <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 80100f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	091b      	lsrs	r3, r3, #4
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 80100fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010100:	3301      	adds	r3, #1
 8010102:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8010104:	69fb      	ldr	r3, [r7, #28]
 8010106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010108:	3b01      	subs	r3, #1
 801010a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801010c:	429a      	cmp	r2, r3
 801010e:	d11b      	bne.n	8010148 <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 8010110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010112:	3301      	adds	r3, #1
 8010114:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010118:	2200      	movs	r2, #0
 801011a:	603b      	str	r3, [r7, #0]
 801011c:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801011e:	69fb      	ldr	r3, [r7, #28]
 8010120:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010122:	2202      	movs	r2, #2
 8010124:	9202      	str	r2, [sp, #8]
 8010126:	2201      	movs	r2, #1
 8010128:	9201      	str	r2, [sp, #4]
 801012a:	9300      	str	r3, [sp, #0]
 801012c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010130:	69f8      	ldr	r0, [r7, #28]
 8010132:	f001 fad1 	bl	80116d8 <_fx_utility_logical_sector_read>
 8010136:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801013a:	2b00      	cmp	r3, #0
 801013c:	d001      	beq.n	8010142 <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 801013e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010140:	e0e0      	b.n	8010304 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	689b      	ldr	r3, [r3, #8]
 8010146:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 8010148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	011b      	lsls	r3, r3, #4
 801014e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010150:	4313      	orrs	r3, r2
 8010152:	64bb      	str	r3, [r7, #72]	; 0x48
 8010154:	e02f      	b.n	80101b6 <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 8010156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 801015c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801015e:	3301      	adds	r3, #1
 8010160:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010166:	3b01      	subs	r3, #1
 8010168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801016a:	429a      	cmp	r2, r3
 801016c:	d11b      	bne.n	80101a6 <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 801016e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010170:	3301      	adds	r3, #1
 8010172:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010176:	2200      	movs	r2, #0
 8010178:	469a      	mov	sl, r3
 801017a:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010180:	2202      	movs	r2, #2
 8010182:	9202      	str	r2, [sp, #8]
 8010184:	2201      	movs	r2, #1
 8010186:	9201      	str	r2, [sp, #4]
 8010188:	9300      	str	r3, [sp, #0]
 801018a:	4652      	mov	r2, sl
 801018c:	465b      	mov	r3, fp
 801018e:	69f8      	ldr	r0, [r7, #28]
 8010190:	f001 faa2 	bl	80116d8 <_fx_utility_logical_sector_read>
 8010194:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010198:	2b00      	cmp	r3, #0
 801019a:	d001      	beq.n	80101a0 <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 801019c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801019e:	e0b1      	b.n	8010304 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	689b      	ldr	r3, [r3, #8]
 80101a4:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 80101a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	021b      	lsls	r3, r3, #8
 80101ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80101b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80101b2:	4313      	orrs	r3, r2
 80101b4:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 80101b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101b8:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 80101bc:	d303      	bcc.n	80101c6 <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 80101be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101c0:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80101c4:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80101ca:	601a      	str	r2, [r3, #0]
 80101cc:	e078      	b.n	80102c0 <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 80101ce:	69fb      	ldr	r3, [r7, #28]
 80101d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d139      	bne.n	801024a <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 80101d6:	69bb      	ldr	r3, [r7, #24]
 80101d8:	005b      	lsls	r3, r3, #1
 80101da:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101e2:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80101ea:	4413      	add	r3, r2
 80101ec:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80101ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101f0:	2200      	movs	r2, #0
 80101f2:	4698      	mov	r8, r3
 80101f4:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80101fa:	2202      	movs	r2, #2
 80101fc:	9202      	str	r2, [sp, #8]
 80101fe:	2201      	movs	r2, #1
 8010200:	9201      	str	r2, [sp, #4]
 8010202:	9300      	str	r3, [sp, #0]
 8010204:	4642      	mov	r2, r8
 8010206:	464b      	mov	r3, r9
 8010208:	69f8      	ldr	r0, [r7, #28]
 801020a:	f001 fa65 	bl	80116d8 <_fx_utility_logical_sector_read>
 801020e:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8010210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010212:	2b00      	cmp	r3, #0
 8010214:	d001      	beq.n	801021a <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 8010216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010218:	e074      	b.n	8010304 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801021e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010220:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8010222:	69fa      	ldr	r2, [r7, #28]
 8010224:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010226:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 801022a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	689a      	ldr	r2, [r3, #8]
 8010234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010236:	4413      	add	r3, r2
 8010238:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 801023a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801023c:	f7ff fdd8 	bl	800fdf0 <_fx_utility_16_unsigned_read>
 8010240:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010246:	601a      	str	r2, [r3, #0]
 8010248:	e03a      	b.n	80102c0 <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 801024a:	69bb      	ldr	r3, [r7, #24]
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010256:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801025e:	4413      	add	r3, r2
 8010260:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 8010262:	69fb      	ldr	r3, [r7, #28]
 8010264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010268:	fbb3 f1f2 	udiv	r1, r3, r2
 801026c:	fb01 f202 	mul.w	r2, r1, r2
 8010270:	1a9b      	subs	r3, r3, r2
 8010272:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010276:	2200      	movs	r2, #0
 8010278:	461c      	mov	r4, r3
 801027a:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010280:	2202      	movs	r2, #2
 8010282:	9202      	str	r2, [sp, #8]
 8010284:	2201      	movs	r2, #1
 8010286:	9201      	str	r2, [sp, #4]
 8010288:	9300      	str	r3, [sp, #0]
 801028a:	4622      	mov	r2, r4
 801028c:	462b      	mov	r3, r5
 801028e:	69f8      	ldr	r0, [r7, #28]
 8010290:	f001 fa22 	bl	80116d8 <_fx_utility_logical_sector_read>
 8010294:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8010296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010298:	2b00      	cmp	r3, #0
 801029a:	d001      	beq.n	80102a0 <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 801029c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801029e:	e031      	b.n	8010304 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 80102a0:	69fb      	ldr	r3, [r7, #28]
 80102a2:	689a      	ldr	r2, [r3, #8]
 80102a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a6:	4413      	add	r3, r2
 80102a8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 80102aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80102ac:	f7ff fdc8 	bl	800fe40 <_fx_utility_32_unsigned_read>
 80102b0:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 80102b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80102b8:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102be:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 80102c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102c2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80102c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102c8:	4614      	mov	r4, r2
 80102ca:	3318      	adds	r3, #24
 80102cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 80102d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102d6:	f103 0218 	add.w	r2, r3, #24
 80102da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102dc:	4614      	mov	r4, r2
 80102de:	330c      	adds	r3, #12
 80102e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 80102e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102ea:	330c      	adds	r3, #12
 80102ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80102f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 80102f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f6:	69ba      	ldr	r2, [r7, #24]
 80102f8:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010300:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8010302:	2300      	movs	r3, #0
}
 8010304:	4618      	mov	r0, r3
 8010306:	3750      	adds	r7, #80	; 0x50
 8010308:	46bd      	mov	sp, r7
 801030a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801030e <_fx_utility_FAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_write(FX_MEDIA *media_ptr, ULONG cluster, ULONG next_cluster)
{
 801030e:	b590      	push	{r4, r7, lr}
 8010310:	b089      	sub	sp, #36	; 0x24
 8010312:	af00      	add	r7, sp, #0
 8010314:	60f8      	str	r0, [r7, #12]
 8010316:	60b9      	str	r1, [r7, #8]
 8010318:	607a      	str	r2, [r7, #4]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry writes and cache hits.  */
    media_ptr -> fx_media_fat_entry_writes++;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8010320:	1c5a      	adds	r2, r3, #1
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 801032e:	1c5a      	adds	r2, r3, #1
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	f003 0303 	and.w	r3, r3, #3
 801033c:	009b      	lsls	r3, r3, #2
 801033e:	61bb      	str	r3, [r7, #24]

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8010340:	69ba      	ldr	r2, [r7, #24]
 8010342:	4613      	mov	r3, r2
 8010344:	005b      	lsls	r3, r3, #1
 8010346:	4413      	add	r3, r2
 8010348:	009b      	lsls	r3, r3, #2
 801034a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801034e:	68fa      	ldr	r2, [r7, #12]
 8010350:	4413      	add	r3, r2
 8010352:	617b      	str	r3, [r7, #20]

    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 8010354:	2300      	movs	r3, #0
 8010356:	61fb      	str	r3, [r7, #28]
 8010358:	e051      	b.n	80103fe <_fx_utility_FAT_entry_write+0xf0>
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 801035a:	69fa      	ldr	r2, [r7, #28]
 801035c:	4613      	mov	r3, r2
 801035e:	005b      	lsls	r3, r3, #1
 8010360:	4413      	add	r3, r2
 8010362:	009b      	lsls	r3, r3, #2
 8010364:	461a      	mov	r2, r3
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	4413      	add	r3, r2
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	68ba      	ldr	r2, [r7, #8]
 801036e:	429a      	cmp	r2, r3
 8010370:	d142      	bne.n	80103f8 <_fx_utility_FAT_entry_write+0xea>
        {

            /* Yes, we have a matching entry.  Save the new information in the FAT
               cache and mark this entry as dirty.  */
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 8010372:	69fa      	ldr	r2, [r7, #28]
 8010374:	4613      	mov	r3, r2
 8010376:	005b      	lsls	r3, r3, #1
 8010378:	4413      	add	r3, r2
 801037a:	009b      	lsls	r3, r3, #2
 801037c:	461a      	mov	r2, r3
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	4413      	add	r3, r2
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	605a      	str	r2, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 8010386:	69fa      	ldr	r2, [r7, #28]
 8010388:	4613      	mov	r3, r2
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	4413      	add	r3, r2
 801038e:	009b      	lsls	r3, r3, #2
 8010390:	461a      	mov	r2, r3
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	4413      	add	r3, r2
 8010396:	2201      	movs	r2, #1
 8010398:	609a      	str	r2, [r3, #8]

            /* Determine if the driver has requested notification when data sectors in the media
               become free.  This can be useful to FLASH manager software.  */
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d027      	beq.n	80103f4 <_fx_utility_FAT_entry_write+0xe6>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d124      	bne.n	80103f4 <_fx_utility_FAT_entry_write+0xe6>
                   not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver release sectors requests.  */
                media_ptr -> fx_media_driver_release_sectors_requests++;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80103b0:	1c5a      	adds	r2, r3, #1
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

                /* This cluster is being released so inform the driver that the
                   corresponding sectors are now available.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2206      	movs	r2, #6
 80103bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2290      	movs	r2, #144	; 0x90
 80103c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                                 ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	3b02      	subs	r3, #2
 80103d0:	68f9      	ldr	r1, [r7, #12]
 80103d2:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80103d4:	fb01 f303 	mul.w	r3, r1, r3
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80103d8:	441a      	add	r2, r3
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the driver.  */
                (media_ptr -> fx_media_driver_entry)(media_ptr);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80103f0:	68f8      	ldr	r0, [r7, #12]
 80103f2:	4798      	blx	r3
            }

            /* Done, return successful status.  */
            return(FX_SUCCESS);
 80103f4:	2300      	movs	r3, #0
 80103f6:	e07a      	b.n	80104ee <_fx_utility_FAT_entry_write+0x1e0>
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 80103f8:	69fb      	ldr	r3, [r7, #28]
 80103fa:	3301      	adds	r3, #1
 80103fc:	61fb      	str	r3, [r7, #28]
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	2b03      	cmp	r3, #3
 8010402:	d9aa      	bls.n	801035a <_fx_utility_FAT_entry_write+0x4c>
    /* If we reach this point, we know that the FAT write request is not in
       the cache.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 801040a:	1e5a      	subs	r2, r3, #1
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8010418:	1c5a      	adds	r2, r3, #1
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	1cda      	adds	r2, r3, #3
 8010424:	68f9      	ldr	r1, [r7, #12]
 8010426:	4613      	mov	r3, r2
 8010428:	005b      	lsls	r3, r3, #1
 801042a:	4413      	add	r3, r2
 801042c:	009b      	lsls	r3, r3, #2
 801042e:	440b      	add	r3, r1
 8010430:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	2b01      	cmp	r3, #1
 8010438:	d108      	bne.n	801044c <_fx_utility_FAT_entry_write+0x13e>
    {

        /* Flush the dirty entry so it can be used to hold the current
           FAT entry write request.  */
        status = _fx_utility_FAT_flush(media_ptr);
 801043a:	68f8      	ldr	r0, [r7, #12]
 801043c:	f000 f85b 	bl	80104f6 <_fx_utility_FAT_flush>
 8010440:	6138      	str	r0, [r7, #16]

        /* Determine if the write was successful.  */
        if (status != FX_SUCCESS)
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d001      	beq.n	801044c <_fx_utility_FAT_entry_write+0x13e>
        {

            /* No, return error status to caller.  */
            return(status);
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	e050      	b.n	80104ee <_fx_utility_FAT_entry_write+0x1e0>
        }

    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	4614      	mov	r4, r2
 8010456:	3318      	adds	r3, #24
 8010458:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801045c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	f103 0218 	add.w	r2, r3, #24
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	4614      	mov	r4, r2
 801046a:	330c      	adds	r3, #12
 801046c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010470:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	330c      	adds	r3, #12
 8010478:	697a      	ldr	r2, [r7, #20]
 801047a:	ca07      	ldmia	r2, {r0, r1, r2}
 801047c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	2201      	movs	r2, #1
 8010484:	609a      	str	r2, [r3, #8]
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	68ba      	ldr	r2, [r7, #8]
 801048a:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	605a      	str	r2, [r3, #4]

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010498:	2b00      	cmp	r3, #0
 801049a:	d027      	beq.n	80104ec <_fx_utility_FAT_entry_write+0x1de>
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d124      	bne.n	80104ec <_fx_utility_FAT_entry_write+0x1de>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80104a8:	1c5a      	adds	r2, r3, #1
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2206      	movs	r2, #6
 80104b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2290      	movs	r2, #144	; 0x90
 80104bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	3b02      	subs	r3, #2
 80104c8:	68f9      	ldr	r1, [r7, #12]
 80104ca:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80104cc:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80104d0:	441a      	add	r2, r3
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80104e8:	68f8      	ldr	r0, [r7, #12]
 80104ea:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3724      	adds	r7, #36	; 0x24
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd90      	pop	{r4, r7, pc}

080104f6 <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 80104f6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80104fa:	b09a      	sub	sp, #104	; 0x68
 80104fc:	af04      	add	r7, sp, #16
 80104fe:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8010506:	1c5a      	adds	r2, r3, #1
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 801050e:	2300      	movs	r3, #0
 8010510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010512:	e337      	b.n	8010b84 <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 8010514:	69f9      	ldr	r1, [r7, #28]
 8010516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010518:	4613      	mov	r3, r2
 801051a:	005b      	lsls	r3, r3, #1
 801051c:	4413      	add	r3, r2
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	440b      	add	r3, r1
 8010522:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	f000 8325 	beq.w	8010b78 <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 801052e:	69f9      	ldr	r1, [r7, #28]
 8010530:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010532:	4613      	mov	r3, r2
 8010534:	005b      	lsls	r3, r3, #1
 8010536:	4413      	add	r3, r2
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	440b      	add	r3, r1
 801053c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010548:	2b00      	cmp	r3, #0
 801054a:	f000 816c 	beq.w	8010826 <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 801054e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010550:	005a      	lsls	r2, r3, #1
 8010552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010554:	4413      	add	r3, r2
 8010556:	085b      	lsrs	r3, r3, #1
 8010558:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801055a:	69fb      	ldr	r3, [r7, #28]
 801055c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801055e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010560:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010568:	4413      	add	r3, r2
 801056a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 801056c:	f04f 33ff 	mov.w	r3, #4294967295
 8010570:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010574:	2200      	movs	r2, #0
 8010576:	461c      	mov	r4, r3
 8010578:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801057a:	69fb      	ldr	r3, [r7, #28]
 801057c:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801057e:	2302      	movs	r3, #2
 8010580:	9302      	str	r3, [sp, #8]
 8010582:	2301      	movs	r3, #1
 8010584:	9301      	str	r3, [sp, #4]
 8010586:	9200      	str	r2, [sp, #0]
 8010588:	4622      	mov	r2, r4
 801058a:	462b      	mov	r3, r5
 801058c:	69f8      	ldr	r0, [r7, #28]
 801058e:	f001 f8a3 	bl	80116d8 <_fx_utility_logical_sector_read>
 8010592:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010596:	2b00      	cmp	r3, #0
 8010598:	d001      	beq.n	801059e <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 801059a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059c:	e2f7      	b.n	8010b8e <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 801059e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105a4:	d037      	beq.n	8010616 <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80105a6:	69fb      	ldr	r3, [r7, #28]
 80105a8:	689b      	ldr	r3, [r3, #8]
 80105aa:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 80105ac:	69f9      	ldr	r1, [r7, #28]
 80105ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105b0:	4613      	mov	r3, r2
 80105b2:	005b      	lsls	r3, r3, #1
 80105b4:	4413      	add	r3, r2
 80105b6:	009b      	lsls	r3, r3, #2
 80105b8:	440b      	add	r3, r1
 80105ba:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 80105c2:	69f9      	ldr	r1, [r7, #28]
 80105c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105c6:	4613      	mov	r3, r2
 80105c8:	005b      	lsls	r3, r3, #1
 80105ca:	4413      	add	r3, r2
 80105cc:	009b      	lsls	r3, r3, #2
 80105ce:	440b      	add	r3, r1
 80105d0:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 80105d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105da:	f003 0301 	and.w	r3, r3, #1
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d005      	beq.n	80105ee <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 80105e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e4:	091b      	lsrs	r3, r3, #4
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105ea:	7013      	strb	r3, [r2, #0]
 80105ec:	e010      	b.n	8010610 <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 80105ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105f6:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 80105f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fa:	b2da      	uxtb	r2, r3
 80105fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fe:	0a1b      	lsrs	r3, r3, #8
 8010600:	b2db      	uxtb	r3, r3
 8010602:	f003 030f 	and.w	r3, r3, #15
 8010606:	b2db      	uxtb	r3, r3
 8010608:	4313      	orrs	r3, r2
 801060a:	b2db      	uxtb	r3, r3
 801060c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801060e:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 8010610:	f04f 33ff 	mov.w	r3, #4294967295
 8010614:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010618:	653b      	str	r3, [r7, #80]	; 0x50
 801061a:	e0a0      	b.n	801075e <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 801061c:	69f9      	ldr	r1, [r7, #28]
 801061e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010620:	4613      	mov	r3, r2
 8010622:	005b      	lsls	r3, r3, #1
 8010624:	4413      	add	r3, r2
 8010626:	009b      	lsls	r3, r3, #2
 8010628:	440b      	add	r3, r1
 801062a:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	f000 808a 	beq.w	801074a <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8010636:	69f9      	ldr	r1, [r7, #28]
 8010638:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801063a:	4613      	mov	r3, r2
 801063c:	005b      	lsls	r3, r3, #1
 801063e:	4413      	add	r3, r2
 8010640:	009b      	lsls	r3, r3, #2
 8010642:	440b      	add	r3, r1
 8010644:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 801064c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801064e:	005a      	lsls	r2, r3, #1
 8010650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010652:	4413      	add	r3, r2
 8010654:	085b      	lsrs	r3, r3, #1
 8010656:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010658:	69fb      	ldr	r3, [r7, #28]
 801065a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801065c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801065e:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010662:	69fb      	ldr	r3, [r7, #28]
 8010664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010666:	4413      	add	r3, r2
 8010668:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 801066a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801066c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801066e:	429a      	cmp	r2, r3
 8010670:	d16d      	bne.n	801074e <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8010672:	69f9      	ldr	r1, [r7, #28]
 8010674:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010676:	4613      	mov	r3, r2
 8010678:	005b      	lsls	r3, r3, #1
 801067a:	4413      	add	r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	440b      	add	r3, r1
 8010680:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010688:	69fb      	ldr	r3, [r7, #28]
 801068a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801068c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801068e:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 8010690:	69fb      	ldr	r3, [r7, #28]
 8010692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010694:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 8010698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801069a:	1ad3      	subs	r3, r2, r3
 801069c:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 801069e:	69fb      	ldr	r3, [r7, #28]
 80106a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106a2:	3b01      	subs	r3, #1
 80106a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d101      	bne.n	80106ae <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 80106aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106ac:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80106ae:	69fb      	ldr	r3, [r7, #28]
 80106b0:	689a      	ldr	r2, [r3, #8]
 80106b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106b4:	4413      	add	r3, r2
 80106b6:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 80106b8:	69f9      	ldr	r1, [r7, #28]
 80106ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80106bc:	4613      	mov	r3, r2
 80106be:	005b      	lsls	r3, r3, #1
 80106c0:	4413      	add	r3, r2
 80106c2:	009b      	lsls	r3, r3, #2
 80106c4:	440b      	add	r3, r1
 80106c6:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80106ca:	2200      	movs	r2, #0
 80106cc:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 80106ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106d0:	f003 0301 	and.w	r3, r3, #1
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d01b      	beq.n	8010710 <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 80106d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	f003 030f 	and.w	r3, r3, #15
 80106e0:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 80106e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e4:	b2da      	uxtb	r2, r3
 80106e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e8:	b2db      	uxtb	r3, r3
 80106ea:	011b      	lsls	r3, r3, #4
 80106ec:	b2db      	uxtb	r3, r3
 80106ee:	4313      	orrs	r3, r2
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106f4:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 80106f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d029      	beq.n	8010752 <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 80106fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010700:	3301      	adds	r3, #1
 8010702:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8010704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010706:	091b      	lsrs	r3, r3, #4
 8010708:	b2db      	uxtb	r3, r3
 801070a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801070c:	7013      	strb	r3, [r2, #0]
 801070e:	e023      	b.n	8010758 <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8010710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010712:	b2db      	uxtb	r3, r3
 8010714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010716:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 8010718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801071a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801071c:	429a      	cmp	r2, r3
 801071e:	d01a      	beq.n	8010756 <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 8010720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010722:	3301      	adds	r3, #1
 8010724:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 8010726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801072e:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8010730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010732:	b2da      	uxtb	r2, r3
 8010734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010736:	0a1b      	lsrs	r3, r3, #8
 8010738:	b2db      	uxtb	r3, r3
 801073a:	f003 030f 	and.w	r3, r3, #15
 801073e:	b2db      	uxtb	r3, r3
 8010740:	4313      	orrs	r3, r2
 8010742:	b2db      	uxtb	r3, r3
 8010744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010746:	7013      	strb	r3, [r2, #0]
 8010748:	e006      	b.n	8010758 <_fx_utility_FAT_flush+0x262>
                        continue;
 801074a:	bf00      	nop
 801074c:	e004      	b.n	8010758 <_fx_utility_FAT_flush+0x262>
                        continue;
 801074e:	bf00      	nop
 8010750:	e002      	b.n	8010758 <_fx_utility_FAT_flush+0x262>
                            continue;
 8010752:	bf00      	nop
 8010754:	e000      	b.n	8010758 <_fx_utility_FAT_flush+0x262>
                            continue;
 8010756:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801075a:	3301      	adds	r3, #1
 801075c:	653b      	str	r3, [r7, #80]	; 0x50
 801075e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010760:	2b0f      	cmp	r3, #15
 8010762:	f67f af5b 	bls.w	801061c <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010768:	2200      	movs	r2, #0
 801076a:	4698      	mov	r8, r3
 801076c:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010772:	2302      	movs	r3, #2
 8010774:	9302      	str	r3, [sp, #8]
 8010776:	2301      	movs	r3, #1
 8010778:	9301      	str	r3, [sp, #4]
 801077a:	9200      	str	r2, [sp, #0]
 801077c:	4642      	mov	r2, r8
 801077e:	464b      	mov	r3, r9
 8010780:	69f8      	ldr	r0, [r7, #28]
 8010782:	f001 fa3d 	bl	8011c00 <_fx_utility_logical_sector_write>
 8010786:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801078a:	2b00      	cmp	r3, #0
 801078c:	d001      	beq.n	8010792 <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 801078e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010790:	e1fd      	b.n	8010b8e <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010792:	69fb      	ldr	r3, [r7, #28]
 8010794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801079a:	2b00      	cmp	r3, #0
 801079c:	d105      	bne.n	80107aa <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107a2:	0a9b      	lsrs	r3, r3, #10
 80107a4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80107a8:	e006      	b.n	80107b8 <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 80107aa:	69fb      	ldr	r3, [r7, #28]
 80107ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107ae:	0a9b      	lsrs	r3, r3, #10
 80107b0:	b2db      	uxtb	r3, r3
 80107b2:	3301      	adds	r3, #1
 80107b4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 80107b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d101      	bne.n	80107c4 <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 80107c0:	2302      	movs	r3, #2
 80107c2:	e1e4      	b.n	8010b8e <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80107ca:	1ad2      	subs	r2, r2, r3
 80107cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80107d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80107d4:	08db      	lsrs	r3, r3, #3
 80107d6:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 80107d8:	69fa      	ldr	r2, [r7, #28]
 80107da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107dc:	4413      	add	r3, r2
 80107de:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 80107e6:	69fb      	ldr	r3, [r7, #28]
 80107e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80107ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107ec:	1a9a      	subs	r2, r3, r2
 80107ee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80107f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80107f6:	f003 0207 	and.w	r2, r3, #7
 80107fa:	2301      	movs	r3, #1
 80107fc:	4093      	lsls	r3, r2
 80107fe:	b25b      	sxtb	r3, r3
 8010800:	430b      	orrs	r3, r1
 8010802:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010804:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8010806:	69fa      	ldr	r2, [r7, #28]
 8010808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801080a:	4413      	add	r3, r2
 801080c:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8010810:	460b      	mov	r3, r1
 8010812:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 8010814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010816:	f1b3 3fff 	cmp.w	r3, #4294967295
 801081a:	f000 81af 	beq.w	8010b7c <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 801081e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010820:	3301      	adds	r3, #1
 8010822:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010824:	e6a5      	b.n	8010572 <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801082a:	2b00      	cmp	r3, #0
 801082c:	f040 80d2 	bne.w	80109d4 <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 8010830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010832:	005b      	lsls	r3, r3, #1
 8010834:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801083a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801083c:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010840:	69fb      	ldr	r3, [r7, #28]
 8010842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010844:	4413      	add	r3, r2
 8010846:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801084a:	2200      	movs	r2, #0
 801084c:	469a      	mov	sl, r3
 801084e:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010850:	69fb      	ldr	r3, [r7, #28]
 8010852:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010854:	2302      	movs	r3, #2
 8010856:	9302      	str	r3, [sp, #8]
 8010858:	2301      	movs	r3, #1
 801085a:	9301      	str	r3, [sp, #4]
 801085c:	9200      	str	r2, [sp, #0]
 801085e:	4652      	mov	r2, sl
 8010860:	465b      	mov	r3, fp
 8010862:	69f8      	ldr	r0, [r7, #28]
 8010864:	f000 ff38 	bl	80116d8 <_fx_utility_logical_sector_read>
 8010868:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801086a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086c:	2b00      	cmp	r3, #0
 801086e:	d001      	beq.n	8010874 <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 8010870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010872:	e18c      	b.n	8010b8e <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010876:	653b      	str	r3, [r7, #80]	; 0x50
 8010878:	e057      	b.n	801092a <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 801087a:	69f9      	ldr	r1, [r7, #28]
 801087c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801087e:	4613      	mov	r3, r2
 8010880:	005b      	lsls	r3, r3, #1
 8010882:	4413      	add	r3, r2
 8010884:	009b      	lsls	r3, r3, #2
 8010886:	440b      	add	r3, r1
 8010888:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d045      	beq.n	801091e <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8010892:	69f9      	ldr	r1, [r7, #28]
 8010894:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010896:	4613      	mov	r3, r2
 8010898:	005b      	lsls	r3, r3, #1
 801089a:	4413      	add	r3, r2
 801089c:	009b      	lsls	r3, r3, #2
 801089e:	440b      	add	r3, r1
 80108a0:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 80108a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108aa:	005b      	lsls	r3, r3, #1
 80108ac:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108b4:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80108bc:	4413      	add	r3, r2
 80108be:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 80108c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d12c      	bne.n	8010922 <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80108ce:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 80108d0:	69fb      	ldr	r3, [r7, #28]
 80108d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80108d4:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 80108d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108da:	1ad3      	subs	r3, r2, r3
 80108dc:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	689a      	ldr	r2, [r3, #8]
 80108e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108e4:	4413      	add	r3, r2
 80108e6:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 80108e8:	69f9      	ldr	r1, [r7, #28]
 80108ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108ec:	4613      	mov	r3, r2
 80108ee:	005b      	lsls	r3, r3, #1
 80108f0:	4413      	add	r3, r2
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	440b      	add	r3, r1
 80108f6:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 80108fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010902:	f7ff fa88 	bl	800fe16 <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8010906:	69f9      	ldr	r1, [r7, #28]
 8010908:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801090a:	4613      	mov	r3, r2
 801090c:	005b      	lsls	r3, r3, #1
 801090e:	4413      	add	r3, r2
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	440b      	add	r3, r1
 8010914:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010918:	2200      	movs	r2, #0
 801091a:	601a      	str	r2, [r3, #0]
 801091c:	e002      	b.n	8010924 <_fx_utility_FAT_flush+0x42e>
                    continue;
 801091e:	bf00      	nop
 8010920:	e000      	b.n	8010924 <_fx_utility_FAT_flush+0x42e>
                    continue;
 8010922:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010926:	3301      	adds	r3, #1
 8010928:	653b      	str	r3, [r7, #80]	; 0x50
 801092a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801092c:	2b0f      	cmp	r3, #15
 801092e:	d9a4      	bls.n	801087a <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010932:	2200      	movs	r2, #0
 8010934:	613b      	str	r3, [r7, #16]
 8010936:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801093c:	2302      	movs	r3, #2
 801093e:	9302      	str	r3, [sp, #8]
 8010940:	2301      	movs	r3, #1
 8010942:	9301      	str	r3, [sp, #4]
 8010944:	9200      	str	r2, [sp, #0]
 8010946:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801094a:	69f8      	ldr	r0, [r7, #28]
 801094c:	f001 f958 	bl	8011c00 <_fx_utility_logical_sector_write>
 8010950:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010954:	2b00      	cmp	r3, #0
 8010956:	d001      	beq.n	801095c <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 8010958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801095a:	e118      	b.n	8010b8e <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010964:	2b00      	cmp	r3, #0
 8010966:	d105      	bne.n	8010974 <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801096c:	0a9b      	lsrs	r3, r3, #10
 801096e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010972:	e006      	b.n	8010982 <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010978:	0a9b      	lsrs	r3, r3, #10
 801097a:	b2db      	uxtb	r3, r3
 801097c:	3301      	adds	r3, #1
 801097e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8010982:	69fb      	ldr	r3, [r7, #28]
 8010984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010986:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010988:	1ad2      	subs	r2, r2, r3
 801098a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010992:	08db      	lsrs	r3, r3, #3
 8010994:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010996:	69fa      	ldr	r2, [r7, #28]
 8010998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801099a:	4413      	add	r3, r2
 801099c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109aa:	1a9a      	subs	r2, r3, r2
 80109ac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80109b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80109b4:	f003 0207 	and.w	r2, r3, #7
 80109b8:	2301      	movs	r3, #1
 80109ba:	4093      	lsls	r3, r2
 80109bc:	b25b      	sxtb	r3, r3
 80109be:	430b      	orrs	r3, r1
 80109c0:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 80109c2:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 80109c4:	69fa      	ldr	r2, [r7, #28]
 80109c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109c8:	4413      	add	r3, r2
 80109ca:	f603 0218 	addw	r2, r3, #2072	; 0x818
 80109ce:	460b      	mov	r3, r1
 80109d0:	7013      	strb	r3, [r2, #0]
 80109d2:	e0d4      	b.n	8010b7e <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 80109d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109d6:	009b      	lsls	r3, r3, #2
 80109d8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80109da:	69fb      	ldr	r3, [r7, #28]
 80109dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80109e0:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 80109e4:	69fb      	ldr	r3, [r7, #28]
 80109e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80109e8:	4413      	add	r3, r2
 80109ea:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80109ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109ee:	2200      	movs	r2, #0
 80109f0:	60bb      	str	r3, [r7, #8]
 80109f2:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80109f8:	2302      	movs	r3, #2
 80109fa:	9302      	str	r3, [sp, #8]
 80109fc:	2301      	movs	r3, #1
 80109fe:	9301      	str	r3, [sp, #4]
 8010a00:	9200      	str	r2, [sp, #0]
 8010a02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010a06:	69f8      	ldr	r0, [r7, #28]
 8010a08:	f000 fe66 	bl	80116d8 <_fx_utility_logical_sector_read>
 8010a0c:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d001      	beq.n	8010a18 <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 8010a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a16:	e0ba      	b.n	8010b8e <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a1a:	653b      	str	r3, [r7, #80]	; 0x50
 8010a1c:	e057      	b.n	8010ace <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8010a1e:	69f9      	ldr	r1, [r7, #28]
 8010a20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010a22:	4613      	mov	r3, r2
 8010a24:	005b      	lsls	r3, r3, #1
 8010a26:	4413      	add	r3, r2
 8010a28:	009b      	lsls	r3, r3, #2
 8010a2a:	440b      	add	r3, r1
 8010a2c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d045      	beq.n	8010ac2 <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8010a36:	69f9      	ldr	r1, [r7, #28]
 8010a38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	005b      	lsls	r3, r3, #1
 8010a3e:	4413      	add	r3, r2
 8010a40:	009b      	lsls	r3, r3, #2
 8010a42:	440b      	add	r3, r1
 8010a44:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 8010a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a4e:	009b      	lsls	r3, r3, #2
 8010a50:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a58:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010a60:	4413      	add	r3, r2
 8010a62:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8010a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d12c      	bne.n	8010ac6 <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010a6c:	69fb      	ldr	r3, [r7, #28]
 8010a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a72:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8010a74:	69fb      	ldr	r3, [r7, #28]
 8010a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010a78:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 8010a7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a7e:	1ad3      	subs	r3, r2, r3
 8010a80:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	689a      	ldr	r2, [r3, #8]
 8010a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a88:	4413      	add	r3, r2
 8010a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8010a8c:	69f9      	ldr	r1, [r7, #28]
 8010a8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010a90:	4613      	mov	r3, r2
 8010a92:	005b      	lsls	r3, r3, #1
 8010a94:	4413      	add	r3, r2
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	440b      	add	r3, r1
 8010a9a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8010aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010aa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010aa6:	f7ff f9e8 	bl	800fe7a <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8010aaa:	69f9      	ldr	r1, [r7, #28]
 8010aac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010aae:	4613      	mov	r3, r2
 8010ab0:	005b      	lsls	r3, r3, #1
 8010ab2:	4413      	add	r3, r2
 8010ab4:	009b      	lsls	r3, r3, #2
 8010ab6:	440b      	add	r3, r1
 8010ab8:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010abc:	2200      	movs	r2, #0
 8010abe:	601a      	str	r2, [r3, #0]
 8010ac0:	e002      	b.n	8010ac8 <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8010ac2:	bf00      	nop
 8010ac4:	e000      	b.n	8010ac8 <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8010ac6:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aca:	3301      	adds	r3, #1
 8010acc:	653b      	str	r3, [r7, #80]	; 0x50
 8010ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ad0:	2b0f      	cmp	r3, #15
 8010ad2:	d9a4      	bls.n	8010a1e <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	603b      	str	r3, [r7, #0]
 8010ada:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010ae0:	2302      	movs	r3, #2
 8010ae2:	9302      	str	r3, [sp, #8]
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	9301      	str	r3, [sp, #4]
 8010ae8:	9200      	str	r2, [sp, #0]
 8010aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010aee:	69f8      	ldr	r0, [r7, #28]
 8010af0:	f001 f886 	bl	8011c00 <_fx_utility_logical_sector_write>
 8010af4:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d001      	beq.n	8010b00 <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 8010afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afe:	e046      	b.n	8010b8e <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d105      	bne.n	8010b18 <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010b0c:	69fb      	ldr	r3, [r7, #28]
 8010b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b10:	0a9b      	lsrs	r3, r3, #10
 8010b12:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010b16:	e006      	b.n	8010b26 <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8010b18:	69fb      	ldr	r3, [r7, #28]
 8010b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b1c:	0a9b      	lsrs	r3, r3, #10
 8010b1e:	b2db      	uxtb	r3, r3
 8010b20:	3301      	adds	r3, #1
 8010b22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b2c:	1ad2      	subs	r2, r2, r3
 8010b2e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b36:	08db      	lsrs	r3, r3, #3
 8010b38:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010b3a:	69fa      	ldr	r2, [r7, #28]
 8010b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b3e:	4413      	add	r3, r2
 8010b40:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010b44:	781b      	ldrb	r3, [r3, #0]
 8010b46:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8010b48:	69fb      	ldr	r3, [r7, #28]
 8010b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b4e:	1a9a      	subs	r2, r3, r2
 8010b50:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b58:	f003 0207 	and.w	r2, r3, #7
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	4093      	lsls	r3, r2
 8010b60:	b25b      	sxtb	r3, r3
 8010b62:	430b      	orrs	r3, r1
 8010b64:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010b66:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8010b68:	69fa      	ldr	r2, [r7, #28]
 8010b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b6c:	4413      	add	r3, r2
 8010b6e:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8010b72:	460b      	mov	r3, r1
 8010b74:	7013      	strb	r3, [r2, #0]
 8010b76:	e002      	b.n	8010b7e <_fx_utility_FAT_flush+0x688>
            continue;
 8010b78:	bf00      	nop
 8010b7a:	e000      	b.n	8010b7e <_fx_utility_FAT_flush+0x688>
                    break;
 8010b7c:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8010b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b80:	3301      	adds	r3, #1
 8010b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b86:	2b0f      	cmp	r3, #15
 8010b88:	f67f acc4 	bls.w	8010514 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 8010b8c:	2300      	movs	r3, #0
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3758      	adds	r7, #88	; 0x58
 8010b92:	46bd      	mov	sp, r7
 8010b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010b98 <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 8010b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b9c:	b092      	sub	sp, #72	; 0x48
 8010b9e:	af04      	add	r7, sp, #16
 8010ba0:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d105      	bne.n	8010bba <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010bae:	69fb      	ldr	r3, [r7, #28]
 8010bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bb2:	0a9b      	lsrs	r3, r3, #10
 8010bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010bb8:	e006      	b.n	8010bc8 <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8010bba:	69fb      	ldr	r3, [r7, #28]
 8010bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bbe:	0a9b      	lsrs	r3, r3, #10
 8010bc0:	b2db      	uxtb	r3, r3
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8010bc8:	2300      	movs	r3, #0
 8010bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010bcc:	e089      	b.n	8010ce2 <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 8010bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd0:	08db      	lsrs	r3, r3, #3
 8010bd2:	69fa      	ldr	r2, [r7, #28]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 8010bda:	461a      	mov	r2, r3
 8010bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bde:	f003 0307 	and.w	r3, r3, #7
 8010be2:	fa42 f303 	asr.w	r3, r2, r3
 8010be6:	f003 0301 	and.w	r3, r3, #1
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d075      	beq.n	8010cda <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 8010bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bf4:	fb03 f202 	mul.w	r2, r3, r2
 8010bf8:	69fb      	ldr	r3, [r7, #28]
 8010bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bfc:	4413      	add	r3, r2
 8010bfe:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 8010c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c06:	4413      	add	r3, r2
 8010c08:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 8010c0a:	69fb      	ldr	r3, [r7, #28]
 8010c0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c12:	4413      	add	r3, r2
 8010c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d95a      	bls.n	8010cd0 <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010c1e:	69fb      	ldr	r3, [r7, #28]
 8010c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c22:	4413      	add	r3, r2
 8010c24:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 8010c26:	e053      	b.n	8010cd0 <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	613b      	str	r3, [r7, #16]
 8010c2e:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010c34:	2302      	movs	r3, #2
 8010c36:	9302      	str	r3, [sp, #8]
 8010c38:	2301      	movs	r3, #1
 8010c3a:	9301      	str	r3, [sp, #4]
 8010c3c:	9200      	str	r2, [sp, #0]
 8010c3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010c42:	69f8      	ldr	r0, [r7, #28]
 8010c44:	f000 fd48 	bl	80116d8 <_fx_utility_logical_sector_read>
 8010c48:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010c4a:	6a3b      	ldr	r3, [r7, #32]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d001      	beq.n	8010c54 <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 8010c50:	6a3b      	ldr	r3, [r7, #32]
 8010c52:	e05c      	b.n	8010d0e <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 8010c54:	69fb      	ldr	r3, [r7, #28]
 8010c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c58:	3b01      	subs	r3, #1
 8010c5a:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 8010c5c:	e032      	b.n	8010cc4 <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 8010c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c60:	2200      	movs	r2, #0
 8010c62:	60bb      	str	r3, [r7, #8]
 8010c64:	60fa      	str	r2, [r7, #12]
 8010c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c68:	2200      	movs	r2, #0
 8010c6a:	4698      	mov	r8, r3
 8010c6c:	4691      	mov	r9, r2
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c72:	2200      	movs	r2, #0
 8010c74:	469a      	mov	sl, r3
 8010c76:	4693      	mov	fp, r2
 8010c78:	fb0a f209 	mul.w	r2, sl, r9
 8010c7c:	fb08 f30b 	mul.w	r3, r8, fp
 8010c80:	4413      	add	r3, r2
 8010c82:	fba8 450a 	umull	r4, r5, r8, sl
 8010c86:	442b      	add	r3, r5
 8010c88:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 8010c8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010c8e:	460b      	mov	r3, r1
 8010c90:	191b      	adds	r3, r3, r4
 8010c92:	603b      	str	r3, [r7, #0]
 8010c94:	4613      	mov	r3, r2
 8010c96:	416b      	adcs	r3, r5
 8010c98:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010c9a:	69fb      	ldr	r3, [r7, #28]
 8010c9c:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 8010c9e:	2302      	movs	r3, #2
 8010ca0:	9302      	str	r3, [sp, #8]
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	9301      	str	r3, [sp, #4]
 8010ca6:	9200      	str	r2, [sp, #0]
 8010ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cac:	69f8      	ldr	r0, [r7, #28]
 8010cae:	f000 ffa7 	bl	8011c00 <_fx_utility_logical_sector_write>
 8010cb2:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010cb4:	6a3b      	ldr	r3, [r7, #32]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d001      	beq.n	8010cbe <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 8010cba:	6a3b      	ldr	r3, [r7, #32]
 8010cbc:	e027      	b.n	8010d0e <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 8010cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc0:	3b01      	subs	r3, #1
 8010cc2:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 8010cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d1c9      	bne.n	8010c5e <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 8010cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ccc:	3301      	adds	r3, #1
 8010cce:	637b      	str	r3, [r7, #52]	; 0x34
 8010cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d3a7      	bcc.n	8010c28 <_fx_utility_FAT_map_flush+0x90>
 8010cd8:	e000      	b.n	8010cdc <_fx_utility_FAT_map_flush+0x144>
            continue;
 8010cda:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8010cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cde:	3301      	adds	r3, #1
 8010ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ce8:	f4ff af71 	bcc.w	8010bce <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8010cec:	2300      	movs	r3, #0
 8010cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cf0:	e009      	b.n	8010d06 <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 8010cf2:	69fa      	ldr	r2, [r7, #28]
 8010cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf6:	4413      	add	r3, r2
 8010cf8:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8010d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d02:	3301      	adds	r3, #1
 8010d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d08:	2b7f      	cmp	r3, #127	; 0x7f
 8010d0a:	d9f2      	bls.n	8010cf2 <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 8010d0c:	2300      	movs	r3, #0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3738      	adds	r7, #56	; 0x38
 8010d12:	46bd      	mov	sp, r7
 8010d14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010d18 <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b08f      	sub	sp, #60	; 0x3c
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	60f8      	str	r0, [r7, #12]
 8010d20:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	691b      	ldr	r3, [r3, #16]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f000 8275 	beq.w	8011218 <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8010d2e:	683a      	ldr	r2, [r7, #0]
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010d36:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8010d3a:	4013      	ands	r3, r2
 8010d3c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	6a1a      	ldr	r2, [r3, #32]
 8010d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d44:	f003 031f 	and.w	r3, r3, #31
 8010d48:	2101      	movs	r1, #1
 8010d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8010d4e:	431a      	orrs	r2, r3
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 8010d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d56:	009b      	lsls	r3, r3, #2
 8010d58:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8010d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d5c:	4613      	mov	r3, r2
 8010d5e:	005b      	lsls	r3, r3, #1
 8010d60:	4413      	add	r3, r2
 8010d62:	00db      	lsls	r3, r3, #3
 8010d64:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8010d68:	68fa      	ldr	r2, [r7, #12]
 8010d6a:	4413      	add	r3, r2
 8010d6c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8010d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d70:	7c5b      	ldrb	r3, [r3, #17]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d015      	beq.n	8010da2 <_fx_utility_logical_sector_cache_entry_read+0x8a>
 8010d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010d7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d80:	4299      	cmp	r1, r3
 8010d82:	bf08      	it	eq
 8010d84:	4290      	cmpeq	r0, r2
 8010d86:	d10c      	bne.n	8010da2 <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8010d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d8a:	681a      	ldr	r2, [r3, #0]
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010d96:	1c5a      	adds	r2, r3, #1
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8010d9e:	2300      	movs	r3, #0
 8010da0:	e27e      	b.n	80112a0 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 8010da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010da4:	3318      	adds	r3, #24
 8010da6:	7c5b      	ldrb	r3, [r3, #17]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d060      	beq.n	8010e6e <_fx_utility_logical_sector_cache_entry_read+0x156>
 8010dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dae:	3318      	adds	r3, #24
 8010db0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010db4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010db8:	4299      	cmp	r1, r3
 8010dba:	bf08      	it	eq
 8010dbc:	4290      	cmpeq	r0, r2
 8010dbe:	d156      	bne.n	8010e6e <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8010dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dc2:	3318      	adds	r3, #24
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010dd0:	1c5a      	adds	r2, r3, #1
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8010dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8010dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010de0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010de4:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8010de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dea:	7c1b      	ldrb	r3, [r3, #16]
 8010dec:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8010df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010df2:	7c5b      	ldrb	r3, [r3, #17]
 8010df4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8010df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dfa:	7c9b      	ldrb	r3, [r3, #18]
 8010dfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8010e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e02:	3318      	adds	r3, #24
 8010e04:	681a      	ldr	r2, [r3, #0]
 8010e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e08:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 8010e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e0c:	3318      	adds	r3, #24
 8010e0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010e12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010e14:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8010e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e1a:	3318      	adds	r3, #24
 8010e1c:	7c1a      	ldrb	r2, [r3, #16]
 8010e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e20:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 8010e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e24:	3318      	adds	r3, #24
 8010e26:	7c5a      	ldrb	r2, [r3, #17]
 8010e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e2a:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 8010e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e2e:	3318      	adds	r3, #24
 8010e30:	7c9a      	ldrb	r2, [r3, #18]
 8010e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e34:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8010e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e38:	3318      	adds	r3, #24
 8010e3a:	693a      	ldr	r2, [r7, #16]
 8010e3c:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8010e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e40:	f103 0118 	add.w	r1, r3, #24
 8010e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010e48:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8010e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e4e:	3318      	adds	r3, #24
 8010e50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010e54:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8010e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e58:	3318      	adds	r3, #24
 8010e5a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8010e5e:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8010e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e62:	3318      	adds	r3, #24
 8010e64:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010e68:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	e218      	b.n	80112a0 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 8010e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e70:	3330      	adds	r3, #48	; 0x30
 8010e72:	7c5b      	ldrb	r3, [r3, #17]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	f000 8086 	beq.w	8010f86 <_fx_utility_logical_sector_cache_entry_read+0x26e>
 8010e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e7c:	3330      	adds	r3, #48	; 0x30
 8010e7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010e82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e86:	4299      	cmp	r1, r3
 8010e88:	bf08      	it	eq
 8010e8a:	4290      	cmpeq	r0, r2
 8010e8c:	d17b      	bne.n	8010f86 <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8010e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e90:	3330      	adds	r3, #48	; 0x30
 8010e92:	681a      	ldr	r2, [r3, #0]
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010e9e:	1c5a      	adds	r2, r3, #1
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8010ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8010eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010eb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8010eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eb8:	7c1b      	ldrb	r3, [r3, #16]
 8010eba:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8010ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ec0:	7c5b      	ldrb	r3, [r3, #17]
 8010ec2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8010ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ec8:	7c9b      	ldrb	r3, [r3, #18]
 8010eca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8010ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ed0:	3330      	adds	r3, #48	; 0x30
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ed6:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 8010ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eda:	3330      	adds	r3, #48	; 0x30
 8010edc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010ee0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010ee2:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8010ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ee8:	3330      	adds	r3, #48	; 0x30
 8010eea:	7c1a      	ldrb	r2, [r3, #16]
 8010eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eee:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 8010ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ef2:	3330      	adds	r3, #48	; 0x30
 8010ef4:	7c5a      	ldrb	r2, [r3, #17]
 8010ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ef8:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 8010efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010efc:	3330      	adds	r3, #48	; 0x30
 8010efe:	7c9a      	ldrb	r2, [r3, #18]
 8010f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f02:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8010f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f06:	f103 0218 	add.w	r2, r3, #24
 8010f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f0c:	3330      	adds	r3, #48	; 0x30
 8010f0e:	6812      	ldr	r2, [r2, #0]
 8010f10:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8010f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f14:	3318      	adds	r3, #24
 8010f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f18:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8010f1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010f20:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8010f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f26:	f103 0218 	add.w	r2, r3, #24
 8010f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f2c:	3330      	adds	r3, #48	; 0x30
 8010f2e:	7c12      	ldrb	r2, [r2, #16]
 8010f30:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8010f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f34:	f103 0218 	add.w	r2, r3, #24
 8010f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f3a:	3330      	adds	r3, #48	; 0x30
 8010f3c:	7c52      	ldrb	r2, [r2, #17]
 8010f3e:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8010f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f42:	f103 0218 	add.w	r2, r3, #24
 8010f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f48:	3330      	adds	r3, #48	; 0x30
 8010f4a:	7c92      	ldrb	r2, [r2, #18]
 8010f4c:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8010f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f50:	3318      	adds	r3, #24
 8010f52:	693a      	ldr	r2, [r7, #16]
 8010f54:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8010f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f58:	f103 0118 	add.w	r1, r3, #24
 8010f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010f60:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8010f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f66:	3318      	adds	r3, #24
 8010f68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010f6c:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8010f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f70:	3318      	adds	r3, #24
 8010f72:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8010f76:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8010f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f7a:	3318      	adds	r3, #24
 8010f7c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010f80:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8010f82:	2300      	movs	r3, #0
 8010f84:	e18c      	b.n	80112a0 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 8010f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f88:	3348      	adds	r3, #72	; 0x48
 8010f8a:	7c5b      	ldrb	r3, [r3, #17]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	f000 80ac 	beq.w	80110ea <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 8010f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f94:	3348      	adds	r3, #72	; 0x48
 8010f96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010f9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f9e:	4299      	cmp	r1, r3
 8010fa0:	bf08      	it	eq
 8010fa2:	4290      	cmpeq	r0, r2
 8010fa4:	f040 80a1 	bne.w	80110ea <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8010fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010faa:	3348      	adds	r3, #72	; 0x48
 8010fac:	681a      	ldr	r2, [r3, #0]
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010fb8:	1c5a      	adds	r2, r3, #1
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8010fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8010fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fc8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010fcc:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8010fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd2:	7c1b      	ldrb	r3, [r3, #16]
 8010fd4:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8010fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fda:	7c5b      	ldrb	r3, [r3, #17]
 8010fdc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8010fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fe2:	7c9b      	ldrb	r3, [r3, #18]
 8010fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8010fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fea:	3348      	adds	r3, #72	; 0x48
 8010fec:	681a      	ldr	r2, [r3, #0]
 8010fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff0:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 8010ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff4:	3348      	adds	r3, #72	; 0x48
 8010ff6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010ffa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010ffc:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8011000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011002:	3348      	adds	r3, #72	; 0x48
 8011004:	7c1a      	ldrb	r2, [r3, #16]
 8011006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011008:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 801100a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801100c:	3348      	adds	r3, #72	; 0x48
 801100e:	7c5a      	ldrb	r2, [r3, #17]
 8011010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011012:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 8011014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011016:	3348      	adds	r3, #72	; 0x48
 8011018:	7c9a      	ldrb	r2, [r3, #18]
 801101a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801101c:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 801101e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011020:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011026:	3348      	adds	r3, #72	; 0x48
 8011028:	6812      	ldr	r2, [r2, #0]
 801102a:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 801102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801102e:	3330      	adds	r3, #48	; 0x30
 8011030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011032:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8011036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801103a:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 801103e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011040:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011046:	3348      	adds	r3, #72	; 0x48
 8011048:	7c12      	ldrb	r2, [r2, #16]
 801104a:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 801104c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801104e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011054:	3348      	adds	r3, #72	; 0x48
 8011056:	7c52      	ldrb	r2, [r2, #17]
 8011058:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 801105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801105c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011062:	3348      	adds	r3, #72	; 0x48
 8011064:	7c92      	ldrb	r2, [r2, #18]
 8011066:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8011068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801106a:	f103 0218 	add.w	r2, r3, #24
 801106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011070:	3330      	adds	r3, #48	; 0x30
 8011072:	6812      	ldr	r2, [r2, #0]
 8011074:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8011076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011078:	3318      	adds	r3, #24
 801107a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801107c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8011080:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011084:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8011088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801108a:	f103 0218 	add.w	r2, r3, #24
 801108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011090:	3330      	adds	r3, #48	; 0x30
 8011092:	7c12      	ldrb	r2, [r2, #16]
 8011094:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8011096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011098:	f103 0218 	add.w	r2, r3, #24
 801109c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801109e:	3330      	adds	r3, #48	; 0x30
 80110a0:	7c52      	ldrb	r2, [r2, #17]
 80110a2:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 80110a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a6:	f103 0218 	add.w	r2, r3, #24
 80110aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ac:	3330      	adds	r3, #48	; 0x30
 80110ae:	7c92      	ldrb	r2, [r2, #18]
 80110b0:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 80110b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110b4:	3318      	adds	r3, #24
 80110b6:	693a      	ldr	r2, [r7, #16]
 80110b8:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 80110ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110bc:	f103 0118 	add.w	r1, r3, #24
 80110c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80110c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 80110c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ca:	3318      	adds	r3, #24
 80110cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80110d0:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 80110d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d4:	3318      	adds	r3, #24
 80110d6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80110da:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 80110dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110de:	3318      	adds	r3, #24
 80110e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80110e4:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 80110e6:	2300      	movs	r3, #0
 80110e8:	e0da      	b.n	80112a0 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 80110ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ec:	3348      	adds	r3, #72	; 0x48
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 80110f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110f4:	3348      	adds	r3, #72	; 0x48
 80110f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80110fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 80110fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011100:	3348      	adds	r3, #72	; 0x48
 8011102:	7c1b      	ldrb	r3, [r3, #16]
 8011104:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 8011108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801110a:	3348      	adds	r3, #72	; 0x48
 801110c:	7c5b      	ldrb	r3, [r3, #17]
 801110e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 8011112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011114:	3348      	adds	r3, #72	; 0x48
 8011116:	7c9b      	ldrb	r3, [r3, #18]
 8011118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 801111c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801111e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011124:	3348      	adds	r3, #72	; 0x48
 8011126:	6812      	ldr	r2, [r2, #0]
 8011128:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 801112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801112c:	3330      	adds	r3, #48	; 0x30
 801112e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011130:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8011134:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011138:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 801113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801113e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011144:	3348      	adds	r3, #72	; 0x48
 8011146:	7c12      	ldrb	r2, [r2, #16]
 8011148:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 801114a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801114c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011152:	3348      	adds	r3, #72	; 0x48
 8011154:	7c52      	ldrb	r2, [r2, #17]
 8011156:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8011158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801115a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011160:	3348      	adds	r3, #72	; 0x48
 8011162:	7c92      	ldrb	r2, [r2, #18]
 8011164:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8011166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011168:	f103 0218 	add.w	r2, r3, #24
 801116c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801116e:	3330      	adds	r3, #48	; 0x30
 8011170:	6812      	ldr	r2, [r2, #0]
 8011172:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8011174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011176:	3318      	adds	r3, #24
 8011178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801117a:	f102 0130 	add.w	r1, r2, #48	; 0x30
 801117e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011182:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8011186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011188:	f103 0218 	add.w	r2, r3, #24
 801118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801118e:	3330      	adds	r3, #48	; 0x30
 8011190:	7c12      	ldrb	r2, [r2, #16]
 8011192:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8011194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011196:	f103 0218 	add.w	r2, r3, #24
 801119a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801119c:	3330      	adds	r3, #48	; 0x30
 801119e:	7c52      	ldrb	r2, [r2, #17]
 80111a0:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 80111a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111a4:	f103 0218 	add.w	r2, r3, #24
 80111a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111aa:	3330      	adds	r3, #48	; 0x30
 80111ac:	7c92      	ldrb	r2, [r2, #18]
 80111ae:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 80111b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111b2:	3318      	adds	r3, #24
 80111b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111b6:	6812      	ldr	r2, [r2, #0]
 80111b8:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 80111ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111bc:	f103 0118 	add.w	r1, r3, #24
 80111c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80111c6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 80111ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111cc:	3318      	adds	r3, #24
 80111ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111d0:	7c12      	ldrb	r2, [r2, #16]
 80111d2:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 80111d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d6:	3318      	adds	r3, #24
 80111d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111da:	7c52      	ldrb	r2, [r2, #17]
 80111dc:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 80111de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111e0:	3318      	adds	r3, #24
 80111e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111e4:	7c92      	ldrb	r2, [r2, #18]
 80111e6:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 80111e8:	693a      	ldr	r2, [r7, #16]
 80111ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111ec:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 80111ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80111f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80111f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 80111f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80111fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111fe:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 8011200:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8011204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011206:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 8011208:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801120c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801120e:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 8011210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011212:	2200      	movs	r2, #0
 8011214:	601a      	str	r2, [r3, #0]
 8011216:	e042      	b.n	801129e <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	695b      	ldr	r3, [r3, #20]
 801121c:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	69db      	ldr	r3, [r3, #28]
 8011222:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 8011224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011226:	2200      	movs	r2, #0
 8011228:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 801122a:	e033      	b.n	8011294 <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801122c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801122e:	7c5b      	ldrb	r3, [r3, #17]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d025      	beq.n	8011280 <_fx_utility_logical_sector_cache_entry_read+0x568>
 8011234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011236:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801123a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801123e:	4299      	cmp	r1, r3
 8011240:	bf08      	it	eq
 8011242:	4290      	cmpeq	r0, r2
 8011244:	d11c      	bne.n	8011280 <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8011246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011248:	681a      	ldr	r2, [r3, #0]
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 801124e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d00b      	beq.n	801126e <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8011256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011258:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 801125a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801125c:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 801125e:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8011264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011266:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801126c:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8011274:	1c5a      	adds	r2, r3, #1
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 801127c:	2300      	movs	r3, #0
 801127e:	e00f      	b.n	80112a0 <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 8011280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011282:	695b      	ldr	r3, [r3, #20]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d005      	beq.n	8011294 <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 8011288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801128a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801128c:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 801128e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011290:	695b      	ldr	r3, [r3, #20]
 8011292:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 8011294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011296:	1e5a      	subs	r2, r3, #1
 8011298:	633a      	str	r2, [r7, #48]	; 0x30
 801129a:	2b00      	cmp	r3, #0
 801129c:	d1c6      	bne.n	801122c <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 801129e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	373c      	adds	r7, #60	; 0x3c
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr

080112ac <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 80112ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80112b0:	b094      	sub	sp, #80	; 0x50
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	61f8      	str	r0, [r7, #28]
 80112b6:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 80112ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80112be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80112c2:	1884      	adds	r4, r0, r2
 80112c4:	eb41 0503 	adc.w	r5, r1, r3
 80112c8:	1e63      	subs	r3, r4, #1
 80112ca:	60bb      	str	r3, [r7, #8]
 80112cc:	f145 33ff 	adc.w	r3, r5, #4294967295
 80112d0:	60fb      	str	r3, [r7, #12]
 80112d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80112d6:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 80112da:	69fb      	ldr	r3, [r7, #28]
 80112dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112de:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 80112e0:	69fb      	ldr	r3, [r7, #28]
 80112e2:	691b      	ldr	r3, [r3, #16]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	f040 80b4 	bne.w	8011452 <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	695b      	ldr	r3, [r3, #20]
 80112ee:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 80112f0:	69fb      	ldr	r3, [r7, #28]
 80112f2:	69db      	ldr	r3, [r3, #28]
 80112f4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80112f6:	e09f      	b.n	8011438 <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80112f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d103      	bne.n	8011306 <_fx_utility_logical_sector_flush+0x5a>
 80112fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011300:	2b00      	cmp	r3, #0
 8011302:	f000 81de 	beq.w	80116c2 <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 8011306:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801130a:	4313      	orrs	r3, r2
 801130c:	f000 81db 	beq.w	80116c6 <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 8011310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011312:	7c5b      	ldrb	r3, [r3, #17]
 8011314:	2b00      	cmp	r3, #0
 8011316:	f000 808c 	beq.w	8011432 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 801131a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801131c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 8011320:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011324:	4290      	cmp	r0, r2
 8011326:	eb71 0303 	sbcs.w	r3, r1, r3
 801132a:	f0c0 8082 	bcc.w	8011432 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 801132e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011330:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8011334:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011338:	4290      	cmp	r0, r2
 801133a:	eb71 0303 	sbcs.w	r3, r1, r3
 801133e:	d378      	bcc.n	8011432 <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 8011340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011342:	7c1b      	ldrb	r3, [r3, #16]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d04d      	beq.n	80113e4 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8011348:	69fb      	ldr	r3, [r7, #28]
 801134a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801134e:	2b00      	cmp	r3, #0
 8011350:	d148      	bne.n	80113e4 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 8011352:	69fb      	ldr	r3, [r7, #28]
 8011354:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011358:	1c5a      	adds	r2, r3, #1
 801135a:	69fb      	ldr	r3, [r7, #28]
 801135c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011360:	69fb      	ldr	r3, [r7, #28]
 8011362:	2201      	movs	r2, #1
 8011364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011368:	69fb      	ldr	r3, [r7, #28]
 801136a:	2290      	movs	r2, #144	; 0x90
 801136c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011372:	681a      	ldr	r2, [r3, #0]
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801137a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801137c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011380:	69fb      	ldr	r3, [r7, #28]
 8011382:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 8011386:	69fb      	ldr	r3, [r7, #28]
 8011388:	2201      	movs	r2, #1
 801138a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801138e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011390:	7c9b      	ldrb	r3, [r3, #18]
 8011392:	461a      	mov	r2, r3
 8011394:	69fb      	ldr	r3, [r7, #28]
 8011396:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801139a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801139c:	7c9b      	ldrb	r3, [r3, #18]
 801139e:	2b04      	cmp	r3, #4
 80113a0:	d003      	beq.n	80113aa <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	2201      	movs	r2, #1
 80113a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80113aa:	69fb      	ldr	r3, [r7, #28]
 80113ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80113b0:	69f8      	ldr	r0, [r7, #28]
 80113b2:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	2200      	movs	r2, #0
 80113b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d003      	beq.n	80113ce <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 80113c6:	69fb      	ldr	r3, [r7, #28]
 80113c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113cc:	e17f      	b.n	80116ce <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80113ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113d0:	2200      	movs	r2, #0
 80113d2:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113d8:	1e5a      	subs	r2, r3, #1
 80113da:	69fb      	ldr	r3, [r7, #28]
 80113dc:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 80113de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e0:	3b01      	subs	r3, #1
 80113e2:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 80113e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d018      	beq.n	801141c <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80113ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113ec:	2200      	movs	r2, #0
 80113ee:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80113f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80113f2:	f04f 32ff 	mov.w	r2, #4294967295
 80113f6:	f04f 33ff 	mov.w	r3, #4294967295
 80113fa:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 80113fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011400:	7c1b      	ldrb	r3, [r3, #16]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d00a      	beq.n	801141c <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8011406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011408:	2200      	movs	r2, #0
 801140a:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 801140c:	69fb      	ldr	r3, [r7, #28]
 801140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011410:	1e5a      	subs	r2, r3, #1
 8011412:	69fb      	ldr	r3, [r7, #28]
 8011414:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 8011416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011418:	3b01      	subs	r3, #1
 801141a:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 801141c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011420:	1e51      	subs	r1, r2, #1
 8011422:	6039      	str	r1, [r7, #0]
 8011424:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011428:	607b      	str	r3, [r7, #4]
 801142a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801142e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8011432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011434:	695b      	ldr	r3, [r3, #20]
 8011436:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8011438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801143a:	1e5a      	subs	r2, r3, #1
 801143c:	64ba      	str	r2, [r7, #72]	; 0x48
 801143e:	2b00      	cmp	r3, #0
 8011440:	f000 8144 	beq.w	80116cc <_fx_utility_logical_sector_flush+0x420>
 8011444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011446:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801144a:	4313      	orrs	r3, r2
 801144c:	f47f af54 	bne.w	80112f8 <_fx_utility_logical_sector_flush+0x4c>
 8011450:	e13c      	b.n	80116cc <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	695b      	ldr	r3, [r3, #20]
 8011456:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 8011458:	2300      	movs	r3, #0
 801145a:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 801145c:	69fb      	ldr	r3, [r7, #28]
 801145e:	6a1b      	ldr	r3, [r3, #32]
 8011460:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 8011462:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011466:	2a20      	cmp	r2, #32
 8011468:	f173 0300 	sbcs.w	r3, r3, #0
 801146c:	d202      	bcs.n	8011474 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 801146e:	2301      	movs	r3, #1
 8011470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011472:	e121      	b.n	80116b8 <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 8011474:	2300      	movs	r3, #0
 8011476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 8011478:	e11e      	b.n	80116b8 <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801147a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147c:	2b00      	cmp	r3, #0
 801147e:	d103      	bne.n	8011488 <_fx_utility_logical_sector_flush+0x1dc>
 8011480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011482:	2b00      	cmp	r3, #0
 8011484:	f000 8121 	beq.w	80116ca <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 8011488:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801148c:	4313      	orrs	r3, r2
 801148e:	f000 811d 	beq.w	80116cc <_fx_utility_logical_sector_flush+0x420>
 8011492:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011496:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801149a:	4290      	cmp	r0, r2
 801149c:	eb71 0303 	sbcs.w	r3, r1, r3
 80114a0:	f0c0 8114 	bcc.w	80116cc <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 80114a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d015      	beq.n	80114d6 <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 80114aa:	693a      	ldr	r2, [r7, #16]
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80114b2:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80114b6:	4013      	ands	r3, r2
 80114b8:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 80114ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114bc:	f003 031f 	and.w	r3, r3, #31
 80114c0:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 80114c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114c4:	009b      	lsls	r3, r3, #2
 80114c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80114c8:	e00d      	b.n	80114e6 <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 80114ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114cc:	085b      	lsrs	r3, r3, #1
 80114ce:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 80114d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114d2:	3301      	adds	r3, #1
 80114d4:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 80114d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d8:	f003 0301 	and.w	r3, r3, #1
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d0f4      	beq.n	80114ca <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 80114e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 80114e6:	2300      	movs	r3, #0
 80114e8:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80114ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114ec:	4613      	mov	r3, r2
 80114ee:	005b      	lsls	r3, r3, #1
 80114f0:	4413      	add	r3, r2
 80114f2:	00db      	lsls	r3, r3, #3
 80114f4:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 80114f8:	69fa      	ldr	r2, [r7, #28]
 80114fa:	4413      	add	r3, r2
 80114fc:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 80114fe:	2300      	movs	r3, #0
 8011500:	647b      	str	r3, [r7, #68]	; 0x44
 8011502:	e0a7      	b.n	8011654 <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8011504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011506:	7c5b      	ldrb	r3, [r3, #17]
 8011508:	2b00      	cmp	r3, #0
 801150a:	f000 8089 	beq.w	8011620 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801150e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011510:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8011514:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011518:	4290      	cmp	r0, r2
 801151a:	eb71 0303 	sbcs.w	r3, r1, r3
 801151e:	d37f      	bcc.n	8011620 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 8011520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011522:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8011526:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801152a:	4290      	cmp	r0, r2
 801152c:	eb71 0303 	sbcs.w	r3, r1, r3
 8011530:	d376      	bcc.n	8011620 <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 8011532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011534:	7c1b      	ldrb	r3, [r3, #16]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d04d      	beq.n	80115d6 <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801153a:	69fb      	ldr	r3, [r7, #28]
 801153c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011540:	2b00      	cmp	r3, #0
 8011542:	d148      	bne.n	80115d6 <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 8011544:	69fb      	ldr	r3, [r7, #28]
 8011546:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801154a:	1c5a      	adds	r2, r3, #1
 801154c:	69fb      	ldr	r3, [r7, #28]
 801154e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011552:	69fb      	ldr	r3, [r7, #28]
 8011554:	2201      	movs	r2, #1
 8011556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801155a:	69fb      	ldr	r3, [r7, #28]
 801155c:	2290      	movs	r2, #144	; 0x90
 801155e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	69fb      	ldr	r3, [r7, #28]
 8011568:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801156c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801156e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	2201      	movs	r2, #1
 801157c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8011580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011582:	7c9b      	ldrb	r3, [r3, #18]
 8011584:	461a      	mov	r2, r3
 8011586:	69fb      	ldr	r3, [r7, #28]
 8011588:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801158c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801158e:	7c9b      	ldrb	r3, [r3, #18]
 8011590:	2b04      	cmp	r3, #4
 8011592:	d003      	beq.n	801159c <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	2201      	movs	r2, #1
 8011598:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 801159c:	69fb      	ldr	r3, [r7, #28]
 801159e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80115a2:	69f8      	ldr	r0, [r7, #28]
 80115a4:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80115a6:	69fb      	ldr	r3, [r7, #28]
 80115a8:	2200      	movs	r2, #0
 80115aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 80115ae:	69fb      	ldr	r3, [r7, #28]
 80115b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d003      	beq.n	80115c0 <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115be:	e086      	b.n	80116ce <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80115c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115c2:	2200      	movs	r2, #0
 80115c4:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ca:	1e5a      	subs	r2, r3, #1
 80115cc:	69fb      	ldr	r3, [r7, #28]
 80115ce:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 80115d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d2:	3b01      	subs	r3, #1
 80115d4:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 80115d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d018      	beq.n	801160e <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80115dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115de:	2200      	movs	r2, #0
 80115e0:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80115e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80115e4:	f04f 32ff 	mov.w	r2, #4294967295
 80115e8:	f04f 33ff 	mov.w	r3, #4294967295
 80115ec:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 80115f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115f2:	7c1b      	ldrb	r3, [r3, #16]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d00a      	beq.n	801160e <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80115f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115fa:	2200      	movs	r2, #0
 80115fc:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80115fe:	69fb      	ldr	r3, [r7, #28]
 8011600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011602:	1e5a      	subs	r2, r3, #1
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 8011608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801160a:	3b01      	subs	r3, #1
 801160c:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 801160e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011612:	f112 38ff 	adds.w	r8, r2, #4294967295
 8011616:	f143 39ff 	adc.w	r9, r3, #4294967295
 801161a:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 801161e:	e006      	b.n	801162e <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 8011620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011622:	7c5b      	ldrb	r3, [r3, #17]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d002      	beq.n	801162e <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 8011628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801162a:	3301      	adds	r3, #1
 801162c:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011630:	2b00      	cmp	r3, #0
 8011632:	d102      	bne.n	801163a <_fx_utility_logical_sector_flush+0x38e>
 8011634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011636:	2b00      	cmp	r3, #0
 8011638:	d011      	beq.n	801165e <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 801163a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801163e:	4313      	orrs	r3, r2
 8011640:	d102      	bne.n	8011648 <_fx_utility_logical_sector_flush+0x39c>
 8011642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011644:	2b00      	cmp	r3, #0
 8011646:	d00c      	beq.n	8011662 <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 8011648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801164a:	3318      	adds	r3, #24
 801164c:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 801164e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011650:	3301      	adds	r3, #1
 8011652:	647b      	str	r3, [r7, #68]	; 0x44
 8011654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011656:	2b03      	cmp	r3, #3
 8011658:	f67f af54 	bls.w	8011504 <_fx_utility_logical_sector_flush+0x258>
 801165c:	e002      	b.n	8011664 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 801165e:	bf00      	nop
 8011660:	e000      	b.n	8011664 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 8011662:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 8011664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011666:	3380      	adds	r3, #128	; 0x80
 8011668:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 801166a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801166c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801166e:	429a      	cmp	r2, r3
 8011670:	f4ff af3b 	bcc.w	80114ea <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 8011674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011676:	2b00      	cmp	r3, #0
 8011678:	d00c      	beq.n	8011694 <_fx_utility_logical_sector_flush+0x3e8>
 801167a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801167c:	2b00      	cmp	r3, #0
 801167e:	d109      	bne.n	8011694 <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	6a1a      	ldr	r2, [r3, #32]
 8011684:	2101      	movs	r1, #1
 8011686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011688:	fa01 f303 	lsl.w	r3, r1, r3
 801168c:	43db      	mvns	r3, r3
 801168e:	401a      	ands	r2, r3
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 8011694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011696:	2b00      	cmp	r3, #0
 8011698:	d008      	beq.n	80116ac <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 801169a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801169e:	f112 0a01 	adds.w	sl, r2, #1
 80116a2:	f143 0b00 	adc.w	fp, r3, #0
 80116a6:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 80116aa:	e005      	b.n	80116b8 <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 80116ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ae:	085b      	lsrs	r3, r3, #1
 80116b0:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 80116b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116b4:	3301      	adds	r3, #1
 80116b6:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 80116b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	f47f aedd 	bne.w	801147a <_fx_utility_logical_sector_flush+0x1ce>
 80116c0:	e004      	b.n	80116cc <_fx_utility_logical_sector_flush+0x420>
                break;
 80116c2:	bf00      	nop
 80116c4:	e002      	b.n	80116cc <_fx_utility_logical_sector_flush+0x420>
                break;
 80116c6:	bf00      	nop
 80116c8:	e000      	b.n	80116cc <_fx_utility_logical_sector_flush+0x420>
                break;
 80116ca:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 80116cc:	2300      	movs	r3, #0
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3750      	adds	r7, #80	; 0x50
 80116d2:	46bd      	mov	sp, r7
 80116d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080116d8 <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 80116d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80116dc:	b09c      	sub	sp, #112	; 0x70
 80116de:	af04      	add	r7, sp, #16
 80116e0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80116e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 80116e6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80116ea:	2b02      	cmp	r3, #2
 80116ec:	d106      	bne.n	80116fc <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 80116ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116f0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80116f4:	1c5a      	adds	r2, r3, #1
 80116f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116f8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 80116fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116fe:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8011702:	1c5a      	adds	r2, r3, #1
 8011704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011706:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801170a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801170c:	689a      	ldr	r2, [r3, #8]
 801170e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011712:	4293      	cmp	r3, r2
 8011714:	f0c0 80d9 	bcc.w	80118ca <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8011718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801171a:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801171c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011720:	4293      	cmp	r3, r2
 8011722:	f200 80d2 	bhi.w	80118ca <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8011726:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801172a:	9300      	str	r3, [sp, #0]
 801172c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011730:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011732:	f7ff faf1 	bl	8010d18 <_fx_utility_logical_sector_cache_entry_read>
 8011736:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 8011738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801173a:	2b00      	cmp	r3, #0
 801173c:	d101      	bne.n	8011742 <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 801173e:	2300      	movs	r3, #0
 8011740:	e259      	b.n	8011bf6 <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 8011742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011744:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8011748:	1c5a      	adds	r2, r3, #1
 801174a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801174c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 8011750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011752:	7c5b      	ldrb	r3, [r3, #17]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d049      	beq.n	80117ec <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 8011758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801175a:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 801175c:	2b00      	cmp	r3, #0
 801175e:	d045      	beq.n	80117ec <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 8011760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011762:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011766:	1c5a      	adds	r2, r3, #1
 8011768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801176a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801176e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011770:	2201      	movs	r2, #1
 8011772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011778:	2290      	movs	r2, #144	; 0x90
 801177a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801177e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011780:	681a      	ldr	r2, [r3, #0]
 8011782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011784:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8011788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801178a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801178e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011790:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 8011794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011796:	2201      	movs	r2, #1
 8011798:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801179c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801179e:	7c9b      	ldrb	r3, [r3, #18]
 80117a0:	461a      	mov	r2, r3
 80117a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117a4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80117a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117aa:	7c9b      	ldrb	r3, [r3, #18]
 80117ac:	2b04      	cmp	r3, #4
 80117ae:	d003      	beq.n	80117b8 <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80117b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117b2:	2201      	movs	r2, #1
 80117b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 80117b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80117be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80117c0:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80117c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117c4:	2200      	movs	r2, #0
 80117c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 80117ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d003      	beq.n	80117dc <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 80117d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80117da:	e20c      	b.n	8011bf6 <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80117dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117de:	2200      	movs	r2, #0
 80117e0:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 80117e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117e6:	1e5a      	subs	r2, r3, #1
 80117e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 80117ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80117f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80117f6:	4290      	cmp	r0, r2
 80117f8:	eb71 0303 	sbcs.w	r3, r1, r3
 80117fc:	d301      	bcc.n	8011802 <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 80117fe:	2389      	movs	r3, #137	; 0x89
 8011800:	e1f9      	b.n	8011bf6 <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8011802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011804:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8011808:	1c5a      	adds	r2, r3, #1
 801180a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801180c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8011810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011812:	2200      	movs	r2, #0
 8011814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801181a:	2290      	movs	r2, #144	; 0x90
 801181c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011826:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801182a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801182c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801182e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 8011832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011834:	2201      	movs	r2, #1
 8011836:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801183a:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801183e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011840:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8011844:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011848:	2b04      	cmp	r3, #4
 801184a:	d103      	bne.n	8011854 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 801184c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801184e:	2201      	movs	r2, #1
 8011850:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011856:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801185a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801185c:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 801185e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011860:	2200      	movs	r2, #0
 8011862:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8011866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801186c:	2b00      	cmp	r3, #0
 801186e:	d11a      	bne.n	80118a6 <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 8011870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011872:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011876:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 801187a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801187c:	2201      	movs	r2, #1
 801187e:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 8011880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011882:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011886:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 8011888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801188a:	2b00      	cmp	r3, #0
 801188c:	d015      	beq.n	80118ba <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 801188e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 8011890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011892:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 8011894:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 8011896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011898:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 801189a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801189c:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801189e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80118a2:	61da      	str	r2, [r3, #28]
 80118a4:	e009      	b.n	80118ba <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80118a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118a8:	2200      	movs	r2, #0
 80118aa:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80118ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80118ae:	f04f 32ff 	mov.w	r2, #4294967295
 80118b2:	f04f 33ff 	mov.w	r3, #4294967295
 80118b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 80118ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118c0:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 80118c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118c8:	e195      	b.n	8011bf6 <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 80118ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80118ce:	2200      	movs	r2, #0
 80118d0:	469a      	mov	sl, r3
 80118d2:	4693      	mov	fp, r2
 80118d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80118d8:	eb1a 0402 	adds.w	r4, sl, r2
 80118dc:	eb4b 0503 	adc.w	r5, fp, r3
 80118e0:	f114 38ff 	adds.w	r8, r4, #4294967295
 80118e4:	f145 39ff 	adc.w	r9, r5, #4294967295
 80118e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80118ee:	2300      	movs	r3, #0
 80118f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80118f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80118f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80118f8:	460b      	mov	r3, r1
 80118fa:	4543      	cmp	r3, r8
 80118fc:	4613      	mov	r3, r2
 80118fe:	eb73 0309 	sbcs.w	r3, r3, r9
 8011902:	d22c      	bcs.n	801195e <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 8011904:	2389      	movs	r3, #137	; 0x89
 8011906:	e176      	b.n	8011bf6 <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8011908:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801190c:	9300      	str	r3, [sp, #0]
 801190e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011912:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011914:	f7ff fa00 	bl	8010d18 <_fx_utility_logical_sector_cache_entry_read>
 8011918:	4603      	mov	r3, r0
 801191a:	2b00      	cmp	r3, #0
 801191c:	d124      	bne.n	8011968 <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 801191e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011920:	6898      	ldr	r0, [r3, #8]
 8011922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011926:	461a      	mov	r2, r3
 8011928:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801192c:	f000 fad0 	bl	8011ed0 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8011930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011938:	4413      	add	r3, r2
 801193a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 801193e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011942:	1c51      	adds	r1, r2, #1
 8011944:	61b9      	str	r1, [r7, #24]
 8011946:	f143 0300 	adc.w	r3, r3, #0
 801194a:	61fb      	str	r3, [r7, #28]
 801194c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8011950:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 8011954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011958:	3b01      	subs	r3, #1
 801195a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 801195e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011962:	2b00      	cmp	r3, #0
 8011964:	d1d0      	bne.n	8011908 <_fx_utility_logical_sector_read+0x230>
 8011966:	e000      	b.n	801196a <_fx_utility_logical_sector_read+0x292>
                break;
 8011968:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 801196a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801196e:	2200      	movs	r2, #0
 8011970:	633b      	str	r3, [r7, #48]	; 0x30
 8011972:	637a      	str	r2, [r7, #52]	; 0x34
 8011974:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011978:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801197c:	4621      	mov	r1, r4
 801197e:	1889      	adds	r1, r1, r2
 8011980:	62b9      	str	r1, [r7, #40]	; 0x28
 8011982:	4629      	mov	r1, r5
 8011984:	eb43 0101 	adc.w	r1, r3, r1
 8011988:	62f9      	str	r1, [r7, #44]	; 0x2c
 801198a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801198e:	460b      	mov	r3, r1
 8011990:	3b01      	subs	r3, #1
 8011992:	613b      	str	r3, [r7, #16]
 8011994:	4613      	mov	r3, r2
 8011996:	f143 33ff 	adc.w	r3, r3, #4294967295
 801199a:	617b      	str	r3, [r7, #20]
 801199c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80119a0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 80119a4:	e02b      	b.n	80119fe <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 80119a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80119aa:	9300      	str	r3, [sp, #0]
 80119ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80119b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80119b2:	f7ff f9b1 	bl	8010d18 <_fx_utility_logical_sector_cache_entry_read>
 80119b6:	4603      	mov	r3, r0
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d125      	bne.n	8011a08 <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 80119bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119be:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 80119c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80119c4:	3b01      	subs	r3, #1
 80119c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80119ca:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 80119ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80119d2:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 80119d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 80119d8:	461a      	mov	r2, r3
 80119da:	f000 fa79 	bl	8011ed0 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 80119de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80119e2:	1e51      	subs	r1, r2, #1
 80119e4:	60b9      	str	r1, [r7, #8]
 80119e6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80119ea:	60fb      	str	r3, [r7, #12]
 80119ec:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80119f0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 80119f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80119f8:	3b01      	subs	r3, #1
 80119fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 80119fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d1cf      	bne.n	80119a6 <_fx_utility_logical_sector_read+0x2ce>
 8011a06:	e000      	b.n	8011a0a <_fx_utility_logical_sector_read+0x332>
                break;
 8011a08:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 8011a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d101      	bne.n	8011a16 <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 8011a12:	2300      	movs	r3, #0
 8011a14:	e0ef      	b.n	8011bf6 <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8011a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	623b      	str	r3, [r7, #32]
 8011a1e:	627a      	str	r2, [r7, #36]	; 0x24
 8011a20:	2301      	movs	r3, #1
 8011a22:	9302      	str	r3, [sp, #8]
 8011a24:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011a28:	e9cd 3400 	strd	r3, r4, [sp]
 8011a2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011a30:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011a32:	f7ff fc3b 	bl	80112ac <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8011a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a38:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8011a3c:	1c5a      	adds	r2, r3, #1
 8011a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a40:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8011a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a46:	2200      	movs	r2, #0
 8011a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a4e:	2290      	movs	r2, #144	; 0x90
 8011a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8011a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011a5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8011a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011a6c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011a70:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a76:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8011a7a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011a7e:	2b04      	cmp	r3, #4
 8011a80:	d103      	bne.n	8011a8a <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8011a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a84:	2201      	movs	r2, #1
 8011a86:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011a90:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011a92:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8011a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a96:	2200      	movs	r2, #0
 8011a98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8011a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	f040 80a4 	bne.w	8011bf0 <_fx_utility_logical_sector_read+0x518>
 8011aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aaa:	695b      	ldr	r3, [r3, #20]
 8011aac:	089b      	lsrs	r3, r3, #2
 8011aae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	f080 809c 	bcs.w	8011bf0 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 8011ab8:	e095      	b.n	8011be6 <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8011aba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011abe:	9300      	str	r3, [sp, #0]
 8011ac0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011ac4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011ac6:	f7ff f927 	bl	8010d18 <_fx_utility_logical_sector_cache_entry_read>
 8011aca:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 8011acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d101      	bne.n	8011ad6 <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	e08f      	b.n	8011bf6 <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 8011ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ad8:	7c5b      	ldrb	r3, [r3, #17]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d049      	beq.n	8011b72 <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 8011ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ae0:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d045      	beq.n	8011b72 <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 8011ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ae8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011aec:	1c5a      	adds	r2, r3, #1
 8011aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011af0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011af6:	2201      	movs	r2, #1
 8011af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011afe:	2290      	movs	r2, #144	; 0x90
 8011b00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b06:	681a      	ldr	r2, [r3, #0]
 8011b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8011b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 8011b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8011b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b24:	7c9b      	ldrb	r3, [r3, #18]
 8011b26:	461a      	mov	r2, r3
 8011b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b2a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8011b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b30:	7c9b      	ldrb	r3, [r3, #18]
 8011b32:	2b04      	cmp	r3, #4
 8011b34:	d003      	beq.n	8011b3e <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b38:	2201      	movs	r2, #1
 8011b3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011b44:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011b46:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 8011b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d003      	beq.n	8011b62 <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 8011b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b60:	e049      	b.n	8011bf6 <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8011b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b64:	2200      	movs	r2, #0
 8011b66:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 8011b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b6c:	1e5a      	subs	r2, r3, #1
 8011b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b70:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 8011b72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011b74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011b78:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8011b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b7e:	2201      	movs	r2, #1
 8011b80:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 8011b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b84:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011b88:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 8011b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d00a      	beq.n	8011ba6 <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 8011b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 8011b92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b94:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 8011b96:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8011b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b9a:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8011b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b9e:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8011ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ba2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ba4:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8011ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ba8:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 8011baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8011bae:	461a      	mov	r2, r3
 8011bb0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011bb4:	f000 f98c 	bl	8011ed0 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8011bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011bc0:	4413      	add	r3, r2
 8011bc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 8011bc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011bca:	1c51      	adds	r1, r2, #1
 8011bcc:	6039      	str	r1, [r7, #0]
 8011bce:	f143 0300 	adc.w	r3, r3, #0
 8011bd2:	607b      	str	r3, [r7, #4]
 8011bd4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011bd8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 8011bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011be0:	3b01      	subs	r3, #1
 8011be2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 8011be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	f47f af65 	bne.w	8011aba <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8011bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3760      	adds	r7, #96	; 0x60
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011c00 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8011c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011c04:	b096      	sub	sp, #88	; 0x58
 8011c06:	af04      	add	r7, sp, #16
 8011c08:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011c0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8011c14:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011c18:	2b02      	cmp	r3, #2
 8011c1a:	d106      	bne.n	8011c2a <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 8011c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c1e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8011c22:	1c5a      	adds	r2, r3, #1
 8011c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c26:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 8011c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8011c30:	1c5a      	adds	r2, r3, #1
 8011c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c34:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3a:	689a      	ldr	r2, [r3, #8]
 8011c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	f0c0 80d8 	bcc.w	8011df4 <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8011c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c46:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011c48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c4a:	4293      	cmp	r3, r2
 8011c4c:	f200 80d2 	bhi.w	8011df4 <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 8011c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c52:	691b      	ldr	r3, [r3, #16]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d030      	beq.n	8011cba <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 8011c58:	6a3a      	ldr	r2, [r7, #32]
 8011c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8011c60:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8011c64:	4013      	ands	r3, r2
 8011c66:	009b      	lsls	r3, r3, #2
 8011c68:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8011c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	005b      	lsls	r3, r3, #1
 8011c70:	4413      	add	r3, r2
 8011c72:	00db      	lsls	r3, r3, #3
 8011c74:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8011c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c7a:	4413      	add	r3, r2
 8011c7c:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8011c7e:	2300      	movs	r3, #0
 8011c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c82:	e016      	b.n	8011cb2 <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c86:	7c5b      	ldrb	r3, [r3, #17]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d00c      	beq.n	8011ca6 <_fx_utility_logical_sector_write+0xa6>
 8011c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011c92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011c96:	4299      	cmp	r1, r3
 8011c98:	bf08      	it	eq
 8011c9a:	4290      	cmpeq	r0, r2
 8011c9c:	d103      	bne.n	8011ca6 <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8011ca4:	e02d      	b.n	8011d02 <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8011ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ca8:	3301      	adds	r3, #1
 8011caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cae:	3318      	adds	r3, #24
 8011cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8011cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cb4:	2b03      	cmp	r3, #3
 8011cb6:	d9e5      	bls.n	8011c84 <_fx_utility_logical_sector_write+0x84>
 8011cb8:	e023      	b.n	8011d02 <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 8011cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cbc:	695b      	ldr	r3, [r3, #20]
 8011cbe:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8011cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc2:	69db      	ldr	r3, [r3, #28]
 8011cc4:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 8011cc6:	e017      	b.n	8011cf8 <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cca:	7c5b      	ldrb	r3, [r3, #17]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d00c      	beq.n	8011cea <_fx_utility_logical_sector_write+0xea>
 8011cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cd2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011cd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011cda:	4299      	cmp	r1, r3
 8011cdc:	bf08      	it	eq
 8011cde:	4290      	cmpeq	r0, r2
 8011ce0:	d103      	bne.n	8011cea <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8011ce8:	e00b      	b.n	8011d02 <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 8011cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cec:	695b      	ldr	r3, [r3, #20]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d002      	beq.n	8011cf8 <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8011cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cf4:	695b      	ldr	r3, [r3, #20]
 8011cf6:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 8011cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cfa:	1e5a      	subs	r2, r3, #1
 8011cfc:	643a      	str	r2, [r7, #64]	; 0x40
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d1e2      	bne.n	8011cc8 <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 8011d02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d00d      	beq.n	8011d26 <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 8011d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d0c:	7c1b      	ldrb	r3, [r3, #16]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d107      	bne.n	8011d22 <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 8011d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d16:	1c5a      	adds	r2, r3, #1
 8011d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d1a:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 8011d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d1e:	2201      	movs	r2, #1
 8011d20:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 8011d22:	2300      	movs	r3, #0
 8011d24:	e0cf      	b.n	8011ec6 <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8011d26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011d2a:	4313      	orrs	r3, r2
 8011d2c:	d004      	beq.n	8011d38 <_fx_utility_logical_sector_write+0x138>
 8011d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011d32:	1c51      	adds	r1, r2, #1
 8011d34:	430b      	orrs	r3, r1
 8011d36:	d101      	bne.n	8011d3c <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 8011d38:	2389      	movs	r3, #137	; 0x89
 8011d3a:	e0c4      	b.n	8011ec6 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 8011d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d3e:	2200      	movs	r2, #0
 8011d40:	61bb      	str	r3, [r7, #24]
 8011d42:	61fa      	str	r2, [r7, #28]
 8011d44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011d48:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011d4c:	4621      	mov	r1, r4
 8011d4e:	1889      	adds	r1, r1, r2
 8011d50:	6139      	str	r1, [r7, #16]
 8011d52:	4629      	mov	r1, r5
 8011d54:	eb43 0101 	adc.w	r1, r3, r1
 8011d58:	6179      	str	r1, [r7, #20]
 8011d5a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011d5e:	460b      	mov	r3, r1
 8011d60:	f113 3aff 	adds.w	sl, r3, #4294967295
 8011d64:	4613      	mov	r3, r2
 8011d66:	f143 3bff 	adc.w	fp, r3, #4294967295
 8011d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d6c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011d70:	4592      	cmp	sl, r2
 8011d72:	eb7b 0303 	sbcs.w	r3, fp, r3
 8011d76:	d301      	bcc.n	8011d7c <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 8011d78:	2389      	movs	r3, #137	; 0x89
 8011d7a:	e0a4      	b.n	8011ec6 <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8011d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d7e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011d82:	1c5a      	adds	r2, r3, #1
 8011d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d86:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d94:	2290      	movs	r2, #144	; 0x90
 8011d96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8011d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011d9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011da2:	6a3a      	ldr	r2, [r7, #32]
 8011da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8011daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011dae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011db2:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8011db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8011dbc:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011dc0:	2b04      	cmp	r3, #4
 8011dc2:	d003      	beq.n	8011dcc <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc6:	2201      	movs	r2, #1
 8011dc8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011dd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011dd4:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd8:	2200      	movs	r2, #0
 8011dda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 8011dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d003      	beq.n	8011df0 <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 8011de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011dee:	e06a      	b.n	8011ec6 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 8011df0:	2300      	movs	r3, #0
 8011df2:	e068      	b.n	8011ec6 <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8011df4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011df8:	4313      	orrs	r3, r2
 8011dfa:	d004      	beq.n	8011e06 <_fx_utility_logical_sector_write+0x206>
 8011dfc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011e00:	1c51      	adds	r1, r2, #1
 8011e02:	430b      	orrs	r3, r1
 8011e04:	d101      	bne.n	8011e0a <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 8011e06:	2389      	movs	r3, #137	; 0x89
 8011e08:	e05d      	b.n	8011ec6 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 8011e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	60bb      	str	r3, [r7, #8]
 8011e10:	60fa      	str	r2, [r7, #12]
 8011e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011e16:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8011e1a:	4651      	mov	r1, sl
 8011e1c:	eb11 0802 	adds.w	r8, r1, r2
 8011e20:	4659      	mov	r1, fp
 8011e22:	eb41 0903 	adc.w	r9, r1, r3
 8011e26:	f118 34ff 	adds.w	r4, r8, #4294967295
 8011e2a:	f149 35ff 	adc.w	r5, r9, #4294967295
 8011e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e30:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011e34:	4294      	cmp	r4, r2
 8011e36:	eb75 0303 	sbcs.w	r3, r5, r3
 8011e3a:	d301      	bcc.n	8011e40 <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 8011e3c:	2389      	movs	r3, #137	; 0x89
 8011e3e:	e042      	b.n	8011ec6 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8011e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e42:	2200      	movs	r2, #0
 8011e44:	603b      	str	r3, [r7, #0]
 8011e46:	607a      	str	r2, [r7, #4]
 8011e48:	2301      	movs	r3, #1
 8011e4a:	9302      	str	r3, [sp, #8]
 8011e4c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011e50:	e9cd 3400 	strd	r3, r4, [sp]
 8011e54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011e58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e5a:	f7ff fa27 	bl	80112ac <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8011e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e60:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011e64:	1c5a      	adds	r2, r3, #1
 8011e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e68:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6e:	2201      	movs	r2, #1
 8011e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e76:	2290      	movs	r2, #144	; 0x90
 8011e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8011e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011e80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011e84:	6a3a      	ldr	r2, [r7, #32]
 8011e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8011e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011e90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011e94:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8011e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8011e9e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011ea2:	2b04      	cmp	r3, #4
 8011ea4:	d003      	beq.n	8011eae <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea8:	2201      	movs	r2, #1
 8011eaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011eb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011eb6:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eba:	2200      	movs	r2, #0
 8011ebc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8011ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3748      	adds	r7, #72	; 0x48
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011ed0 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b084      	sub	sp, #16
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	60f8      	str	r0, [r7, #12]
 8011ed8:	60b9      	str	r1, [r7, #8]
 8011eda:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 8011edc:	687a      	ldr	r2, [r7, #4]
 8011ede:	68f9      	ldr	r1, [r7, #12]
 8011ee0:	68b8      	ldr	r0, [r7, #8]
 8011ee2:	f004 f9c9 	bl	8016278 <memcpy>
}
 8011ee6:	bf00      	nop
 8011ee8:	3710      	adds	r7, #16
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}
	...

08011ef0 <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d101      	bne.n	8011f02 <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 8011efe:	2318      	movs	r3, #24
 8011f00:	e018      	b.n	8011f34 <_fxe_file_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011f02:	f3ef 8305 	mrs	r3, IPSR
 8011f06:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011f08:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011f0a:	4b0c      	ldr	r3, [pc, #48]	; (8011f3c <_fxe_file_close+0x4c>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	4313      	orrs	r3, r2
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d108      	bne.n	8011f26 <_fxe_file_close+0x36>
 8011f14:	4b0a      	ldr	r3, [pc, #40]	; (8011f40 <_fxe_file_close+0x50>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d004      	beq.n	8011f26 <_fxe_file_close+0x36>
 8011f1c:	4b08      	ldr	r3, [pc, #32]	; (8011f40 <_fxe_file_close+0x50>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	4a08      	ldr	r2, [pc, #32]	; (8011f44 <_fxe_file_close+0x54>)
 8011f22:	4293      	cmp	r3, r2
 8011f24:	d101      	bne.n	8011f2a <_fxe_file_close+0x3a>
 8011f26:	2320      	movs	r3, #32
 8011f28:	e004      	b.n	8011f34 <_fxe_file_close+0x44>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7f9 fe82 	bl	800bc34 <_fx_file_close>
 8011f30:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8011f32:	68fb      	ldr	r3, [r7, #12]
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3710      	adds	r7, #16
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	2400006c 	.word	0x2400006c
 8011f40:	24014ebc 	.word	0x24014ebc
 8011f44:	24015004 	.word	0x24015004

08011f48 <_fxe_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d101      	bne.n	8011f5c <_fxe_file_create+0x14>
    {
        return(FX_PTR_ERROR);
 8011f58:	2318      	movs	r3, #24
 8011f5a:	e019      	b.n	8011f90 <_fxe_file_create+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011f5c:	f3ef 8305 	mrs	r3, IPSR
 8011f60:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011f62:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011f64:	4b0c      	ldr	r3, [pc, #48]	; (8011f98 <_fxe_file_create+0x50>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	4313      	orrs	r3, r2
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d108      	bne.n	8011f80 <_fxe_file_create+0x38>
 8011f6e:	4b0b      	ldr	r3, [pc, #44]	; (8011f9c <_fxe_file_create+0x54>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d004      	beq.n	8011f80 <_fxe_file_create+0x38>
 8011f76:	4b09      	ldr	r3, [pc, #36]	; (8011f9c <_fxe_file_create+0x54>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	4a09      	ldr	r2, [pc, #36]	; (8011fa0 <_fxe_file_create+0x58>)
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	d101      	bne.n	8011f84 <_fxe_file_create+0x3c>
 8011f80:	2320      	movs	r3, #32
 8011f82:	e005      	b.n	8011f90 <_fxe_file_create+0x48>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 8011f84:	6839      	ldr	r1, [r7, #0]
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7f9 fef8 	bl	800bd7c <_fx_file_create>
 8011f8c:	60f8      	str	r0, [r7, #12]

    /* File create is complete, return status.  */
    return(status);
 8011f8e:	68fb      	ldr	r3, [r7, #12]
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3710      	adds	r7, #16
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	2400006c 	.word	0x2400006c
 8011f9c:	24014ebc 	.word	0x24014ebc
 8011fa0:	24015004 	.word	0x24015004

08011fa4 <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b088      	sub	sp, #32
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	60f8      	str	r0, [r7, #12]
 8011fac:	60b9      	str	r1, [r7, #8]
 8011fae:	607a      	str	r2, [r7, #4]
 8011fb0:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d00b      	beq.n	8011fd0 <_fxe_file_open+0x2c>
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	4a36      	ldr	r2, [pc, #216]	; (8012098 <_fxe_file_open+0xf4>)
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d106      	bne.n	8011fd0 <_fxe_file_open+0x2c>
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d003      	beq.n	8011fd0 <_fxe_file_open+0x2c>
 8011fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fca:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8011fce:	d001      	beq.n	8011fd4 <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 8011fd0:	2318      	movs	r3, #24
 8011fd2:	e05d      	b.n	8012090 <_fxe_file_open+0xec>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d007      	beq.n	8011fea <_fxe_file_open+0x46>
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	2b02      	cmp	r3, #2
 8011fde:	d004      	beq.n	8011fea <_fxe_file_open+0x46>
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	2b01      	cmp	r3, #1
 8011fe4:	d001      	beq.n	8011fea <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 8011fe6:	2306      	movs	r3, #6
 8011fe8:	e052      	b.n	8012090 <_fxe_file_open+0xec>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011fea:	f3ef 8305 	mrs	r3, IPSR
 8011fee:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011ff0:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011ff2:	4b2a      	ldr	r3, [pc, #168]	; (801209c <_fxe_file_open+0xf8>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	4313      	orrs	r3, r2
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d108      	bne.n	801200e <_fxe_file_open+0x6a>
 8011ffc:	4b28      	ldr	r3, [pc, #160]	; (80120a0 <_fxe_file_open+0xfc>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d004      	beq.n	801200e <_fxe_file_open+0x6a>
 8012004:	4b26      	ldr	r3, [pc, #152]	; (80120a0 <_fxe_file_open+0xfc>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	4a26      	ldr	r2, [pc, #152]	; (80120a4 <_fxe_file_open+0x100>)
 801200a:	4293      	cmp	r3, r2
 801200c:	d101      	bne.n	8012012 <_fxe_file_open+0x6e>
 801200e:	2320      	movs	r3, #32
 8012010:	e03e      	b.n	8012090 <_fxe_file_open+0xec>

    /* Get protection.  */
    FX_PROTECT
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	4a20      	ldr	r2, [pc, #128]	; (8012098 <_fxe_file_open+0xf4>)
 8012018:	4293      	cmp	r3, r2
 801201a:	d001      	beq.n	8012020 <_fxe_file_open+0x7c>
 801201c:	2311      	movs	r3, #17
 801201e:	e037      	b.n	8012090 <_fxe_file_open+0xec>
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012026:	f04f 31ff 	mov.w	r1, #4294967295
 801202a:	4618      	mov	r0, r3
 801202c:	f001 f988 	bl	8013340 <_tx_mutex_get>
 8012030:	4603      	mov	r3, r0
 8012032:	2b00      	cmp	r3, #0
 8012034:	d001      	beq.n	801203a <_fxe_file_open+0x96>
 8012036:	2311      	movs	r3, #17
 8012038:	e02a      	b.n	8012090 <_fxe_file_open+0xec>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012040:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012048:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 801204a:	e00e      	b.n	801206a <_fxe_file_open+0xc6>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 801204c:	68ba      	ldr	r2, [r7, #8]
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	429a      	cmp	r2, r3
 8012052:	d107      	bne.n	8012064 <_fxe_file_open+0xc0>
        {

            /* Release protection.  */
            FX_UNPROTECT
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801205a:	4618      	mov	r0, r3
 801205c:	f001 fbe8 	bl	8013830 <_tx_mutex_put>

            /* Return error.  */
            return(FX_PTR_ERROR);
 8012060:	2318      	movs	r3, #24
 8012062:	e015      	b.n	8012090 <_fxe_file_open+0xec>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 8012064:	69fb      	ldr	r3, [r7, #28]
 8012066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012068:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 801206a:	69bb      	ldr	r3, [r7, #24]
 801206c:	1e5a      	subs	r2, r3, #1
 801206e:	61ba      	str	r2, [r7, #24]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d1eb      	bne.n	801204c <_fxe_file_open+0xa8>
    }

    /* Release protection.  */
    FX_UNPROTECT
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801207a:	4618      	mov	r0, r3
 801207c:	f001 fbd8 	bl	8013830 <_tx_mutex_put>

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	68b9      	ldr	r1, [r7, #8]
 8012086:	68f8      	ldr	r0, [r7, #12]
 8012088:	f7fa fab6 	bl	800c5f8 <_fx_file_open>
 801208c:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 801208e:	697b      	ldr	r3, [r7, #20]
}
 8012090:	4618      	mov	r0, r3
 8012092:	3720      	adds	r7, #32
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	4d454449 	.word	0x4d454449
 801209c:	2400006c 	.word	0x2400006c
 80120a0:	24014ebc 	.word	0x24014ebc
 80120a4:	24015004 	.word	0x24015004

080120a8 <_fxe_file_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b086      	sub	sp, #24
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	607a      	str	r2, [r7, #4]
 80120b4:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d005      	beq.n	80120c8 <_fxe_file_read+0x20>
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d002      	beq.n	80120c8 <_fxe_file_read+0x20>
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d101      	bne.n	80120cc <_fxe_file_read+0x24>
    {
        return(FX_PTR_ERROR);
 80120c8:	2318      	movs	r3, #24
 80120ca:	e01b      	b.n	8012104 <_fxe_file_read+0x5c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80120cc:	f3ef 8305 	mrs	r3, IPSR
 80120d0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80120d2:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80120d4:	4b0d      	ldr	r3, [pc, #52]	; (801210c <_fxe_file_read+0x64>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4313      	orrs	r3, r2
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d108      	bne.n	80120f0 <_fxe_file_read+0x48>
 80120de:	4b0c      	ldr	r3, [pc, #48]	; (8012110 <_fxe_file_read+0x68>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d004      	beq.n	80120f0 <_fxe_file_read+0x48>
 80120e6:	4b0a      	ldr	r3, [pc, #40]	; (8012110 <_fxe_file_read+0x68>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	4a0a      	ldr	r2, [pc, #40]	; (8012114 <_fxe_file_read+0x6c>)
 80120ec:	4293      	cmp	r3, r2
 80120ee:	d101      	bne.n	80120f4 <_fxe_file_read+0x4c>
 80120f0:	2320      	movs	r3, #32
 80120f2:	e007      	b.n	8012104 <_fxe_file_read+0x5c>

    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	687a      	ldr	r2, [r7, #4]
 80120f8:	68b9      	ldr	r1, [r7, #8]
 80120fa:	68f8      	ldr	r0, [r7, #12]
 80120fc:	f7fa ff5e 	bl	800cfbc <_fx_file_read>
 8012100:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 8012102:	697b      	ldr	r3, [r7, #20]
}
 8012104:	4618      	mov	r0, r3
 8012106:	3718      	adds	r7, #24
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}
 801210c:	2400006c 	.word	0x2400006c
 8012110:	24014ebc 	.word	0x24014ebc
 8012114:	24015004 	.word	0x24015004

08012118 <_fxe_file_seek>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b084      	sub	sp, #16
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d101      	bne.n	801212c <_fxe_file_seek+0x14>
    {
        return(FX_PTR_ERROR);
 8012128:	2318      	movs	r3, #24
 801212a:	e019      	b.n	8012160 <_fxe_file_seek+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801212c:	f3ef 8305 	mrs	r3, IPSR
 8012130:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8012132:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012134:	4b0c      	ldr	r3, [pc, #48]	; (8012168 <_fxe_file_seek+0x50>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	4313      	orrs	r3, r2
 801213a:	2b00      	cmp	r3, #0
 801213c:	d108      	bne.n	8012150 <_fxe_file_seek+0x38>
 801213e:	4b0b      	ldr	r3, [pc, #44]	; (801216c <_fxe_file_seek+0x54>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d004      	beq.n	8012150 <_fxe_file_seek+0x38>
 8012146:	4b09      	ldr	r3, [pc, #36]	; (801216c <_fxe_file_seek+0x54>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	4a09      	ldr	r2, [pc, #36]	; (8012170 <_fxe_file_seek+0x58>)
 801214c:	4293      	cmp	r3, r2
 801214e:	d101      	bne.n	8012154 <_fxe_file_seek+0x3c>
 8012150:	2320      	movs	r3, #32
 8012152:	e005      	b.n	8012160 <_fxe_file_seek+0x48>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 8012154:	6839      	ldr	r1, [r7, #0]
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f7fb f9d4 	bl	800d504 <_fx_file_seek>
 801215c:	60f8      	str	r0, [r7, #12]

    /* Seek is complete, return status.  */
    return(status);
 801215e:	68fb      	ldr	r3, [r7, #12]
}
 8012160:	4618      	mov	r0, r3
 8012162:	3710      	adds	r7, #16
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}
 8012168:	2400006c 	.word	0x2400006c
 801216c:	24014ebc 	.word	0x24014ebc
 8012170:	24015004 	.word	0x24015004

08012174 <_fxe_file_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b086      	sub	sp, #24
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d002      	beq.n	801218c <_fxe_file_write+0x18>
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d101      	bne.n	8012190 <_fxe_file_write+0x1c>
    {
        return(FX_PTR_ERROR);
 801218c:	2318      	movs	r3, #24
 801218e:	e01a      	b.n	80121c6 <_fxe_file_write+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012190:	f3ef 8305 	mrs	r3, IPSR
 8012194:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012196:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012198:	4b0d      	ldr	r3, [pc, #52]	; (80121d0 <_fxe_file_write+0x5c>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	4313      	orrs	r3, r2
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d108      	bne.n	80121b4 <_fxe_file_write+0x40>
 80121a2:	4b0c      	ldr	r3, [pc, #48]	; (80121d4 <_fxe_file_write+0x60>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d004      	beq.n	80121b4 <_fxe_file_write+0x40>
 80121aa:	4b0a      	ldr	r3, [pc, #40]	; (80121d4 <_fxe_file_write+0x60>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	4a0a      	ldr	r2, [pc, #40]	; (80121d8 <_fxe_file_write+0x64>)
 80121b0:	4293      	cmp	r3, r2
 80121b2:	d101      	bne.n	80121b8 <_fxe_file_write+0x44>
 80121b4:	2320      	movs	r3, #32
 80121b6:	e006      	b.n	80121c6 <_fxe_file_write+0x52>

    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 80121b8:	687a      	ldr	r2, [r7, #4]
 80121ba:	68b9      	ldr	r1, [r7, #8]
 80121bc:	68f8      	ldr	r0, [r7, #12]
 80121be:	f7fb f9b3 	bl	800d528 <_fx_file_write>
 80121c2:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 80121c4:	697b      	ldr	r3, [r7, #20]
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	3718      	adds	r7, #24
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	2400006c 	.word	0x2400006c
 80121d4:	24014ebc 	.word	0x24014ebc
 80121d8:	24015004 	.word	0x24015004

080121dc <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b084      	sub	sp, #16
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d101      	bne.n	80121ee <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 80121ea:	2318      	movs	r3, #24
 80121ec:	e018      	b.n	8012220 <_fxe_media_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80121ee:	f3ef 8305 	mrs	r3, IPSR
 80121f2:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80121f4:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80121f6:	4b0c      	ldr	r3, [pc, #48]	; (8012228 <_fxe_media_close+0x4c>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	4313      	orrs	r3, r2
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d108      	bne.n	8012212 <_fxe_media_close+0x36>
 8012200:	4b0a      	ldr	r3, [pc, #40]	; (801222c <_fxe_media_close+0x50>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d004      	beq.n	8012212 <_fxe_media_close+0x36>
 8012208:	4b08      	ldr	r3, [pc, #32]	; (801222c <_fxe_media_close+0x50>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4a08      	ldr	r2, [pc, #32]	; (8012230 <_fxe_media_close+0x54>)
 801220e:	4293      	cmp	r3, r2
 8012210:	d101      	bne.n	8012216 <_fxe_media_close+0x3a>
 8012212:	2320      	movs	r3, #32
 8012214:	e004      	b.n	8012220 <_fxe_media_close+0x44>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f7fc fa06 	bl	800e628 <_fx_media_close>
 801221c:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 801221e:	68fb      	ldr	r3, [r7, #12]
}
 8012220:	4618      	mov	r0, r3
 8012222:	3710      	adds	r7, #16
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}
 8012228:	2400006c 	.word	0x2400006c
 801222c:	24014ebc 	.word	0x24014ebc
 8012230:	24015004 	.word	0x24015004

08012234 <_fxe_media_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_flush(FX_MEDIA  *media_ptr)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b084      	sub	sp, #16
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d101      	bne.n	8012246 <_fxe_media_flush+0x12>
    {
        return(FX_PTR_ERROR);
 8012242:	2318      	movs	r3, #24
 8012244:	e018      	b.n	8012278 <_fxe_media_flush+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012246:	f3ef 8305 	mrs	r3, IPSR
 801224a:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801224c:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801224e:	4b0c      	ldr	r3, [pc, #48]	; (8012280 <_fxe_media_flush+0x4c>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	4313      	orrs	r3, r2
 8012254:	2b00      	cmp	r3, #0
 8012256:	d108      	bne.n	801226a <_fxe_media_flush+0x36>
 8012258:	4b0a      	ldr	r3, [pc, #40]	; (8012284 <_fxe_media_flush+0x50>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d004      	beq.n	801226a <_fxe_media_flush+0x36>
 8012260:	4b08      	ldr	r3, [pc, #32]	; (8012284 <_fxe_media_flush+0x50>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	4a08      	ldr	r2, [pc, #32]	; (8012288 <_fxe_media_flush+0x54>)
 8012266:	4293      	cmp	r3, r2
 8012268:	d101      	bne.n	801226e <_fxe_media_flush+0x3a>
 801226a:	2320      	movs	r3, #32
 801226c:	e004      	b.n	8012278 <_fxe_media_flush+0x44>

    /* Call actual media flush service.  */
    status =  _fx_media_flush(media_ptr);
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7fc fbb2 	bl	800e9d8 <_fx_media_flush>
 8012274:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8012276:	68fb      	ldr	r3, [r7, #12]
}
 8012278:	4618      	mov	r0, r3
 801227a:	3710      	adds	r7, #16
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}
 8012280:	2400006c 	.word	0x2400006c
 8012284:	24014ebc 	.word	0x24014ebc
 8012288:	24015004 	.word	0x24015004

0801228c <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b08e      	sub	sp, #56	; 0x38
 8012290:	af02      	add	r7, sp, #8
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	607a      	str	r2, [r7, #4]
 8012298:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d00a      	beq.n	80122b6 <_fxe_media_open+0x2a>
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d007      	beq.n	80122b6 <_fxe_media_open+0x2a>
 80122a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d004      	beq.n	80122b6 <_fxe_media_open+0x2a>
 80122ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122ae:	f242 42b8 	movw	r2, #9400	; 0x24b8
 80122b2:	4293      	cmp	r3, r2
 80122b4:	d001      	beq.n	80122ba <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 80122b6:	2318      	movs	r3, #24
 80122b8:	e071      	b.n	801239e <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80122ba:	f3ef 8305 	mrs	r3, IPSR
 80122be:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80122c0:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80122c2:	4b39      	ldr	r3, [pc, #228]	; (80123a8 <_fxe_media_open+0x11c>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	4313      	orrs	r3, r2
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d108      	bne.n	80122de <_fxe_media_open+0x52>
 80122cc:	4b37      	ldr	r3, [pc, #220]	; (80123ac <_fxe_media_open+0x120>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d004      	beq.n	80122de <_fxe_media_open+0x52>
 80122d4:	4b35      	ldr	r3, [pc, #212]	; (80123ac <_fxe_media_open+0x120>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	4a35      	ldr	r2, [pc, #212]	; (80123b0 <_fxe_media_open+0x124>)
 80122da:	4293      	cmp	r3, r2
 80122dc:	d101      	bne.n	80122e2 <_fxe_media_open+0x56>
 80122de:	2320      	movs	r3, #32
 80122e0:	e05d      	b.n	801239e <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 80122e2:	4b34      	ldr	r3, [pc, #208]	; (80123b4 <_fxe_media_open+0x128>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 80122e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ea:	425b      	negs	r3, r3
 80122ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122ee:	4013      	ands	r3, r2
 80122f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 80122f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	d004      	beq.n	8012302 <_fxe_media_open+0x76>
 80122f8:	4b2e      	ldr	r3, [pc, #184]	; (80123b4 <_fxe_media_open+0x128>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122fe:	429a      	cmp	r2, r3
 8012300:	d001      	beq.n	8012306 <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 8012302:	2302      	movs	r3, #2
 8012304:	e04b      	b.n	801239e <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 8012306:	4b2c      	ldr	r3, [pc, #176]	; (80123b8 <_fxe_media_open+0x12c>)
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 801230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230e:	425b      	negs	r3, r3
 8012310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012312:	4013      	ands	r3, r2
 8012314:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 8012316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012318:	2b01      	cmp	r3, #1
 801231a:	d004      	beq.n	8012326 <_fxe_media_open+0x9a>
 801231c:	4b26      	ldr	r3, [pc, #152]	; (80123b8 <_fxe_media_open+0x12c>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012322:	429a      	cmp	r2, r3
 8012324:	d001      	beq.n	801232a <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 8012326:	2302      	movs	r3, #2
 8012328:	e039      	b.n	801239e <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 801232a:	f002 fbd1 	bl	8014ad0 <_tx_thread_identify>
 801232e:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8012330:	f107 0314 	add.w	r3, r7, #20
 8012334:	461a      	mov	r2, r3
 8012336:	2100      	movs	r1, #0
 8012338:	6a38      	ldr	r0, [r7, #32]
 801233a:	f002 fc23 	bl	8014b84 <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 801233e:	4b1f      	ldr	r3, [pc, #124]	; (80123bc <_fxe_media_open+0x130>)
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 8012344:	4b1e      	ldr	r3, [pc, #120]	; (80123c0 <_fxe_media_open+0x134>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 801234a:	e010      	b.n	801236e <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 801234c:	68fa      	ldr	r2, [r7, #12]
 801234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012350:	429a      	cmp	r2, r3
 8012352:	d108      	bne.n	8012366 <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	f107 0214 	add.w	r2, r7, #20
 801235a:	4619      	mov	r1, r3
 801235c:	6a38      	ldr	r0, [r7, #32]
 801235e:	f002 fc11 	bl	8014b84 <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 8012362:	2318      	movs	r3, #24
 8012364:	e01b      	b.n	801239e <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 8012366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012368:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801236c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 801236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012370:	1e5a      	subs	r2, r3, #1
 8012372:	62ba      	str	r2, [r7, #40]	; 0x28
 8012374:	2b00      	cmp	r3, #0
 8012376:	d1e9      	bne.n	801234c <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	f107 0214 	add.w	r2, r7, #20
 801237e:	4619      	mov	r1, r3
 8012380:	6a38      	ldr	r0, [r7, #32]
 8012382:	f002 fbff 	bl	8014b84 <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 8012386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012388:	9301      	str	r3, [sp, #4]
 801238a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801238c:	9300      	str	r3, [sp, #0]
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	687a      	ldr	r2, [r7, #4]
 8012392:	68b9      	ldr	r1, [r7, #8]
 8012394:	68f8      	ldr	r0, [r7, #12]
 8012396:	f7fc fcab 	bl	800ecf0 <_fx_media_open>
 801239a:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 801239c:	69fb      	ldr	r3, [r7, #28]
}
 801239e:	4618      	mov	r0, r3
 80123a0:	3730      	adds	r7, #48	; 0x30
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	bf00      	nop
 80123a8:	2400006c 	.word	0x2400006c
 80123ac:	24014ebc 	.word	0x24014ebc
 80123b0:	24015004 	.word	0x24015004
 80123b4:	24014c38 	.word	0x24014c38
 80123b8:	24014c3c 	.word	0x24014c3c
 80123bc:	24014c28 	.word	0x24014c28
 80123c0:	24014c2c 	.word	0x24014c2c

080123c4 <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b084      	sub	sp, #16
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 80123cc:	f002 fffa 	bl	80153c4 <_tx_time_get>
 80123d0:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 80123d2:	e007      	b.n	80123e4 <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7f7 f825 	bl	8009424 <fx_stm32_sd_get_status>
 80123da:	4603      	mov	r3, r0
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d101      	bne.n	80123e4 <check_sd_status+0x20>
    {
      return 0;
 80123e0:	2300      	movs	r3, #0
 80123e2:	e008      	b.n	80123f6 <check_sd_status+0x32>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 80123e4:	f002 ffee 	bl	80153c4 <_tx_time_get>
 80123e8:	4602      	mov	r2, r0
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	1ad3      	subs	r3, r2, r3
 80123ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80123f2:	d3ef      	bcc.n	80123d4 <check_sd_status+0x10>
    }
  }

  return 1;
 80123f4:	2301      	movs	r3, #1
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3710      	adds	r7, #16
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
	...

08012400 <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b086      	sub	sp, #24
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
  ULONG partition_start;
  ULONG partition_size;

#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
 8012408:	4b7e      	ldr	r3, [pc, #504]	; (8012604 <fx_stm32_sd_driver+0x204>)
 801240a:	2201      	movs	r2, #1
 801240c:	601a      	str	r2, [r3, #0]
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 801240e:	4b7d      	ldr	r3, [pc, #500]	; (8012604 <fx_stm32_sd_driver+0x204>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	2b01      	cmp	r3, #1
 8012414:	d10a      	bne.n	801242c <fx_stm32_sd_driver+0x2c>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 8012416:	2000      	movs	r0, #0
 8012418:	f7ff ffd4 	bl	80123c4 <check_sd_status>
 801241c:	4603      	mov	r3, r0
 801241e:	2b00      	cmp	r3, #0
 8012420:	d004      	beq.n	801242c <fx_stm32_sd_driver+0x2c>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2290      	movs	r2, #144	; 0x90
 8012426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801242a:	e0e7      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>
    }
  }

#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012432:	f003 0303 	and.w	r3, r3, #3
 8012436:	617b      	str	r3, [r7, #20]
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801243e:	2b08      	cmp	r3, #8
 8012440:	f200 80d2 	bhi.w	80125e8 <fx_stm32_sd_driver+0x1e8>
 8012444:	a201      	add	r2, pc, #4	; (adr r2, 801244c <fx_stm32_sd_driver+0x4c>)
 8012446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801244a:	bf00      	nop
 801244c:	080124bf 	.word	0x080124bf
 8012450:	080124f3 	.word	0x080124f3
 8012454:	08012525 	.word	0x08012525
 8012458:	0801252f 	.word	0x0801252f
 801245c:	08012471 	.word	0x08012471
 8012460:	08012539 	.word	0x08012539
 8012464:	080125e9 	.word	0x080125e9
 8012468:	080125cd 	.word	0x080125cd
 801246c:	080124a9 	.word	0x080124a9
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_PRE_INIT(media_ptr);
 8012478:	231c      	movs	r3, #28
 801247a:	2200      	movs	r2, #0
 801247c:	4962      	ldr	r1, [pc, #392]	; (8012608 <fx_stm32_sd_driver+0x208>)
 801247e:	4863      	ldr	r0, [pc, #396]	; (801260c <fx_stm32_sd_driver+0x20c>)
 8012480:	f003 fcb0 	bl	8015de4 <_txe_semaphore_create>
 8012484:	4603      	mov	r3, r0
 8012486:	2b00      	cmp	r3, #0
 8012488:	d109      	bne.n	801249e <fx_stm32_sd_driver+0x9e>
 801248a:	231c      	movs	r3, #28
 801248c:	2200      	movs	r2, #0
 801248e:	4960      	ldr	r1, [pc, #384]	; (8012610 <fx_stm32_sd_driver+0x210>)
 8012490:	4860      	ldr	r0, [pc, #384]	; (8012614 <fx_stm32_sd_driver+0x214>)
 8012492:	f003 fca7 	bl	8015de4 <_txe_semaphore_create>
 8012496:	4603      	mov	r3, r0
 8012498:	2b00      	cmp	r3, #0
 801249a:	f000 80aa 	beq.w	80125f2 <fx_stm32_sd_driver+0x1f2>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2290      	movs	r2, #144	; 0x90
 80124a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 80124a6:	e0a4      	b.n	80125f2 <fx_stm32_sd_driver+0x1f2>
    }

  case FX_DRIVER_UNINIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2200      	movs	r2, #0
 80124ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      {
        is_initialized = 0;
      }
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);
 80124b0:	4856      	ldr	r0, [pc, #344]	; (801260c <fx_stm32_sd_driver+0x20c>)
 80124b2:	f003 fd2d 	bl	8015f10 <_txe_semaphore_delete>
 80124b6:	4857      	ldr	r0, [pc, #348]	; (8012614 <fx_stm32_sd_driver+0x214>)
 80124b8:	f003 fd2a 	bl	8015f10 <_txe_semaphore_delete>

      break;
 80124bc:	e09e      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2290      	movs	r2, #144	; 0x90
 80124c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124d0:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f000 f89c 	bl	8012618 <sd_read_data>
 80124e0:	4603      	mov	r3, r0
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	f040 8087 	bne.w	80125f6 <fx_stm32_sd_driver+0x1f6>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2200      	movs	r2, #0
 80124ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 80124f0:	e081      	b.n	80125f6 <fx_stm32_sd_driver+0x1f6>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2290      	movs	r2, #144	; 0x90
 80124f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012504:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f000 f940 	bl	8012794 <sd_write_data>
 8012514:	4603      	mov	r3, r0
 8012516:	2b00      	cmp	r3, #0
 8012518:	d16f      	bne.n	80125fa <fx_stm32_sd_driver+0x1fa>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2200      	movs	r2, #0
 801251e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8012522:	e06a      	b.n	80125fa <fx_stm32_sd_driver+0x1fa>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 801252c:	e066      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	2200      	movs	r2, #0
 8012532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 8012536:	e061      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	2100      	movs	r1, #0
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f000 f868 	bl	8012618 <sd_read_data>
 8012548:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 801254a:	693b      	ldr	r3, [r7, #16]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d004      	beq.n	801255a <fx_stm32_sd_driver+0x15a>
      {
        media_ptr->fx_media_driver_status = status;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	693a      	ldr	r2, [r7, #16]
 8012554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8012558:	e050      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 801255a:	2300      	movs	r3, #0
 801255c:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8012564:	f107 0308 	add.w	r3, r7, #8
 8012568:	f107 020c 	add.w	r2, r7, #12
 801256c:	2100      	movs	r1, #0
 801256e:	f7fd f939 	bl	800f7e4 <_fx_partition_offset_calculate>
 8012572:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d004      	beq.n	8012584 <fx_stm32_sd_driver+0x184>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2290      	movs	r2, #144	; 0x90
 801257e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8012582:	e03b      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d01b      	beq.n	80125c2 <fx_stm32_sd_driver+0x1c2>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 801258a:	2000      	movs	r0, #0
 801258c:	f7ff ff1a 	bl	80123c4 <check_sd_status>
 8012590:	4603      	mov	r3, r0
 8012592:	2b00      	cmp	r3, #0
 8012594:	d004      	beq.n	80125a0 <fx_stm32_sd_driver+0x1a0>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2290      	movs	r2, #144	; 0x90
 801259a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 801259e:	e02d      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 80125a0:	68f9      	ldr	r1, [r7, #12]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f000 f834 	bl	8012618 <sd_read_data>
 80125b0:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 80125b2:	693b      	ldr	r3, [r7, #16]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d004      	beq.n	80125c2 <fx_stm32_sd_driver+0x1c2>
        {
          media_ptr->fx_media_driver_status = status;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	693a      	ldr	r2, [r7, #16]
 80125bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 80125c0:	e01c      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2200      	movs	r2, #0
 80125c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 80125ca:	e017      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	2100      	movs	r1, #0
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f000 f8dc 	bl	8012794 <sd_write_data>
 80125dc:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	693a      	ldr	r2, [r7, #16]
 80125e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      break;
 80125e6:	e009      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2290      	movs	r2, #144	; 0x90
 80125ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 80125f0:	e004      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>
      break;
 80125f2:	bf00      	nop
 80125f4:	e002      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>
      break;
 80125f6:	bf00      	nop
 80125f8:	e000      	b.n	80125fc <fx_stm32_sd_driver+0x1fc>
      break;
 80125fa:	bf00      	nop
    }
  }
}
 80125fc:	3718      	adds	r7, #24
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}
 8012602:	bf00      	nop
 8012604:	24014e80 	.word	0x24014e80
 8012608:	0801636c 	.word	0x0801636c
 801260c:	24014c0c 	.word	0x24014c0c
 8012610:	08016388 	.word	0x08016388
 8012614:	24014bf0 	.word	0x24014bf0

08012618 <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b090      	sub	sp, #64	; 0x40
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	60b9      	str	r1, [r7, #8]
 8012622:	607a      	str	r2, [r7, #4]
 8012624:	603b      	str	r3, [r7, #0]
  INT i = 0;
 8012626:	2300      	movs	r3, #0
 8012628:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d061      	beq.n	80126f4 <sd_read_data+0xdc>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012636:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 8012638:	2300      	movs	r3, #0
 801263a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801263c:	e04c      	b.n	80126d8 <sd_read_data+0xc0>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 801263e:	68ba      	ldr	r2, [r7, #8]
 8012640:	1c53      	adds	r3, r2, #1
 8012642:	60bb      	str	r3, [r7, #8]
 8012644:	2301      	movs	r3, #1
 8012646:	4950      	ldr	r1, [pc, #320]	; (8012788 <sd_read_data+0x170>)
 8012648:	2000      	movs	r0, #0
 801264a:	f7f6 ff01 	bl	8009450 <fx_stm32_sd_read_blocks>
 801264e:	4603      	mov	r3, r0
 8012650:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8012652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012654:	2b00      	cmp	r3, #0
 8012656:	d001      	beq.n	801265c <sd_read_data+0x44>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8012658:	2390      	movs	r3, #144	; 0x90
 801265a:	e090      	b.n	801277e <sd_read_data+0x166>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 801265c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012660:	484a      	ldr	r0, [pc, #296]	; (801278c <sd_read_data+0x174>)
 8012662:	f003 fc93 	bl	8015f8c <_txe_semaphore_get>
 8012666:	4603      	mov	r3, r0
 8012668:	2b00      	cmp	r3, #0
 801266a:	d001      	beq.n	8012670 <sd_read_data+0x58>
 801266c:	2390      	movs	r3, #144	; 0x90
 801266e:	e086      	b.n	801277e <sd_read_data+0x166>
 8012670:	4b45      	ldr	r3, [pc, #276]	; (8012788 <sd_read_data+0x170>)
 8012672:	633b      	str	r3, [r7, #48]	; 0x30
 8012674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012678:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 801267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267c:	2b00      	cmp	r3, #0
 801267e:	dd1d      	ble.n	80126bc <sd_read_data+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012682:	f003 021f 	and.w	r2, r3, #31
 8012686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012688:	4413      	add	r3, r2
 801268a:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801268e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8012690:	f3bf 8f4f 	dsb	sy
}
 8012694:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012696:	4a3e      	ldr	r2, [pc, #248]	; (8012790 <sd_read_data+0x178>)
 8012698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801269a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a0:	3320      	adds	r3, #32
 80126a2:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80126a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a6:	3b20      	subs	r3, #32
 80126a8:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 80126aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	dcf2      	bgt.n	8012696 <sd_read_data+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 80126b0:	f3bf 8f4f 	dsb	sy
}
 80126b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80126b6:	f3bf 8f6f 	isb	sy
}
 80126ba:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80126bc:	bf00      	nop

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 80126be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80126c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80126c4:	4830      	ldr	r0, [pc, #192]	; (8012788 <sd_read_data+0x170>)
 80126c6:	f7ff fc03 	bl	8011ed0 <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 80126ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80126d0:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < num_sectors; i++)
 80126d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d4:	3301      	adds	r3, #1
 80126d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80126d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126da:	687a      	ldr	r2, [r7, #4]
 80126dc:	429a      	cmp	r2, r3
 80126de:	d8ae      	bhi.n	801263e <sd_read_data+0x26>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 80126e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d102      	bne.n	80126ee <sd_read_data+0xd6>
    {
      status = FX_SUCCESS;
 80126e8:	2300      	movs	r3, #0
 80126ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80126ec:	e046      	b.n	801277c <sd_read_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 80126ee:	2321      	movs	r3, #33	; 0x21
 80126f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80126f2:	e043      	b.n	801277c <sd_read_data+0x164>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	68ba      	ldr	r2, [r7, #8]
 80126fe:	2000      	movs	r0, #0
 8012700:	f7f6 fea6 	bl	8009450 <fx_stm32_sd_read_blocks>
 8012704:	4603      	mov	r3, r0
 8012706:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8012708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270a:	2b00      	cmp	r3, #0
 801270c:	d001      	beq.n	8012712 <sd_read_data+0xfa>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);

      return FX_IO_ERROR;
 801270e:	2390      	movs	r3, #144	; 0x90
 8012710:	e035      	b.n	801277e <sd_read_data+0x166>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8012712:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012716:	481d      	ldr	r0, [pc, #116]	; (801278c <sd_read_data+0x174>)
 8012718:	f003 fc38 	bl	8015f8c <_txe_semaphore_get>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d001      	beq.n	8012726 <sd_read_data+0x10e>
 8012722:	2390      	movs	r3, #144	; 0x90
 8012724:	e02b      	b.n	801277e <sd_read_data+0x166>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	025b      	lsls	r3, r3, #9
 8012730:	623a      	str	r2, [r7, #32]
 8012732:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8012734:	69fb      	ldr	r3, [r7, #28]
 8012736:	2b00      	cmp	r3, #0
 8012738:	dd1d      	ble.n	8012776 <sd_read_data+0x15e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801273a:	6a3b      	ldr	r3, [r7, #32]
 801273c:	f003 021f 	and.w	r2, r3, #31
 8012740:	69fb      	ldr	r3, [r7, #28]
 8012742:	4413      	add	r3, r2
 8012744:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012746:	6a3b      	ldr	r3, [r7, #32]
 8012748:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801274a:	f3bf 8f4f 	dsb	sy
}
 801274e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012750:	4a0f      	ldr	r2, [pc, #60]	; (8012790 <sd_read_data+0x178>)
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	3320      	adds	r3, #32
 801275c:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	3b20      	subs	r3, #32
 8012762:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	2b00      	cmp	r3, #0
 8012768:	dcf2      	bgt.n	8012750 <sd_read_data+0x138>
  __ASM volatile ("dsb 0xF":::"memory");
 801276a:	f3bf 8f4f 	dsb	sy
}
 801276e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012770:	f3bf 8f6f 	isb	sy
}
 8012774:	bf00      	nop
}
 8012776:	bf00      	nop
#endif

    status = FX_SUCCESS;
 8012778:	2300      	movs	r3, #0
 801277a:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
  return status;
 801277c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801277e:	4618      	mov	r0, r3
 8012780:	3740      	adds	r7, #64	; 0x40
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	24014c80 	.word	0x24014c80
 801278c:	24014c0c 	.word	0x24014c0c
 8012790:	e000ed00 	.word	0xe000ed00

08012794 <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b090      	sub	sp, #64	; 0x40
 8012798:	af00      	add	r7, sp, #0
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	60b9      	str	r1, [r7, #8]
 801279e:	607a      	str	r2, [r7, #4]
 80127a0:	603b      	str	r3, [r7, #0]
  INT i = 0;
 80127a2:	2300      	movs	r3, #0
 80127a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d061      	beq.n	8012870 <sd_write_data+0xdc>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127b2:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 80127b4:	2300      	movs	r3, #0
 80127b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80127b8:	e04c      	b.n	8012854 <sd_write_data+0xc0>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 80127ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80127be:	4951      	ldr	r1, [pc, #324]	; (8012904 <sd_write_data+0x170>)
 80127c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80127c2:	f7ff fb85 	bl	8011ed0 <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 80127c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80127cc:	637b      	str	r3, [r7, #52]	; 0x34
 80127ce:	4b4d      	ldr	r3, [pc, #308]	; (8012904 <sd_write_data+0x170>)
 80127d0:	633b      	str	r3, [r7, #48]	; 0x30
 80127d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80127d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127da:	2b00      	cmp	r3, #0
 80127dc:	dd1d      	ble.n	801281a <sd_write_data+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80127de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e0:	f003 021f 	and.w	r2, r3, #31
 80127e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e6:	4413      	add	r3, r2
 80127e8:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80127ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80127ee:	f3bf 8f4f 	dsb	sy
}
 80127f2:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80127f4:	4a44      	ldr	r2, [pc, #272]	; (8012908 <sd_write_data+0x174>)
 80127f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80127fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fe:	3320      	adds	r3, #32
 8012800:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012804:	3b20      	subs	r3, #32
 8012806:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 8012808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280a:	2b00      	cmp	r3, #0
 801280c:	dcf2      	bgt.n	80127f4 <sd_write_data+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 801280e:	f3bf 8f4f 	dsb	sy
}
 8012812:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012814:	f3bf 8f6f 	isb	sy
}
 8012818:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 801281a:	bf00      	nop
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 801281c:	68ba      	ldr	r2, [r7, #8]
 801281e:	1c53      	adds	r3, r2, #1
 8012820:	60bb      	str	r3, [r7, #8]
 8012822:	2301      	movs	r3, #1
 8012824:	4937      	ldr	r1, [pc, #220]	; (8012904 <sd_write_data+0x170>)
 8012826:	2000      	movs	r0, #0
 8012828:	f7f6 fe2e 	bl	8009488 <fx_stm32_sd_write_blocks>
 801282c:	4603      	mov	r3, r0
 801282e:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8012830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012832:	2b00      	cmp	r3, #0
 8012834:	d001      	beq.n	801283a <sd_write_data+0xa6>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8012836:	2390      	movs	r3, #144	; 0x90
 8012838:	e05f      	b.n	80128fa <sd_write_data+0x166>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 801283a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801283e:	4833      	ldr	r0, [pc, #204]	; (801290c <sd_write_data+0x178>)
 8012840:	f003 fba4 	bl	8015f8c <_txe_semaphore_get>
 8012844:	4603      	mov	r3, r0
 8012846:	2b00      	cmp	r3, #0
 8012848:	d001      	beq.n	801284e <sd_write_data+0xba>
 801284a:	2390      	movs	r3, #144	; 0x90
 801284c:	e055      	b.n	80128fa <sd_write_data+0x166>
    for (i = 0; i < num_sectors; i++)
 801284e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012850:	3301      	adds	r3, #1
 8012852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	429a      	cmp	r2, r3
 801285a:	d8ae      	bhi.n	80127ba <sd_write_data+0x26>
    }

    if (i == num_sectors)
 801285c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	429a      	cmp	r2, r3
 8012862:	d102      	bne.n	801286a <sd_write_data+0xd6>
    {
      status = FX_SUCCESS;
 8012864:	2300      	movs	r3, #0
 8012866:	63bb      	str	r3, [r7, #56]	; 0x38
 8012868:	e046      	b.n	80128f8 <sd_write_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 801286a:	2321      	movs	r3, #33	; 0x21
 801286c:	63bb      	str	r3, [r7, #56]	; 0x38
 801286e:	e043      	b.n	80128f8 <sd_write_data+0x164>
    }
  }
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	025b      	lsls	r3, r3, #9
 801287a:	623a      	str	r2, [r7, #32]
 801287c:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	2b00      	cmp	r3, #0
 8012882:	dd1d      	ble.n	80128c0 <sd_write_data+0x12c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012884:	6a3b      	ldr	r3, [r7, #32]
 8012886:	f003 021f 	and.w	r2, r3, #31
 801288a:	69fb      	ldr	r3, [r7, #28]
 801288c:	4413      	add	r3, r2
 801288e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012890:	6a3b      	ldr	r3, [r7, #32]
 8012892:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8012894:	f3bf 8f4f 	dsb	sy
}
 8012898:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801289a:	4a1b      	ldr	r2, [pc, #108]	; (8012908 <sd_write_data+0x174>)
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	3320      	adds	r3, #32
 80128a6:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80128a8:	69bb      	ldr	r3, [r7, #24]
 80128aa:	3b20      	subs	r3, #32
 80128ac:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80128ae:	69bb      	ldr	r3, [r7, #24]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	dcf2      	bgt.n	801289a <sd_write_data+0x106>
  __ASM volatile ("dsb 0xF":::"memory");
 80128b4:	f3bf 8f4f 	dsb	sy
}
 80128b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80128ba:	f3bf 8f6f 	isb	sy
}
 80128be:	bf00      	nop
}
 80128c0:	bf00      	nop
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	68ba      	ldr	r2, [r7, #8]
 80128cc:	2000      	movs	r0, #0
 80128ce:	f7f6 fddb 	bl	8009488 <fx_stm32_sd_write_blocks>
 80128d2:	4603      	mov	r3, r0
 80128d4:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 80128d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d001      	beq.n	80128e0 <sd_write_data+0x14c>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
      return FX_IO_ERROR;
 80128dc:	2390      	movs	r3, #144	; 0x90
 80128de:	e00c      	b.n	80128fa <sd_write_data+0x166>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 80128e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80128e4:	4809      	ldr	r0, [pc, #36]	; (801290c <sd_write_data+0x178>)
 80128e6:	f003 fb51 	bl	8015f8c <_txe_semaphore_get>
 80128ea:	4603      	mov	r3, r0
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d001      	beq.n	80128f4 <sd_write_data+0x160>
 80128f0:	2390      	movs	r3, #144	; 0x90
 80128f2:	e002      	b.n	80128fa <sd_write_data+0x166>

    status = FX_SUCCESS;
 80128f4:	2300      	movs	r3, #0
 80128f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);


  return status;
 80128f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3740      	adds	r7, #64	; 0x40
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	24014c80 	.word	0x24014c80
 8012908:	e000ed00 	.word	0xe000ed00
 801290c:	24014bf0 	.word	0x24014bf0

08012910 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b096      	sub	sp, #88	; 0x58
 8012914:	af00      	add	r7, sp, #0
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	60b9      	str	r1, [r7, #8]
 801291a:	607a      	str	r2, [r7, #4]
 801291c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	3303      	adds	r3, #3
 8012922:	f023 0303 	bic.w	r3, r3, #3
 8012926:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012928:	f3ef 8310 	mrs	r3, PRIMASK
 801292c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8012930:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8012932:	b672      	cpsid	i
    return(int_posture);
 8012934:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8012936:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012938:	4b55      	ldr	r3, [pc, #340]	; (8012a90 <_tx_byte_allocate+0x180>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 801293e:	2300      	movs	r3, #0
 8012940:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012946:	621a      	str	r2, [r3, #32]
 8012948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801294a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294e:	f383 8810 	msr	PRIMASK, r3
}
 8012952:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8012954:	6879      	ldr	r1, [r7, #4]
 8012956:	68f8      	ldr	r0, [r7, #12]
 8012958:	f000 f9b2 	bl	8012cc0 <_tx_byte_pool_search>
 801295c:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801295e:	f3ef 8310 	mrs	r3, PRIMASK
 8012962:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8012966:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012968:	b672      	cpsid	i
    return(int_posture);
 801296a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 801296c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 801296e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012970:	2b00      	cmp	r3, #0
 8012972:	d002      	beq.n	801297a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8012974:	2301      	movs	r3, #1
 8012976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012978:	e006      	b.n	8012988 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	6a1b      	ldr	r3, [r3, #32]
 801297e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012980:	429a      	cmp	r2, r3
 8012982:	d101      	bne.n	8012988 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8012984:	2301      	movs	r3, #1
 8012986:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8012988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801298a:	2b00      	cmp	r3, #0
 801298c:	d0d9      	beq.n	8012942 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012992:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8012994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012996:	2b00      	cmp	r3, #0
 8012998:	d008      	beq.n	80129ac <_tx_byte_allocate+0x9c>
 801299a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801299c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801299e:	6a3b      	ldr	r3, [r7, #32]
 80129a0:	f383 8810 	msr	PRIMASK, r3
}
 80129a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80129a6:	2300      	movs	r3, #0
 80129a8:	653b      	str	r3, [r7, #80]	; 0x50
 80129aa:	e06c      	b.n	8012a86 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d061      	beq.n	8012a76 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80129b2:	4b38      	ldr	r3, [pc, #224]	; (8012a94 <_tx_byte_allocate+0x184>)
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d007      	beq.n	80129ca <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 80129ba:	2310      	movs	r3, #16
 80129bc:	653b      	str	r3, [r7, #80]	; 0x50
 80129be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129c0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80129c2:	69fb      	ldr	r3, [r7, #28]
 80129c4:	f383 8810 	msr	PRIMASK, r3
}
 80129c8:	e05d      	b.n	8012a86 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80129ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129cc:	4a32      	ldr	r2, [pc, #200]	; (8012a98 <_tx_byte_allocate+0x188>)
 80129ce:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 80129d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129d2:	68fa      	ldr	r2, [r7, #12]
 80129d4:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 80129d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129d8:	68ba      	ldr	r2, [r7, #8]
 80129da:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 80129dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129de:	687a      	ldr	r2, [r7, #4]
 80129e0:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80129e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80129e8:	1c5a      	adds	r2, r3, #1
 80129ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129f4:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129fa:	1c5a      	adds	r2, r3, #1
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8012a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d109      	bne.n	8012a1a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a0a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8012a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a10:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8012a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a16:	675a      	str	r2, [r3, #116]	; 0x74
 8012a18:	e011      	b.n	8012a3e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a24:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a2a:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a30:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a36:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a3c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8012a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a40:	2209      	movs	r2, #9
 8012a42:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a46:	2201      	movs	r2, #1
 8012a48:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a4c:	683a      	ldr	r2, [r7, #0]
 8012a4e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8012a50:	4b10      	ldr	r3, [pc, #64]	; (8012a94 <_tx_byte_allocate+0x184>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	3301      	adds	r3, #1
 8012a56:	4a0f      	ldr	r2, [pc, #60]	; (8012a94 <_tx_byte_allocate+0x184>)
 8012a58:	6013      	str	r3, [r2, #0]
 8012a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a5c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a5e:	69bb      	ldr	r3, [r7, #24]
 8012a60:	f383 8810 	msr	PRIMASK, r3
}
 8012a64:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012a66:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012a68:	f002 fb06 	bl	8015078 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8012a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a72:	653b      	str	r3, [r7, #80]	; 0x50
 8012a74:	e007      	b.n	8012a86 <_tx_byte_allocate+0x176>
 8012a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a78:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	f383 8810 	msr	PRIMASK, r3
}
 8012a80:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8012a82:	2310      	movs	r3, #16
 8012a84:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8012a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3758      	adds	r7, #88	; 0x58
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}
 8012a90:	24014ebc 	.word	0x24014ebc
 8012a94:	24014f54 	.word	0x24014f54
 8012a98:	08012a9d 	.word	0x08012a9d

08012a9c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b08e      	sub	sp, #56	; 0x38
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8012aaa:	623b      	str	r3, [r7, #32]
    return(posture);
 8012aac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012aae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ab0:	b672      	cpsid	i
    return(int_posture);
 8012ab2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8012ab4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012aba:	4a33      	ldr	r2, [pc, #204]	; (8012b88 <_tx_byte_pool_cleanup+0xec>)
 8012abc:	4293      	cmp	r3, r2
 8012abe:	d158      	bne.n	8012b72 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012ac6:	683a      	ldr	r2, [r7, #0]
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	d152      	bne.n	8012b72 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ad0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8012ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d04c      	beq.n	8012b72 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8012ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	4a2b      	ldr	r2, [pc, #172]	; (8012b8c <_tx_byte_pool_cleanup+0xf0>)
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d147      	bne.n	8012b72 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8012ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d043      	beq.n	8012b72 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2200      	movs	r2, #0
 8012aee:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8012af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012af4:	1e5a      	subs	r2, r3, #1
 8012af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af8:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012afe:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d103      	bne.n	8012b0e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8012b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b08:	2200      	movs	r2, #0
 8012b0a:	625a      	str	r2, [r3, #36]	; 0x24
 8012b0c:	e013      	b.n	8012b36 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b12:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b18:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b1e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b24:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8012b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b2a:	687a      	ldr	r2, [r7, #4]
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	d102      	bne.n	8012b36 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8012b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b34:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b3a:	2b09      	cmp	r3, #9
 8012b3c:	d119      	bne.n	8012b72 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2210      	movs	r2, #16
 8012b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012b46:	4b12      	ldr	r3, [pc, #72]	; (8012b90 <_tx_byte_pool_cleanup+0xf4>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	4a10      	ldr	r2, [pc, #64]	; (8012b90 <_tx_byte_pool_cleanup+0xf4>)
 8012b4e:	6013      	str	r3, [r2, #0]
 8012b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b54:	693b      	ldr	r3, [r7, #16]
 8012b56:	f383 8810 	msr	PRIMASK, r3
}
 8012b5a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f002 f98b 	bl	8014e78 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012b62:	f3ef 8310 	mrs	r3, PRIMASK
 8012b66:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012b68:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012b6a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012b6c:	b672      	cpsid	i
    return(int_posture);
 8012b6e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012b70:	637b      	str	r3, [r7, #52]	; 0x34
 8012b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b74:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	f383 8810 	msr	PRIMASK, r3
}
 8012b7c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012b7e:	bf00      	nop
 8012b80:	3738      	adds	r7, #56	; 0x38
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	bf00      	nop
 8012b88:	08012a9d 	.word	0x08012a9d
 8012b8c:	42595445 	.word	0x42595445
 8012b90:	24014f54 	.word	0x24014f54

08012b94 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b08e      	sub	sp, #56	; 0x38
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	60f8      	str	r0, [r7, #12]
 8012b9c:	60b9      	str	r1, [r7, #8]
 8012b9e:	607a      	str	r2, [r7, #4]
 8012ba0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8012ba2:	2234      	movs	r2, #52	; 0x34
 8012ba4:	2100      	movs	r1, #0
 8012ba6:	68f8      	ldr	r0, [r7, #12]
 8012ba8:	f003 fb74 	bl	8016294 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	f023 0303 	bic.w	r3, r3, #3
 8012bb2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	68ba      	ldr	r2, [r7, #8]
 8012bb8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	687a      	ldr	r2, [r7, #4]
 8012bbe:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	683a      	ldr	r2, [r7, #0]
 8012bc4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	687a      	ldr	r2, [r7, #4]
 8012bca:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	f1a3 0208 	sub.w	r2, r3, #8
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	2202      	movs	r2, #2
 8012be0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8012be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	4413      	add	r3, r2
 8012bec:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8012bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bf0:	3b04      	subs	r3, #4
 8012bf2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8012bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8012bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c00:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8012c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c04:	3b04      	subs	r3, #4
 8012c06:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8012c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8012c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8012c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c1e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8012c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c26:	3304      	adds	r3, #4
 8012c28:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8012c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8012c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c30:	4a1f      	ldr	r2, [pc, #124]	; (8012cb0 <_tx_byte_pool_create+0x11c>)
 8012c32:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	2200      	movs	r2, #0
 8012c38:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8012c3e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012c40:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012c42:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c44:	b672      	cpsid	i
    return(int_posture);
 8012c46:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8012c48:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	4a19      	ldr	r2, [pc, #100]	; (8012cb4 <_tx_byte_pool_create+0x120>)
 8012c4e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8012c50:	4b19      	ldr	r3, [pc, #100]	; (8012cb8 <_tx_byte_pool_create+0x124>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d109      	bne.n	8012c6c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8012c58:	4a18      	ldr	r2, [pc, #96]	; (8012cbc <_tx_byte_pool_create+0x128>)
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	68fa      	ldr	r2, [r7, #12]
 8012c62:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	68fa      	ldr	r2, [r7, #12]
 8012c68:	631a      	str	r2, [r3, #48]	; 0x30
 8012c6a:	e011      	b.n	8012c90 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8012c6c:	4b13      	ldr	r3, [pc, #76]	; (8012cbc <_tx_byte_pool_create+0x128>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8012c72:	6a3b      	ldr	r3, [r7, #32]
 8012c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c76:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8012c78:	6a3b      	ldr	r3, [r7, #32]
 8012c7a:	68fa      	ldr	r2, [r7, #12]
 8012c7c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8012c7e:	69fb      	ldr	r3, [r7, #28]
 8012c80:	68fa      	ldr	r2, [r7, #12]
 8012c82:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	69fa      	ldr	r2, [r7, #28]
 8012c88:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	6a3a      	ldr	r2, [r7, #32]
 8012c8e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8012c90:	4b09      	ldr	r3, [pc, #36]	; (8012cb8 <_tx_byte_pool_create+0x124>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	3301      	adds	r3, #1
 8012c96:	4a08      	ldr	r2, [pc, #32]	; (8012cb8 <_tx_byte_pool_create+0x124>)
 8012c98:	6013      	str	r3, [r2, #0]
 8012c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c9e:	693b      	ldr	r3, [r7, #16]
 8012ca0:	f383 8810 	msr	PRIMASK, r3
}
 8012ca4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012ca6:	2300      	movs	r3, #0
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3738      	adds	r7, #56	; 0x38
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	ffffeeee 	.word	0xffffeeee
 8012cb4:	42595445 	.word	0x42595445
 8012cb8:	24014eb0 	.word	0x24014eb0
 8012cbc:	24014eac 	.word	0x24014eac

08012cc0 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8012cc0:	b480      	push	{r7}
 8012cc2:	b097      	sub	sp, #92	; 0x5c
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
 8012cc8:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012cce:	f3ef 8310 	mrs	r3, PRIMASK
 8012cd2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012cd6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012cd8:	b672      	cpsid	i
    return(int_posture);
 8012cda:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8012cdc:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	689a      	ldr	r2, [r3, #8]
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	68db      	ldr	r3, [r3, #12]
 8012ce6:	3b02      	subs	r3, #2
 8012ce8:	00db      	lsls	r3, r3, #3
 8012cea:	4413      	add	r3, r2
 8012cec:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8012cee:	683a      	ldr	r2, [r7, #0]
 8012cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d308      	bcc.n	8012d08 <_tx_byte_pool_search+0x48>
 8012cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cf8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012cfa:	69fb      	ldr	r3, [r7, #28]
 8012cfc:	f383 8810 	msr	PRIMASK, r3
}
 8012d00:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8012d02:	2300      	movs	r3, #0
 8012d04:	653b      	str	r3, [r7, #80]	; 0x50
 8012d06:	e0dd      	b.n	8012ec4 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012d08:	4b72      	ldr	r3, [pc, #456]	; (8012ed4 <_tx_byte_pool_search+0x214>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d12:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	695b      	ldr	r3, [r3, #20]
 8012d18:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	68db      	ldr	r3, [r3, #12]
 8012d1e:	3301      	adds	r3, #1
 8012d20:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8012d22:	2300      	movs	r3, #0
 8012d24:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8012d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d28:	3304      	adds	r3, #4
 8012d2a:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8012d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2e:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8012d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	4a68      	ldr	r2, [pc, #416]	; (8012ed8 <_tx_byte_pool_search+0x218>)
 8012d36:	4293      	cmp	r3, r2
 8012d38:	d143      	bne.n	8012dc2 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8012d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d104      	bne.n	8012d4a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d44:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8012d46:	2301      	movs	r3, #1
 8012d48:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8012d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d4c:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8012d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8012d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d58:	1ad3      	subs	r3, r2, r3
 8012d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8012d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d5e:	3b08      	subs	r3, #8
 8012d60:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8012d62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d257      	bcs.n	8012e1a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8012d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d70:	3304      	adds	r3, #4
 8012d72:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8012d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d76:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8012d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	4a56      	ldr	r2, [pc, #344]	; (8012ed8 <_tx_byte_pool_search+0x218>)
 8012d7e:	4293      	cmp	r3, r2
 8012d80:	d113      	bne.n	8012daa <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8012d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d84:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8012d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d88:	681a      	ldr	r2, [r3, #0]
 8012d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	68db      	ldr	r3, [r3, #12]
 8012d92:	1e5a      	subs	r2, r3, #1
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	695b      	ldr	r3, [r3, #20]
 8012d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	d114      	bne.n	8012dcc <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012da6:	615a      	str	r2, [r3, #20]
 8012da8:	e010      	b.n	8012dcc <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8012daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dac:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8012dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8012db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d008      	beq.n	8012dcc <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8012dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dbc:	3b01      	subs	r3, #1
 8012dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8012dc0:	e004      	b.n	8012dcc <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8012dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dc4:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8012dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8012dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d002      	beq.n	8012dd8 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8012dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dd4:	3b01      	subs	r3, #1
 8012dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8012dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dda:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	f383 8810 	msr	PRIMASK, r3
}
 8012de2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012de4:	f3ef 8310 	mrs	r3, PRIMASK
 8012de8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012dea:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012dec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012dee:	b672      	cpsid	i
    return(int_posture);
 8012df0:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8012df2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	6a1b      	ldr	r3, [r3, #32]
 8012df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d009      	beq.n	8012e12 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	695b      	ldr	r3, [r3, #20]
 8012e02:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	68db      	ldr	r3, [r3, #12]
 8012e08:	3301      	adds	r3, #1
 8012e0a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e10:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8012e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d186      	bne.n	8012d26 <_tx_byte_pool_search+0x66>
 8012e18:	e000      	b.n	8012e1c <_tx_byte_pool_search+0x15c>
                    break;
 8012e1a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8012e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d048      	beq.n	8012eb4 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8012e22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	1ad3      	subs	r3, r2, r3
 8012e28:	2b13      	cmp	r3, #19
 8012e2a:	d91e      	bls.n	8012e6a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	3308      	adds	r3, #8
 8012e30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e32:	4413      	add	r3, r2
 8012e34:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8012e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e38:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8012e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e3c:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8012e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e40:	681a      	ldr	r2, [r3, #0]
 8012e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e44:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8012e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e48:	3304      	adds	r3, #4
 8012e4a:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8012e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4e:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8012e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e52:	4a21      	ldr	r2, [pc, #132]	; (8012ed8 <_tx_byte_pool_search+0x218>)
 8012e54:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	68db      	ldr	r3, [r3, #12]
 8012e5a:	1c5a      	adds	r2, r3, #1
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8012e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e64:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8012e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e6c:	3304      	adds	r3, #4
 8012e6e:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8012e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e72:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8012e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e76:	687a      	ldr	r2, [r7, #4]
 8012e78:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	689a      	ldr	r2, [r3, #8]
 8012e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e80:	1ad3      	subs	r3, r2, r3
 8012e82:	f1a3 0208 	sub.w	r2, r3, #8
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	695b      	ldr	r3, [r3, #20]
 8012e8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d105      	bne.n	8012ea0 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8012e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e96:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8012e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e9a:	681a      	ldr	r2, [r3, #0]
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	615a      	str	r2, [r3, #20]
 8012ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ea2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	f383 8810 	msr	PRIMASK, r3
}
 8012eaa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8012eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eae:	3308      	adds	r3, #8
 8012eb0:	653b      	str	r3, [r7, #80]	; 0x50
 8012eb2:	e007      	b.n	8012ec4 <_tx_byte_pool_search+0x204>
 8012eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012eb6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	f383 8810 	msr	PRIMASK, r3
}
 8012ebe:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8012ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	375c      	adds	r7, #92	; 0x5c
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed0:	4770      	bx	lr
 8012ed2:	bf00      	nop
 8012ed4:	24014ebc 	.word	0x24014ebc
 8012ed8:	ffffeeee 	.word	0xffffeeee

08012edc <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8012ee0:	f001 fe14 	bl	8014b0c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8012ee4:	f002 fb12 	bl	801550c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8012ee8:	4b12      	ldr	r3, [pc, #72]	; (8012f34 <_tx_initialize_high_level+0x58>)
 8012eea:	2200      	movs	r2, #0
 8012eec:	601a      	str	r2, [r3, #0]
 8012eee:	4b12      	ldr	r3, [pc, #72]	; (8012f38 <_tx_initialize_high_level+0x5c>)
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8012ef4:	4b11      	ldr	r3, [pc, #68]	; (8012f3c <_tx_initialize_high_level+0x60>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	601a      	str	r2, [r3, #0]
 8012efa:	4b11      	ldr	r3, [pc, #68]	; (8012f40 <_tx_initialize_high_level+0x64>)
 8012efc:	2200      	movs	r2, #0
 8012efe:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8012f00:	4b10      	ldr	r3, [pc, #64]	; (8012f44 <_tx_initialize_high_level+0x68>)
 8012f02:	2200      	movs	r2, #0
 8012f04:	601a      	str	r2, [r3, #0]
 8012f06:	4b10      	ldr	r3, [pc, #64]	; (8012f48 <_tx_initialize_high_level+0x6c>)
 8012f08:	2200      	movs	r2, #0
 8012f0a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8012f0c:	4b0f      	ldr	r3, [pc, #60]	; (8012f4c <_tx_initialize_high_level+0x70>)
 8012f0e:	2200      	movs	r2, #0
 8012f10:	601a      	str	r2, [r3, #0]
 8012f12:	4b0f      	ldr	r3, [pc, #60]	; (8012f50 <_tx_initialize_high_level+0x74>)
 8012f14:	2200      	movs	r2, #0
 8012f16:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8012f18:	4b0e      	ldr	r3, [pc, #56]	; (8012f54 <_tx_initialize_high_level+0x78>)
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	601a      	str	r2, [r3, #0]
 8012f1e:	4b0e      	ldr	r3, [pc, #56]	; (8012f58 <_tx_initialize_high_level+0x7c>)
 8012f20:	2200      	movs	r2, #0
 8012f22:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8012f24:	4b0d      	ldr	r3, [pc, #52]	; (8012f5c <_tx_initialize_high_level+0x80>)
 8012f26:	2200      	movs	r2, #0
 8012f28:	601a      	str	r2, [r3, #0]
 8012f2a:	4b0d      	ldr	r3, [pc, #52]	; (8012f60 <_tx_initialize_high_level+0x84>)
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	601a      	str	r2, [r3, #0]
#endif
}
 8012f30:	bf00      	nop
 8012f32:	bd80      	pop	{r7, pc}
 8012f34:	24014e84 	.word	0x24014e84
 8012f38:	24014e88 	.word	0x24014e88
 8012f3c:	24014e8c 	.word	0x24014e8c
 8012f40:	24014e90 	.word	0x24014e90
 8012f44:	24014e94 	.word	0x24014e94
 8012f48:	24014e98 	.word	0x24014e98
 8012f4c:	24014ea4 	.word	0x24014ea4
 8012f50:	24014ea8 	.word	0x24014ea8
 8012f54:	24014eac 	.word	0x24014eac
 8012f58:	24014eb0 	.word	0x24014eb0
 8012f5c:	24014e9c 	.word	0x24014e9c
 8012f60:	24014ea0 	.word	0x24014ea0

08012f64 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8012f68:	4b10      	ldr	r3, [pc, #64]	; (8012fac <_tx_initialize_kernel_enter+0x48>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8012f70:	d00c      	beq.n	8012f8c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8012f72:	4b0e      	ldr	r3, [pc, #56]	; (8012fac <_tx_initialize_kernel_enter+0x48>)
 8012f74:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8012f78:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8012f7a:	f7ed f9b1 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8012f7e:	f7ff ffad 	bl	8012edc <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8012f82:	4b0b      	ldr	r3, [pc, #44]	; (8012fb0 <_tx_initialize_kernel_enter+0x4c>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	3301      	adds	r3, #1
 8012f88:	4a09      	ldr	r2, [pc, #36]	; (8012fb0 <_tx_initialize_kernel_enter+0x4c>)
 8012f8a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8012f8c:	4b07      	ldr	r3, [pc, #28]	; (8012fac <_tx_initialize_kernel_enter+0x48>)
 8012f8e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8012f92:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8012f94:	4b07      	ldr	r3, [pc, #28]	; (8012fb4 <_tx_initialize_kernel_enter+0x50>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f7ed fc3f 	bl	800081c <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8012f9e:	4b03      	ldr	r3, [pc, #12]	; (8012fac <_tx_initialize_kernel_enter+0x48>)
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8012fa4:	f7ed f9dc 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8012fa8:	bf00      	nop
 8012faa:	bd80      	pop	{r7, pc}
 8012fac:	2400006c 	.word	0x2400006c
 8012fb0:	24014f54 	.word	0x24014f54
 8012fb4:	24014eb4 	.word	0x24014eb4

08012fb8 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b08e      	sub	sp, #56	; 0x38
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8012fc6:	623b      	str	r3, [r7, #32]
    return(posture);
 8012fc8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012fca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012fcc:	b672      	cpsid	i
    return(int_posture);
 8012fce:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8012fd0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012fd6:	4a33      	ldr	r2, [pc, #204]	; (80130a4 <_tx_mutex_cleanup+0xec>)
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	d158      	bne.n	801308e <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012fe2:	683a      	ldr	r2, [r7, #0]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d152      	bne.n	801308e <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fec:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8012fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d04c      	beq.n	801308e <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8012ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	4a2b      	ldr	r2, [pc, #172]	; (80130a8 <_tx_mutex_cleanup+0xf0>)
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d147      	bne.n	801308e <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8012ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013000:	69db      	ldr	r3, [r3, #28]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d043      	beq.n	801308e <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2200      	movs	r2, #0
 801300a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 801300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300e:	69db      	ldr	r3, [r3, #28]
 8013010:	1e5a      	subs	r2, r3, #1
 8013012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013014:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8013016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013018:	69db      	ldr	r3, [r3, #28]
 801301a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801301e:	2b00      	cmp	r3, #0
 8013020:	d103      	bne.n	801302a <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8013022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013024:	2200      	movs	r2, #0
 8013026:	619a      	str	r2, [r3, #24]
 8013028:	e013      	b.n	8013052 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801302e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013034:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801303a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801303e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013040:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8013042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013044:	699b      	ldr	r3, [r3, #24]
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	429a      	cmp	r2, r3
 801304a:	d102      	bne.n	8013052 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 801304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801304e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013050:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013056:	2b0d      	cmp	r3, #13
 8013058:	d119      	bne.n	801308e <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	221d      	movs	r2, #29
 801305e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013062:	4b12      	ldr	r3, [pc, #72]	; (80130ac <_tx_mutex_cleanup+0xf4>)
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	3301      	adds	r3, #1
 8013068:	4a10      	ldr	r2, [pc, #64]	; (80130ac <_tx_mutex_cleanup+0xf4>)
 801306a:	6013      	str	r3, [r2, #0]
 801306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801306e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013070:	693b      	ldr	r3, [r7, #16]
 8013072:	f383 8810 	msr	PRIMASK, r3
}
 8013076:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f001 fefd 	bl	8014e78 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801307e:	f3ef 8310 	mrs	r3, PRIMASK
 8013082:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013084:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013086:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013088:	b672      	cpsid	i
    return(int_posture);
 801308a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801308c:	637b      	str	r3, [r7, #52]	; 0x34
 801308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013090:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	f383 8810 	msr	PRIMASK, r3
}
 8013098:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801309a:	bf00      	nop
 801309c:	3738      	adds	r7, #56	; 0x38
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}
 80130a2:	bf00      	nop
 80130a4:	08012fb9 	.word	0x08012fb9
 80130a8:	4d555445 	.word	0x4d555445
 80130ac:	24014f54 	.word	0x24014f54

080130b0 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b08a      	sub	sp, #40	; 0x28
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80130b8:	f3ef 8310 	mrs	r3, PRIMASK
 80130bc:	61fb      	str	r3, [r7, #28]
    return(posture);
 80130be:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80130c0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80130c2:	b672      	cpsid	i
    return(int_posture);
 80130c4:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80130c6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80130c8:	4b1a      	ldr	r3, [pc, #104]	; (8013134 <_tx_mutex_thread_release+0x84>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	3301      	adds	r3, #1
 80130ce:	4a19      	ldr	r2, [pc, #100]	; (8013134 <_tx_mutex_thread_release+0x84>)
 80130d0:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80130d8:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 80130da:	6a3b      	ldr	r3, [r7, #32]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d017      	beq.n	8013110 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80130e0:	6a3b      	ldr	r3, [r7, #32]
 80130e2:	2201      	movs	r2, #1
 80130e4:	609a      	str	r2, [r3, #8]
 80130e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	f383 8810 	msr	PRIMASK, r3
}
 80130f0:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 80130f2:	6a38      	ldr	r0, [r7, #32]
 80130f4:	f000 fb9c 	bl	8013830 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80130f8:	f3ef 8310 	mrs	r3, PRIMASK
 80130fc:	617b      	str	r3, [r7, #20]
    return(posture);
 80130fe:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013100:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013102:	b672      	cpsid	i
    return(int_posture);
 8013104:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8013106:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801310e:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8013110:	6a3b      	ldr	r3, [r7, #32]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d1dd      	bne.n	80130d2 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8013116:	4b07      	ldr	r3, [pc, #28]	; (8013134 <_tx_mutex_thread_release+0x84>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	3b01      	subs	r3, #1
 801311c:	4a05      	ldr	r2, [pc, #20]	; (8013134 <_tx_mutex_thread_release+0x84>)
 801311e:	6013      	str	r3, [r2, #0]
 8013120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013122:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	f383 8810 	msr	PRIMASK, r3
}
 801312a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 801312c:	bf00      	nop
 801312e:	3728      	adds	r7, #40	; 0x28
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}
 8013134:	24014f54 	.word	0x24014f54

08013138 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b08a      	sub	sp, #40	; 0x28
 801313c:	af00      	add	r7, sp, #0
 801313e:	60f8      	str	r0, [r7, #12]
 8013140:	60b9      	str	r1, [r7, #8]
 8013142:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8013144:	2234      	movs	r2, #52	; 0x34
 8013146:	2100      	movs	r1, #0
 8013148:	68f8      	ldr	r0, [r7, #12]
 801314a:	f003 f8a3 	bl	8016294 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	68ba      	ldr	r2, [r7, #8]
 8013152:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	687a      	ldr	r2, [r7, #4]
 8013158:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801315a:	f3ef 8310 	mrs	r3, PRIMASK
 801315e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013160:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013162:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013164:	b672      	cpsid	i
    return(int_posture);
 8013166:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8013168:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	4a1a      	ldr	r2, [pc, #104]	; (80131d8 <_tx_mutex_create+0xa0>)
 801316e:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8013170:	4b1a      	ldr	r3, [pc, #104]	; (80131dc <_tx_mutex_create+0xa4>)
 8013172:	4a1b      	ldr	r2, [pc, #108]	; (80131e0 <_tx_mutex_create+0xa8>)
 8013174:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8013176:	4b1b      	ldr	r3, [pc, #108]	; (80131e4 <_tx_mutex_create+0xac>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d109      	bne.n	8013192 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 801317e:	4a1a      	ldr	r2, [pc, #104]	; (80131e8 <_tx_mutex_create+0xb0>)
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	68fa      	ldr	r2, [r7, #12]
 8013188:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	68fa      	ldr	r2, [r7, #12]
 801318e:	625a      	str	r2, [r3, #36]	; 0x24
 8013190:	e011      	b.n	80131b6 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8013192:	4b15      	ldr	r3, [pc, #84]	; (80131e8 <_tx_mutex_create+0xb0>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8013198:	6a3b      	ldr	r3, [r7, #32]
 801319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801319c:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 801319e:	6a3b      	ldr	r3, [r7, #32]
 80131a0:	68fa      	ldr	r2, [r7, #12]
 80131a2:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 80131a4:	69fb      	ldr	r3, [r7, #28]
 80131a6:	68fa      	ldr	r2, [r7, #12]
 80131a8:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	69fa      	ldr	r2, [r7, #28]
 80131ae:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	6a3a      	ldr	r2, [r7, #32]
 80131b4:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80131b6:	4b0b      	ldr	r3, [pc, #44]	; (80131e4 <_tx_mutex_create+0xac>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	3301      	adds	r3, #1
 80131bc:	4a09      	ldr	r2, [pc, #36]	; (80131e4 <_tx_mutex_create+0xac>)
 80131be:	6013      	str	r3, [r2, #0]
 80131c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	f383 8810 	msr	PRIMASK, r3
}
 80131ca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80131cc:	2300      	movs	r3, #0
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	3728      	adds	r7, #40	; 0x28
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop
 80131d8:	4d555445 	.word	0x4d555445
 80131dc:	24014f58 	.word	0x24014f58
 80131e0:	080130b1 	.word	0x080130b1
 80131e4:	24014ea0 	.word	0x24014ea0
 80131e8:	24014e9c 	.word	0x24014e9c

080131ec <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b096      	sub	sp, #88	; 0x58
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80131f4:	f3ef 8310 	mrs	r3, PRIMASK
 80131f8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80131fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80131fc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80131fe:	b672      	cpsid	i
    return(int_posture);
 8013200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8013202:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2200      	movs	r2, #0
 8013208:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 801320a:	4b4a      	ldr	r3, [pc, #296]	; (8013334 <_tx_mutex_delete+0x148>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	3b01      	subs	r3, #1
 8013210:	4a48      	ldr	r2, [pc, #288]	; (8013334 <_tx_mutex_delete+0x148>)
 8013212:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8013214:	4b47      	ldr	r3, [pc, #284]	; (8013334 <_tx_mutex_delete+0x148>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d103      	bne.n	8013224 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 801321c:	4b46      	ldr	r3, [pc, #280]	; (8013338 <_tx_mutex_delete+0x14c>)
 801321e:	2200      	movs	r2, #0
 8013220:	601a      	str	r2, [r3, #0]
 8013222:	e013      	b.n	801324c <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	6a1b      	ldr	r3, [r3, #32]
 8013228:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801322e:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8013230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013234:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8013236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801323a:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 801323c:	4b3e      	ldr	r3, [pc, #248]	; (8013338 <_tx_mutex_delete+0x14c>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	687a      	ldr	r2, [r7, #4]
 8013242:	429a      	cmp	r2, r3
 8013244:	d102      	bne.n	801324c <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 8013246:	4a3c      	ldr	r2, [pc, #240]	; (8013338 <_tx_mutex_delete+0x14c>)
 8013248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801324a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801324c:	4b3b      	ldr	r3, [pc, #236]	; (801333c <_tx_mutex_delete+0x150>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	3301      	adds	r3, #1
 8013252:	4a3a      	ldr	r2, [pc, #232]	; (801333c <_tx_mutex_delete+0x150>)
 8013254:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	699b      	ldr	r3, [r3, #24]
 801325a:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2200      	movs	r2, #0
 8013260:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	69db      	ldr	r3, [r3, #28]
 8013266:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2200      	movs	r2, #0
 801326c:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	68db      	ldr	r3, [r3, #12]
 8013272:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8013274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013276:	2b00      	cmp	r3, #0
 8013278:	d013      	beq.n	80132a2 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2201      	movs	r2, #1
 801327e:	609a      	str	r2, [r3, #8]
 8013280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013282:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013286:	f383 8810 	msr	PRIMASK, r3
}
 801328a:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f000 facf 	bl	8013830 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013292:	f3ef 8310 	mrs	r3, PRIMASK
 8013296:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8013298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 801329a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 801329c:	b672      	cpsid	i
    return(int_posture);
 801329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 80132a0:	657b      	str	r3, [r7, #84]	; 0x54
 80132a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132a4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a8:	f383 8810 	msr	PRIMASK, r3
}
 80132ac:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 80132ae:	e024      	b.n	80132fa <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80132b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132b2:	3b01      	subs	r3, #1
 80132b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80132b6:	f3ef 8310 	mrs	r3, PRIMASK
 80132ba:	61fb      	str	r3, [r7, #28]
    return(posture);
 80132bc:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80132be:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80132c0:	b672      	cpsid	i
    return(int_posture);
 80132c2:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 80132c4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80132c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132c8:	2200      	movs	r2, #0
 80132ca:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80132cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132ce:	2201      	movs	r2, #1
 80132d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80132d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80132da:	4b18      	ldr	r3, [pc, #96]	; (801333c <_tx_mutex_delete+0x150>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	3301      	adds	r3, #1
 80132e0:	4a16      	ldr	r2, [pc, #88]	; (801333c <_tx_mutex_delete+0x150>)
 80132e2:	6013      	str	r3, [r2, #0]
 80132e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132e6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132e8:	6a3b      	ldr	r3, [r7, #32]
 80132ea:	f383 8810 	msr	PRIMASK, r3
}
 80132ee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80132f0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80132f2:	f001 fdc1 	bl	8014e78 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80132f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132f8:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 80132fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d1d7      	bne.n	80132b0 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013300:	f3ef 8310 	mrs	r3, PRIMASK
 8013304:	613b      	str	r3, [r7, #16]
    return(posture);
 8013306:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8013308:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 801330a:	b672      	cpsid	i
    return(int_posture);
 801330c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 801330e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8013310:	4b0a      	ldr	r3, [pc, #40]	; (801333c <_tx_mutex_delete+0x150>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	3b01      	subs	r3, #1
 8013316:	4a09      	ldr	r2, [pc, #36]	; (801333c <_tx_mutex_delete+0x150>)
 8013318:	6013      	str	r3, [r2, #0]
 801331a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801331c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	f383 8810 	msr	PRIMASK, r3
}
 8013324:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8013326:	f001 fd6d 	bl	8014e04 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801332a:	2300      	movs	r3, #0
}
 801332c:	4618      	mov	r0, r3
 801332e:	3758      	adds	r7, #88	; 0x58
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	24014ea0 	.word	0x24014ea0
 8013338:	24014e9c 	.word	0x24014e9c
 801333c:	24014f54 	.word	0x24014f54

08013340 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b092      	sub	sp, #72	; 0x48
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801334a:	f3ef 8310 	mrs	r3, PRIMASK
 801334e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013352:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013354:	b672      	cpsid	i
    return(int_posture);
 8013356:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8013358:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801335a:	4b7a      	ldr	r3, [pc, #488]	; (8013544 <_tx_mutex_get+0x204>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	689b      	ldr	r3, [r3, #8]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d144      	bne.n	80133f2 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2201      	movs	r2, #1
 801336c:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013372:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8013374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013376:	2b00      	cmp	r3, #0
 8013378:	d032      	beq.n	80133e0 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	691b      	ldr	r3, [r3, #16]
 801337e:	2b01      	cmp	r3, #1
 8013380:	d106      	bne.n	8013390 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8013382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	2220      	movs	r2, #32
 801338e:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8013390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013392:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013396:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8013398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339a:	2b00      	cmp	r3, #0
 801339c:	d00f      	beq.n	80133be <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 801339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133a2:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80133a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80133aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ac:	687a      	ldr	r2, [r7, #4]
 80133ae:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133b4:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80133ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80133bc:	e009      	b.n	80133d2 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80133be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133c0:	687a      	ldr	r2, [r7, #4]
 80133c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 80133d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80133d8:	1c5a      	adds	r2, r3, #1
 80133da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80133e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133e4:	69fb      	ldr	r3, [r7, #28]
 80133e6:	f383 8810 	msr	PRIMASK, r3
}
 80133ea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80133ec:	2300      	movs	r3, #0
 80133ee:	647b      	str	r3, [r7, #68]	; 0x44
 80133f0:	e0a2      	b.n	8013538 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	68db      	ldr	r3, [r3, #12]
 80133f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d10d      	bne.n	8013418 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	689b      	ldr	r3, [r3, #8]
 8013400:	1c5a      	adds	r2, r3, #1
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	609a      	str	r2, [r3, #8]
 8013406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013408:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801340a:	69bb      	ldr	r3, [r7, #24]
 801340c:	f383 8810 	msr	PRIMASK, r3
}
 8013410:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8013412:	2300      	movs	r3, #0
 8013414:	647b      	str	r3, [r7, #68]	; 0x44
 8013416:	e08f      	b.n	8013538 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	2b00      	cmp	r3, #0
 801341c:	f000 8084 	beq.w	8013528 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8013420:	4b49      	ldr	r3, [pc, #292]	; (8013548 <_tx_mutex_get+0x208>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d008      	beq.n	801343a <_tx_mutex_get+0xfa>
 8013428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801342a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	f383 8810 	msr	PRIMASK, r3
}
 8013432:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8013434:	231d      	movs	r3, #29
 8013436:	647b      	str	r3, [r7, #68]	; 0x44
 8013438:	e07e      	b.n	8013538 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	68db      	ldr	r3, [r3, #12]
 801343e:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8013440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013442:	4a42      	ldr	r2, [pc, #264]	; (801354c <_tx_mutex_get+0x20c>)
 8013444:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8013446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013448:	687a      	ldr	r2, [r7, #4]
 801344a:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 801344c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801344e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013452:	1c5a      	adds	r2, r3, #1
 8013454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013456:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	69db      	ldr	r3, [r3, #28]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d109      	bne.n	8013476 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013466:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8013468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801346a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801346c:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801346e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013472:	675a      	str	r2, [r3, #116]	; 0x74
 8013474:	e011      	b.n	801349a <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	699b      	ldr	r3, [r3, #24]
 801347a:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 801347c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801347e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013480:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013486:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801348a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801348c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013492:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8013494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013498:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	69db      	ldr	r3, [r3, #28]
 801349e:	1c5a      	adds	r2, r3, #1
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80134a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134a6:	220d      	movs	r2, #13
 80134a8:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80134aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134ac:	2201      	movs	r2, #1
 80134ae:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80134b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80134b6:	4b24      	ldr	r3, [pc, #144]	; (8013548 <_tx_mutex_get+0x208>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	3301      	adds	r3, #1
 80134bc:	4a22      	ldr	r2, [pc, #136]	; (8013548 <_tx_mutex_get+0x208>)
 80134be:	6013      	str	r3, [r2, #0]
 80134c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	f383 8810 	msr	PRIMASK, r3
}
 80134ca:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	691b      	ldr	r3, [r3, #16]
 80134d0:	2b01      	cmp	r3, #1
 80134d2:	d121      	bne.n	8013518 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134dc:	429a      	cmp	r2, r3
 80134de:	d903      	bls.n	80134e8 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 80134e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 80134e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d204      	bcs.n	8013500 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 80134f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8013500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013508:	429a      	cmp	r2, r3
 801350a:	d905      	bls.n	8013518 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 801350c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013510:	4619      	mov	r1, r3
 8013512:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013514:	f000 f8ce 	bl	80136b4 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8013518:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801351a:	f001 fdad 	bl	8015078 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 801351e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013524:	647b      	str	r3, [r7, #68]	; 0x44
 8013526:	e007      	b.n	8013538 <_tx_mutex_get+0x1f8>
 8013528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801352a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	f383 8810 	msr	PRIMASK, r3
}
 8013532:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8013534:	231d      	movs	r3, #29
 8013536:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8013538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801353a:	4618      	mov	r0, r3
 801353c:	3748      	adds	r7, #72	; 0x48
 801353e:	46bd      	mov	sp, r7
 8013540:	bd80      	pop	{r7, pc}
 8013542:	bf00      	nop
 8013544:	24014ebc 	.word	0x24014ebc
 8013548:	24014f54 	.word	0x24014f54
 801354c:	08012fb9 	.word	0x08012fb9

08013550 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b092      	sub	sp, #72	; 0x48
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013558:	f3ef 8310 	mrs	r3, PRIMASK
 801355c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013560:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013562:	b672      	cpsid	i
    return(int_posture);
 8013564:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8013566:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	69db      	ldr	r3, [r3, #28]
 801356c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 801356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013570:	2b01      	cmp	r3, #1
 8013572:	d805      	bhi.n	8013580 <_tx_mutex_prioritize+0x30>
 8013574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013576:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013578:	69fb      	ldr	r3, [r7, #28]
 801357a:	f383 8810 	msr	PRIMASK, r3
}
 801357e:	e092      	b.n	80136a6 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8013580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013582:	2b02      	cmp	r3, #2
 8013584:	d114      	bne.n	80135b0 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	699b      	ldr	r3, [r3, #24]
 801358a:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 801358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013590:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8013592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801359a:	429a      	cmp	r2, r3
 801359c:	d202      	bcs.n	80135a4 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135a2:	619a      	str	r2, [r3, #24]
 80135a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135a6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135a8:	69bb      	ldr	r3, [r7, #24]
 80135aa:	f383 8810 	msr	PRIMASK, r3
}
 80135ae:	e07a      	b.n	80136a6 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	699b      	ldr	r3, [r3, #24]
 80135b4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 80135b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135b8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80135ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135be:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80135c0:	4b3b      	ldr	r3, [pc, #236]	; (80136b0 <_tx_mutex_prioritize+0x160>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	3301      	adds	r3, #1
 80135c6:	4a3a      	ldr	r2, [pc, #232]	; (80136b0 <_tx_mutex_prioritize+0x160>)
 80135c8:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 80135ca:	2300      	movs	r3, #0
 80135cc:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 80135ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d201      	bcs.n	80135de <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 80135da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80135de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135e0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	f383 8810 	msr	PRIMASK, r3
}
 80135e8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135ea:	f3ef 8310 	mrs	r3, PRIMASK
 80135ee:	617b      	str	r3, [r7, #20]
    return(posture);
 80135f0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80135f2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80135f4:	b672      	cpsid	i
    return(int_posture);
 80135f6:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80135f8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	699b      	ldr	r3, [r3, #24]
 80135fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013600:	429a      	cmp	r2, r3
 8013602:	d002      	beq.n	801360a <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8013604:	2301      	movs	r3, #1
 8013606:	633b      	str	r3, [r7, #48]	; 0x30
 8013608:	e006      	b.n	8013618 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	69db      	ldr	r3, [r3, #28]
 801360e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013610:	429a      	cmp	r2, r3
 8013612:	d001      	beq.n	8013618 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8013614:	2301      	movs	r3, #1
 8013616:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8013618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801361a:	2b00      	cmp	r3, #0
 801361c:	d103      	bne.n	8013626 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801361e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013622:	643b      	str	r3, [r7, #64]	; 0x40
 8013624:	e00c      	b.n	8013640 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	699b      	ldr	r3, [r3, #24]
 801362a:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	69db      	ldr	r3, [r3, #28]
 8013630:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8013632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013634:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8013636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801363a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 801363c:	2300      	movs	r3, #0
 801363e:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8013640:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013644:	429a      	cmp	r2, r3
 8013646:	d1c2      	bne.n	80135ce <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8013648:	4b19      	ldr	r3, [pc, #100]	; (80136b0 <_tx_mutex_prioritize+0x160>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	3b01      	subs	r3, #1
 801364e:	4a18      	ldr	r2, [pc, #96]	; (80136b0 <_tx_mutex_prioritize+0x160>)
 8013650:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8013652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013656:	429a      	cmp	r2, r3
 8013658:	d01d      	beq.n	8013696 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 801365a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801365e:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8013660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013664:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8013666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801366a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 801366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013670:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8013672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013676:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8013678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801367a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801367c:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 801367e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013682:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8013684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013686:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013688:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 801368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801368c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801368e:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013694:	619a      	str	r2, [r3, #24]
 8013696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013698:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	f383 8810 	msr	PRIMASK, r3
}
 80136a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80136a2:	f001 fbaf 	bl	8014e04 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80136a6:	2300      	movs	r3, #0
#endif
}
 80136a8:	4618      	mov	r0, r3
 80136aa:	3748      	adds	r7, #72	; 0x48
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	24014f54 	.word	0x24014f54

080136b4 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b090      	sub	sp, #64	; 0x40
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80136be:	f3ef 8310 	mrs	r3, PRIMASK
 80136c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80136c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80136c6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80136c8:	b672      	cpsid	i
    return(int_posture);
 80136ca:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80136cc:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d017      	beq.n	8013706 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	683a      	ldr	r2, [r7, #0]
 80136da:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80136e2:	683a      	ldr	r2, [r7, #0]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d905      	bls.n	80136f4 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80136f2:	e002      	b.n	80136fa <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	683a      	ldr	r2, [r7, #0]
 80136f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80136fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136fc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013700:	f383 8810 	msr	PRIMASK, r3
}
 8013704:	e089      	b.n	801381a <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8013706:	4b47      	ldr	r3, [pc, #284]	; (8013824 <_tx_mutex_priority_change+0x170>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013710:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8013712:	4b45      	ldr	r3, [pc, #276]	; (8013828 <_tx_mutex_priority_change+0x174>)
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	3302      	adds	r3, #2
 8013718:	4a43      	ldr	r2, [pc, #268]	; (8013828 <_tx_mutex_priority_change+0x174>)
 801371a:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	220e      	movs	r2, #14
 8013720:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2201      	movs	r2, #1
 8013726:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2200      	movs	r2, #0
 801372c:	64da      	str	r2, [r3, #76]	; 0x4c
 801372e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013730:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013732:	69bb      	ldr	r3, [r7, #24]
 8013734:	f383 8810 	msr	PRIMASK, r3
}
 8013738:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f001 fc9c 	bl	8015078 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013740:	f3ef 8310 	mrs	r3, PRIMASK
 8013744:	623b      	str	r3, [r7, #32]
    return(posture);
 8013746:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013748:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801374a:	b672      	cpsid	i
    return(int_posture);
 801374c:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 801374e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	683a      	ldr	r2, [r7, #0]
 8013754:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801375c:	683a      	ldr	r2, [r7, #0]
 801375e:	429a      	cmp	r2, r3
 8013760:	d905      	bls.n	801376e <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	63da      	str	r2, [r3, #60]	; 0x3c
 801376c:	e002      	b.n	8013774 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	683a      	ldr	r2, [r7, #0]
 8013772:	63da      	str	r2, [r3, #60]	; 0x3c
 8013774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013776:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	f383 8810 	msr	PRIMASK, r3
}
 801377e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f001 fb79 	bl	8014e78 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013786:	f3ef 8310 	mrs	r3, PRIMASK
 801378a:	617b      	str	r3, [r7, #20]
    return(posture);
 801378c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801378e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013790:	b672      	cpsid	i
    return(int_posture);
 8013792:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8013794:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8013796:	4b23      	ldr	r3, [pc, #140]	; (8013824 <_tx_mutex_priority_change+0x170>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 801379c:	687a      	ldr	r2, [r7, #4]
 801379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d034      	beq.n	801380e <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d130      	bne.n	801380e <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d811      	bhi.n	80137dc <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137bc:	429a      	cmp	r2, r3
 80137be:	d126      	bne.n	801380e <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 80137c0:	4a18      	ldr	r2, [pc, #96]	; (8013824 <_tx_mutex_priority_change+0x170>)
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 80137c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d21f      	bcs.n	801380e <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137d2:	4916      	ldr	r1, [pc, #88]	; (801382c <_tx_mutex_priority_change+0x178>)
 80137d4:	687a      	ldr	r2, [r7, #4]
 80137d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80137da:	e018      	b.n	801380e <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d212      	bcs.n	801380e <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80137ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d80c      	bhi.n	801380e <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80137f4:	4a0b      	ldr	r2, [pc, #44]	; (8013824 <_tx_mutex_priority_change+0x170>)
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 80137fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d205      	bcs.n	801380e <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013806:	4909      	ldr	r1, [pc, #36]	; (801382c <_tx_mutex_priority_change+0x178>)
 8013808:	687a      	ldr	r2, [r7, #4]
 801380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801380e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013810:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	f383 8810 	msr	PRIMASK, r3
}
 8013818:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801381a:	bf00      	nop
 801381c:	3740      	adds	r7, #64	; 0x40
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}
 8013822:	bf00      	nop
 8013824:	24014ec0 	.word	0x24014ec0
 8013828:	24014f54 	.word	0x24014f54
 801382c:	24014ed4 	.word	0x24014ed4

08013830 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b0a6      	sub	sp, #152	; 0x98
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8013838:	2320      	movs	r3, #32
 801383a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801383e:	f3ef 8310 	mrs	r3, PRIMASK
 8013842:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8013844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8013846:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8013848:	b672      	cpsid	i
    return(int_posture);
 801384a:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 801384c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	689b      	ldr	r3, [r3, #8]
 8013854:	2b00      	cmp	r3, #0
 8013856:	f000 81ff 	beq.w	8013c58 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	68db      	ldr	r3, [r3, #12]
 801385e:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8013860:	4ba3      	ldr	r3, [pc, #652]	; (8013af0 <_tx_mutex_put+0x2c0>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801386c:	429a      	cmp	r2, r3
 801386e:	d00d      	beq.n	801388c <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8013870:	4ba0      	ldr	r3, [pc, #640]	; (8013af4 <_tx_mutex_put+0x2c4>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d109      	bne.n	801388c <_tx_mutex_put+0x5c>
 8013878:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801387c:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801387e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013880:	f383 8810 	msr	PRIMASK, r3
}
 8013884:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8013886:	231e      	movs	r3, #30
 8013888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 801388c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013890:	2b20      	cmp	r3, #32
 8013892:	f040 81eb 	bne.w	8013c6c <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	689b      	ldr	r3, [r3, #8]
 801389a:	1e5a      	subs	r2, r3, #1
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	689b      	ldr	r3, [r3, #8]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d00a      	beq.n	80138be <_tx_mutex_put+0x8e>
 80138a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80138ac:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138b0:	f383 8810 	msr	PRIMASK, r3
}
 80138b4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 80138b6:	2300      	movs	r3, #0
 80138b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80138bc:	e1d6      	b.n	8013c6c <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 80138be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d10a      	bne.n	80138da <_tx_mutex_put+0xaa>
 80138c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80138c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138cc:	f383 8810 	msr	PRIMASK, r3
}
 80138d0:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 80138d2:	2300      	movs	r3, #0
 80138d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80138d8:	e1c8      	b.n	8013c6c <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 80138da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80138dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80138e0:	1e5a      	subs	r2, r3, #1
 80138e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80138e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 80138e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80138ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d104      	bne.n	80138fc <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 80138f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80138f4:	2200      	movs	r2, #0
 80138f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80138fa:	e019      	b.n	8013930 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013908:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 801390a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801390e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013910:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8013912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013914:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013918:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 801391a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801391c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013920:	687a      	ldr	r2, [r7, #4]
 8013922:	429a      	cmp	r2, r3
 8013924:	d104      	bne.n	8013930 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8013926:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013928:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801392c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	699b      	ldr	r3, [r3, #24]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d110      	bne.n	801395a <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	691b      	ldr	r3, [r3, #16]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d10c      	bne.n	801395a <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2200      	movs	r2, #0
 8013944:	60da      	str	r2, [r3, #12]
 8013946:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801394a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801394c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801394e:	f383 8810 	msr	PRIMASK, r3
}
 8013952:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8013954:	2300      	movs	r3, #0
 8013956:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 801395a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801395e:	2b20      	cmp	r3, #32
 8013960:	f040 8184 	bne.w	8013c6c <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8013964:	2300      	movs	r3, #0
 8013966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 801396a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	691b      	ldr	r3, [r3, #16]
 8013978:	2b01      	cmp	r3, #1
 801397a:	d155      	bne.n	8013a28 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801397c:	4b5d      	ldr	r3, [pc, #372]	; (8013af4 <_tx_mutex_put+0x2c4>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	3301      	adds	r3, #1
 8013982:	4a5c      	ldr	r2, [pc, #368]	; (8013af4 <_tx_mutex_put+0x2c4>)
 8013984:	6013      	str	r3, [r2, #0]
 8013986:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801398a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801398c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801398e:	f383 8810 	msr	PRIMASK, r3
}
 8013992:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013994:	2320      	movs	r3, #32
 8013996:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801399a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801399c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80139a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 80139a4:	e01f      	b.n	80139e6 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 80139a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80139aa:	691b      	ldr	r3, [r3, #16]
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d10b      	bne.n	80139c8 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 80139b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80139b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80139ba:	429a      	cmp	r2, r3
 80139bc:	d904      	bls.n	80139c8 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 80139be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80139c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 80139c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80139cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 80139d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80139d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80139d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80139dc:	429a      	cmp	r2, r3
 80139de:	d102      	bne.n	80139e6 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 80139e0:	2300      	movs	r3, #0
 80139e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 80139e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d1db      	bne.n	80139a6 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80139ee:	f3ef 8310 	mrs	r3, PRIMASK
 80139f2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80139f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80139f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80139f8:	b672      	cpsid	i
    return(int_posture);
 80139fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 80139fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8013a00:	4b3c      	ldr	r3, [pc, #240]	; (8013af4 <_tx_mutex_put+0x2c4>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	3b01      	subs	r3, #1
 8013a06:	4a3b      	ldr	r2, [pc, #236]	; (8013af4 <_tx_mutex_put+0x2c4>)
 8013a08:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8013a0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013a0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013a10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8013a14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d203      	bcs.n	8013a28 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8013a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013a24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	69db      	ldr	r3, [r3, #28]
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	d920      	bls.n	8013a72 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	691b      	ldr	r3, [r3, #16]
 8013a34:	2b01      	cmp	r3, #1
 8013a36:	d11c      	bne.n	8013a72 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8013a38:	4b2e      	ldr	r3, [pc, #184]	; (8013af4 <_tx_mutex_put+0x2c4>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	3301      	adds	r3, #1
 8013a3e:	4a2d      	ldr	r2, [pc, #180]	; (8013af4 <_tx_mutex_put+0x2c4>)
 8013a40:	6013      	str	r3, [r2, #0]
 8013a42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013a46:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a4a:	f383 8810 	msr	PRIMASK, r3
}
 8013a4e:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f7ff fd7d 	bl	8013550 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a56:	f3ef 8310 	mrs	r3, PRIMASK
 8013a5a:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8013a5e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8013a60:	b672      	cpsid	i
    return(int_posture);
 8013a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8013a64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8013a68:	4b22      	ldr	r3, [pc, #136]	; (8013af4 <_tx_mutex_put+0x2c4>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	3b01      	subs	r3, #1
 8013a6e:	4a21      	ldr	r2, [pc, #132]	; (8013af4 <_tx_mutex_put+0x2c4>)
 8013a70:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	699b      	ldr	r3, [r3, #24]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d13e      	bne.n	8013af8 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013a7a:	4b1e      	ldr	r3, [pc, #120]	; (8013af4 <_tx_mutex_put+0x2c4>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	3301      	adds	r3, #1
 8013a80:	4a1c      	ldr	r2, [pc, #112]	; (8013af4 <_tx_mutex_put+0x2c4>)
 8013a82:	6013      	str	r3, [r2, #0]
 8013a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a8c:	f383 8810 	msr	PRIMASK, r3
}
 8013a90:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2220      	movs	r2, #32
 8013a96:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	68db      	ldr	r3, [r3, #12]
 8013a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a9e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d006      	beq.n	8013ab4 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	68db      	ldr	r3, [r3, #12]
 8013aaa:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7ff fe00 	bl	80136b4 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8013ab8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013abc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013abe:	b672      	cpsid	i
    return(int_posture);
 8013ac0:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8013ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8013ac6:	4b0b      	ldr	r3, [pc, #44]	; (8013af4 <_tx_mutex_put+0x2c4>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	3b01      	subs	r3, #1
 8013acc:	4a09      	ldr	r2, [pc, #36]	; (8013af4 <_tx_mutex_put+0x2c4>)
 8013ace:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	60da      	str	r2, [r3, #12]
 8013ad6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013ada:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ade:	f383 8810 	msr	PRIMASK, r3
}
 8013ae2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8013ae4:	f001 f98e 	bl	8014e04 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013aee:	e0bd      	b.n	8013c6c <_tx_mutex_put+0x43c>
 8013af0:	24014ebc 	.word	0x24014ebc
 8013af4:	24014f54 	.word	0x24014f54
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	699b      	ldr	r3, [r3, #24]
 8013afc:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	691b      	ldr	r3, [r3, #16]
 8013b02:	2b01      	cmp	r3, #1
 8013b04:	d10a      	bne.n	8013b1c <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	68db      	ldr	r3, [r3, #12]
 8013b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8013b0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2220      	movs	r2, #32
 8013b1a:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8013b1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013b1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013b22:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8013b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d10a      	bne.n	8013b40 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8013b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013b2c:	687a      	ldr	r2, [r7, #4]
 8013b2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	687a      	ldr	r2, [r7, #4]
 8013b36:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	687a      	ldr	r2, [r7, #4]
 8013b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8013b3e:	e016      	b.n	8013b6e <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8013b40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013b42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013b46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8013b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b50:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8013b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8013b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013b64:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013b6c:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8013b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b70:	1c5a      	adds	r2, r3, #1
 8013b72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013b74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013b82:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	69db      	ldr	r3, [r3, #28]
 8013b88:	1e5a      	subs	r2, r3, #1
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	69db      	ldr	r3, [r3, #28]
 8013b92:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8013b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d103      	bne.n	8013ba2 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	619a      	str	r2, [r3, #24]
 8013ba0:	e00e      	b.n	8013bc0 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8013ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ba6:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013bac:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8013bae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013bb2:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8013bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013bb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013bb8:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8013bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013bbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013bbe:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013bc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013bc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013bc8:	2200      	movs	r2, #0
 8013bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013bce:	4b2a      	ldr	r3, [pc, #168]	; (8013c78 <_tx_mutex_put+0x448>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	3301      	adds	r3, #1
 8013bd4:	4a28      	ldr	r2, [pc, #160]	; (8013c78 <_tx_mutex_put+0x448>)
 8013bd6:	6013      	str	r3, [r2, #0]
 8013bd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013bdc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013bde:	69fb      	ldr	r3, [r7, #28]
 8013be0:	f383 8810 	msr	PRIMASK, r3
}
 8013be4:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	691b      	ldr	r3, [r3, #16]
 8013bea:	2b01      	cmp	r3, #1
 8013bec:	d12d      	bne.n	8013c4a <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	69db      	ldr	r3, [r3, #28]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d01c      	beq.n	8013c30 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f7ff fcaa 	bl	8013550 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8013c00:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013c02:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013c04:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013c06:	b672      	cpsid	i
    return(int_posture);
 8013c08:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8013c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	699b      	ldr	r3, [r3, #24]
 8013c12:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8013c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d003      	beq.n	8013c22 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8013c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	629a      	str	r2, [r3, #40]	; 0x28
 8013c22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c26:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	f383 8810 	msr	PRIMASK, r3
}
 8013c2e:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8013c30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c36:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d005      	beq.n	8013c4a <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8013c3e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8013c42:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8013c46:	f7ff fd35 	bl	80136b4 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8013c4a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013c4c:	f001 f914 	bl	8014e78 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8013c50:	2300      	movs	r3, #0
 8013c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013c56:	e009      	b.n	8013c6c <_tx_mutex_put+0x43c>
 8013c58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c5c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	f383 8810 	msr	PRIMASK, r3
}
 8013c64:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8013c66:	231e      	movs	r3, #30
 8013c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8013c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	3798      	adds	r7, #152	; 0x98
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	24014f54 	.word	0x24014f54

08013c7c <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b08e      	sub	sp, #56	; 0x38
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013c86:	f3ef 8310 	mrs	r3, PRIMASK
 8013c8a:	623b      	str	r3, [r7, #32]
    return(posture);
 8013c8c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013c8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013c90:	b672      	cpsid	i
    return(int_posture);
 8013c92:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8013c94:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c9a:	4a37      	ldr	r2, [pc, #220]	; (8013d78 <_tx_queue_cleanup+0xfc>)
 8013c9c:	4293      	cmp	r3, r2
 8013c9e:	d161      	bne.n	8013d64 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013ca6:	683a      	ldr	r2, [r7, #0]
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d15b      	bne.n	8013d64 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cb0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8013cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d055      	beq.n	8013d64 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8013cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	4a2f      	ldr	r2, [pc, #188]	; (8013d7c <_tx_queue_cleanup+0x100>)
 8013cbe:	4293      	cmp	r3, r2
 8013cc0:	d150      	bne.n	8013d64 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8013cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d04c      	beq.n	8013d64 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8013cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cd4:	1e5a      	subs	r2, r3, #1
 8013cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd8:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8013cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cde:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d103      	bne.n	8013cee <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8013ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce8:	2200      	movs	r2, #0
 8013cea:	629a      	str	r2, [r3, #40]	; 0x28
 8013cec:	e013      	b.n	8013d16 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cf2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cf8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cfe:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d04:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8013d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d0a:	687a      	ldr	r2, [r7, #4]
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d102      	bne.n	8013d16 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8013d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d14:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d1a:	2b05      	cmp	r3, #5
 8013d1c:	d122      	bne.n	8013d64 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8013d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d20:	691b      	ldr	r3, [r3, #16]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d004      	beq.n	8013d30 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	220b      	movs	r2, #11
 8013d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8013d2e:	e003      	b.n	8013d38 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	220a      	movs	r2, #10
 8013d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013d38:	4b11      	ldr	r3, [pc, #68]	; (8013d80 <_tx_queue_cleanup+0x104>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	3301      	adds	r3, #1
 8013d3e:	4a10      	ldr	r2, [pc, #64]	; (8013d80 <_tx_queue_cleanup+0x104>)
 8013d40:	6013      	str	r3, [r2, #0]
 8013d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d44:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	f383 8810 	msr	PRIMASK, r3
}
 8013d4c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f001 f892 	bl	8014e78 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d54:	f3ef 8310 	mrs	r3, PRIMASK
 8013d58:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013d5a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013d5c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d5e:	b672      	cpsid	i
    return(int_posture);
 8013d60:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013d62:	637b      	str	r3, [r7, #52]	; 0x34
 8013d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d66:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	f383 8810 	msr	PRIMASK, r3
}
 8013d6e:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013d70:	bf00      	nop
 8013d72:	3738      	adds	r7, #56	; 0x38
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}
 8013d78:	08013c7d 	.word	0x08013c7d
 8013d7c:	51554555 	.word	0x51554555
 8013d80:	24014f54 	.word	0x24014f54

08013d84 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b08c      	sub	sp, #48	; 0x30
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	60f8      	str	r0, [r7, #12]
 8013d8c:	60b9      	str	r1, [r7, #8]
 8013d8e:	607a      	str	r2, [r7, #4]
 8013d90:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8013d92:	2238      	movs	r2, #56	; 0x38
 8013d94:	2100      	movs	r1, #0
 8013d96:	68f8      	ldr	r0, [r7, #12]
 8013d98:	f002 fa7c 	bl	8016294 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	68ba      	ldr	r2, [r7, #8]
 8013da0:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	687a      	ldr	r2, [r7, #4]
 8013da6:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	009b      	lsls	r3, r3, #2
 8013dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8013db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 8013db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013db6:	687a      	ldr	r2, [r7, #4]
 8013db8:	fb02 f303 	mul.w	r3, r2, r3
 8013dbc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	683a      	ldr	r2, [r7, #0]
 8013dc2:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	699a      	ldr	r2, [r3, #24]
 8013dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dca:	009b      	lsls	r3, r3, #2
 8013dcc:	441a      	add	r2, r3
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	683a      	ldr	r2, [r7, #0]
 8013dd6:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	683a      	ldr	r2, [r7, #0]
 8013ddc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013de2:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013de8:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013dea:	f3ef 8310 	mrs	r3, PRIMASK
 8013dee:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013df0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013df2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013df4:	b672      	cpsid	i
    return(int_posture);
 8013df6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8013df8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	4a18      	ldr	r2, [pc, #96]	; (8013e60 <_tx_queue_create+0xdc>)
 8013dfe:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8013e00:	4b18      	ldr	r3, [pc, #96]	; (8013e64 <_tx_queue_create+0xe0>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d109      	bne.n	8013e1c <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8013e08:	4a17      	ldr	r2, [pc, #92]	; (8013e68 <_tx_queue_create+0xe4>)
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	68fa      	ldr	r2, [r7, #12]
 8013e12:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	68fa      	ldr	r2, [r7, #12]
 8013e18:	635a      	str	r2, [r3, #52]	; 0x34
 8013e1a:	e011      	b.n	8013e40 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8013e1c:	4b12      	ldr	r3, [pc, #72]	; (8013e68 <_tx_queue_create+0xe4>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8013e22:	6a3b      	ldr	r3, [r7, #32]
 8013e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e26:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8013e28:	6a3b      	ldr	r3, [r7, #32]
 8013e2a:	68fa      	ldr	r2, [r7, #12]
 8013e2c:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8013e2e:	69fb      	ldr	r3, [r7, #28]
 8013e30:	68fa      	ldr	r2, [r7, #12]
 8013e32:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	69fa      	ldr	r2, [r7, #28]
 8013e38:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	6a3a      	ldr	r2, [r7, #32]
 8013e3e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8013e40:	4b08      	ldr	r3, [pc, #32]	; (8013e64 <_tx_queue_create+0xe0>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	3301      	adds	r3, #1
 8013e46:	4a07      	ldr	r2, [pc, #28]	; (8013e64 <_tx_queue_create+0xe0>)
 8013e48:	6013      	str	r3, [r2, #0]
 8013e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e4c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	f383 8810 	msr	PRIMASK, r3
}
 8013e54:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013e56:	2300      	movs	r3, #0
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3730      	adds	r7, #48	; 0x30
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	51554555 	.word	0x51554555
 8013e64:	24014e90 	.word	0x24014e90
 8013e68:	24014e8c 	.word	0x24014e8c

08013e6c <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b096      	sub	sp, #88	; 0x58
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	60f8      	str	r0, [r7, #12]
 8013e74:	60b9      	str	r1, [r7, #8]
 8013e76:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8013e80:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8013e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8013e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e86:	b672      	cpsid	i
    return(int_posture);
 8013e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8013e8a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e90:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	691b      	ldr	r3, [r3, #16]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	f000 8136 	beq.w	8014108 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8013e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d13c      	bne.n	8013f1c <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	6a1b      	ldr	r3, [r3, #32]
 8013ea6:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	689b      	ldr	r3, [r3, #8]
 8013eb0:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013eb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013eb4:	1d13      	adds	r3, r2, #4
 8013eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8013eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013eba:	1d19      	adds	r1, r3, #4
 8013ebc:	6539      	str	r1, [r7, #80]	; 0x50
 8013ebe:	6812      	ldr	r2, [r2, #0]
 8013ec0:	601a      	str	r2, [r3, #0]
 8013ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ec4:	2b01      	cmp	r3, #1
 8013ec6:	d90e      	bls.n	8013ee6 <_tx_queue_receive+0x7a>
 8013ec8:	e007      	b.n	8013eda <_tx_queue_receive+0x6e>
 8013eca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ecc:	1d13      	adds	r3, r2, #4
 8013ece:	657b      	str	r3, [r7, #84]	; 0x54
 8013ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ed2:	1d19      	adds	r1, r3, #4
 8013ed4:	6539      	str	r1, [r7, #80]	; 0x50
 8013ed6:	6812      	ldr	r2, [r2, #0]
 8013ed8:	601a      	str	r2, [r3, #0]
 8013eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013edc:	3b01      	subs	r3, #1
 8013ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d1f1      	bne.n	8013eca <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	69db      	ldr	r3, [r3, #28]
 8013eea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013eec:	429a      	cmp	r2, r3
 8013eee:	d102      	bne.n	8013ef6 <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	699b      	ldr	r3, [r3, #24]
 8013ef4:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013efa:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	695b      	ldr	r3, [r3, #20]
 8013f00:	1c5a      	adds	r2, r3, #1
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	691b      	ldr	r3, [r3, #16]
 8013f0a:	1e5a      	subs	r2, r3, #1
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	611a      	str	r2, [r3, #16]
 8013f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f12:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f16:	f383 8810 	msr	PRIMASK, r3
}
 8013f1a:	e163      	b.n	80141e4 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f20:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8013f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f28:	2b01      	cmp	r3, #1
 8013f2a:	d153      	bne.n	8013fd4 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8013f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f30:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	689b      	ldr	r3, [r3, #8]
 8013f3a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013f3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013f3e:	1d13      	adds	r3, r2, #4
 8013f40:	657b      	str	r3, [r7, #84]	; 0x54
 8013f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f44:	1d19      	adds	r1, r3, #4
 8013f46:	6539      	str	r1, [r7, #80]	; 0x50
 8013f48:	6812      	ldr	r2, [r2, #0]
 8013f4a:	601a      	str	r2, [r3, #0]
 8013f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f4e:	2b01      	cmp	r3, #1
 8013f50:	d90e      	bls.n	8013f70 <_tx_queue_receive+0x104>
 8013f52:	e007      	b.n	8013f64 <_tx_queue_receive+0xf8>
 8013f54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013f56:	1d13      	adds	r3, r2, #4
 8013f58:	657b      	str	r3, [r7, #84]	; 0x54
 8013f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f5c:	1d19      	adds	r1, r3, #4
 8013f5e:	6539      	str	r1, [r7, #80]	; 0x50
 8013f60:	6812      	ldr	r2, [r2, #0]
 8013f62:	601a      	str	r2, [r3, #0]
 8013f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f66:	3b01      	subs	r3, #1
 8013f68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d1f1      	bne.n	8013f54 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8013f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f72:	3b01      	subs	r3, #1
 8013f74:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8013f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d103      	bne.n	8013f84 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	629a      	str	r2, [r3, #40]	; 0x28
 8013f82:	e00e      	b.n	8013fa2 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8013f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f88:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f8e:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8013f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f94:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8013f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f9a:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8013f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013fa0:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013fa6:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013faa:	2200      	movs	r2, #0
 8013fac:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8013fb6:	4b8e      	ldr	r3, [pc, #568]	; (80141f0 <_tx_queue_receive+0x384>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	3301      	adds	r3, #1
 8013fbc:	4a8c      	ldr	r2, [pc, #560]	; (80141f0 <_tx_queue_receive+0x384>)
 8013fbe:	6013      	str	r3, [r2, #0]
 8013fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fc2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc6:	f383 8810 	msr	PRIMASK, r3
}
 8013fca:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8013fcc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013fce:	f000 ff53 	bl	8014e78 <_tx_thread_system_resume>
 8013fd2:	e107      	b.n	80141e4 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	6a1b      	ldr	r3, [r3, #32]
 8013fd8:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	689b      	ldr	r3, [r3, #8]
 8013fe2:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013fe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013fe6:	1d13      	adds	r3, r2, #4
 8013fe8:	657b      	str	r3, [r7, #84]	; 0x54
 8013fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fec:	1d19      	adds	r1, r3, #4
 8013fee:	6539      	str	r1, [r7, #80]	; 0x50
 8013ff0:	6812      	ldr	r2, [r2, #0]
 8013ff2:	601a      	str	r2, [r3, #0]
 8013ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ff6:	2b01      	cmp	r3, #1
 8013ff8:	d90e      	bls.n	8014018 <_tx_queue_receive+0x1ac>
 8013ffa:	e007      	b.n	801400c <_tx_queue_receive+0x1a0>
 8013ffc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ffe:	1d13      	adds	r3, r2, #4
 8014000:	657b      	str	r3, [r7, #84]	; 0x54
 8014002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014004:	1d19      	adds	r1, r3, #4
 8014006:	6539      	str	r1, [r7, #80]	; 0x50
 8014008:	6812      	ldr	r2, [r2, #0]
 801400a:	601a      	str	r2, [r3, #0]
 801400c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801400e:	3b01      	subs	r3, #1
 8014010:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014014:	2b00      	cmp	r3, #0
 8014016:	d1f1      	bne.n	8013ffc <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	69db      	ldr	r3, [r3, #28]
 801401c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801401e:	429a      	cmp	r2, r3
 8014020:	d102      	bne.n	8014028 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	699b      	ldr	r3, [r3, #24]
 8014026:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801402c:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 801402e:	4b70      	ldr	r3, [pc, #448]	; (80141f0 <_tx_queue_receive+0x384>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	3301      	adds	r3, #1
 8014034:	4a6e      	ldr	r2, [pc, #440]	; (80141f0 <_tx_queue_receive+0x384>)
 8014036:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8014038:	4b6d      	ldr	r3, [pc, #436]	; (80141f0 <_tx_queue_receive+0x384>)
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	3b01      	subs	r3, #1
 801403e:	4a6c      	ldr	r2, [pc, #432]	; (80141f0 <_tx_queue_receive+0x384>)
 8014040:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014046:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801404c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	689b      	ldr	r3, [r3, #8]
 8014052:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014054:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014056:	1d13      	adds	r3, r2, #4
 8014058:	657b      	str	r3, [r7, #84]	; 0x54
 801405a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801405c:	1d19      	adds	r1, r3, #4
 801405e:	6539      	str	r1, [r7, #80]	; 0x50
 8014060:	6812      	ldr	r2, [r2, #0]
 8014062:	601a      	str	r2, [r3, #0]
 8014064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014066:	2b01      	cmp	r3, #1
 8014068:	d90e      	bls.n	8014088 <_tx_queue_receive+0x21c>
 801406a:	e007      	b.n	801407c <_tx_queue_receive+0x210>
 801406c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801406e:	1d13      	adds	r3, r2, #4
 8014070:	657b      	str	r3, [r7, #84]	; 0x54
 8014072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014074:	1d19      	adds	r1, r3, #4
 8014076:	6539      	str	r1, [r7, #80]	; 0x50
 8014078:	6812      	ldr	r2, [r2, #0]
 801407a:	601a      	str	r2, [r3, #0]
 801407c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801407e:	3b01      	subs	r3, #1
 8014080:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014084:	2b00      	cmp	r3, #0
 8014086:	d1f1      	bne.n	801406c <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	69db      	ldr	r3, [r3, #28]
 801408c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801408e:	429a      	cmp	r2, r3
 8014090:	d102      	bne.n	8014098 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	699b      	ldr	r3, [r3, #24]
 8014096:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801409c:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140a2:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80140a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80140a6:	3b01      	subs	r3, #1
 80140a8:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 80140aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d103      	bne.n	80140b8 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	2200      	movs	r2, #0
 80140b4:	629a      	str	r2, [r3, #40]	; 0x28
 80140b6:	e00e      	b.n	80140d6 <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80140b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140bc:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140c2:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80140c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140c8:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 80140ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140ce:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 80140d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140d4:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80140da:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80140dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140de:	2200      	movs	r2, #0
 80140e0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80140e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140e4:	2200      	movs	r2, #0
 80140e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80140ea:	4b41      	ldr	r3, [pc, #260]	; (80141f0 <_tx_queue_receive+0x384>)
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	3301      	adds	r3, #1
 80140f0:	4a3f      	ldr	r2, [pc, #252]	; (80141f0 <_tx_queue_receive+0x384>)
 80140f2:	6013      	str	r3, [r2, #0]
 80140f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140f6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80140f8:	6a3b      	ldr	r3, [r7, #32]
 80140fa:	f383 8810 	msr	PRIMASK, r3
}
 80140fe:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8014100:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014102:	f000 feb9 	bl	8014e78 <_tx_thread_system_resume>
 8014106:	e06d      	b.n	80141e4 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d062      	beq.n	80141d4 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801410e:	4b38      	ldr	r3, [pc, #224]	; (80141f0 <_tx_queue_receive+0x384>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d008      	beq.n	8014128 <_tx_queue_receive+0x2bc>
 8014116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014118:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801411a:	69fb      	ldr	r3, [r7, #28]
 801411c:	f383 8810 	msr	PRIMASK, r3
}
 8014120:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8014122:	230a      	movs	r3, #10
 8014124:	64bb      	str	r3, [r7, #72]	; 0x48
 8014126:	e05d      	b.n	80141e4 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014128:	4b32      	ldr	r3, [pc, #200]	; (80141f4 <_tx_queue_receive+0x388>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 801412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014130:	4a31      	ldr	r2, [pc, #196]	; (80141f8 <_tx_queue_receive+0x38c>)
 8014132:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8014134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014136:	68fa      	ldr	r2, [r7, #12]
 8014138:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 801413a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801413c:	68ba      	ldr	r2, [r7, #8]
 801413e:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8014140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014142:	2200      	movs	r2, #0
 8014144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8014148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801414a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801414e:	1c5a      	adds	r2, r3, #1
 8014150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014152:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8014156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014158:	2b00      	cmp	r3, #0
 801415a:	d109      	bne.n	8014170 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014160:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8014162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014166:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8014168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801416a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801416c:	675a      	str	r2, [r3, #116]	; 0x74
 801416e:	e011      	b.n	8014194 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014174:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8014176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801417a:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801417e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014180:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8014182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014186:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801418a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801418c:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014192:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8014194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014196:	1c5a      	adds	r2, r3, #1
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 801419c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801419e:	2205      	movs	r2, #5
 80141a0:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80141a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141a4:	2201      	movs	r2, #1
 80141a6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80141a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80141ae:	4b10      	ldr	r3, [pc, #64]	; (80141f0 <_tx_queue_receive+0x384>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	3301      	adds	r3, #1
 80141b4:	4a0e      	ldr	r2, [pc, #56]	; (80141f0 <_tx_queue_receive+0x384>)
 80141b6:	6013      	str	r3, [r2, #0]
 80141b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141ba:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80141bc:	69bb      	ldr	r3, [r7, #24]
 80141be:	f383 8810 	msr	PRIMASK, r3
}
 80141c2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80141c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80141c6:	f000 ff57 	bl	8015078 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80141ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80141d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80141d2:	e007      	b.n	80141e4 <_tx_queue_receive+0x378>
 80141d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141d6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	f383 8810 	msr	PRIMASK, r3
}
 80141de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 80141e0:	230a      	movs	r3, #10
 80141e2:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 80141e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3758      	adds	r7, #88	; 0x58
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	24014f54 	.word	0x24014f54
 80141f4:	24014ebc 	.word	0x24014ebc
 80141f8:	08013c7d 	.word	0x08013c7d

080141fc <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b094      	sub	sp, #80	; 0x50
 8014200:	af00      	add	r7, sp, #0
 8014202:	60f8      	str	r0, [r7, #12]
 8014204:	60b9      	str	r1, [r7, #8]
 8014206:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014208:	2300      	movs	r3, #0
 801420a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801420c:	f3ef 8310 	mrs	r3, PRIMASK
 8014210:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014212:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014214:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014216:	b672      	cpsid	i
    return(int_posture);
 8014218:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 801421a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014220:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	695b      	ldr	r3, [r3, #20]
 8014226:	2b00      	cmp	r3, #0
 8014228:	f000 809b 	beq.w	8014362 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 801422c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801422e:	2b00      	cmp	r3, #0
 8014230:	d13c      	bne.n	80142ac <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	695b      	ldr	r3, [r3, #20]
 8014236:	1e5a      	subs	r2, r3, #1
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	691b      	ldr	r3, [r3, #16]
 8014240:	1c5a      	adds	r2, r3, #1
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801424e:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	689b      	ldr	r3, [r3, #8]
 8014254:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014258:	1d13      	adds	r3, r2, #4
 801425a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801425c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801425e:	1d19      	adds	r1, r3, #4
 8014260:	64b9      	str	r1, [r7, #72]	; 0x48
 8014262:	6812      	ldr	r2, [r2, #0]
 8014264:	601a      	str	r2, [r3, #0]
 8014266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014268:	2b01      	cmp	r3, #1
 801426a:	d90e      	bls.n	801428a <_tx_queue_send+0x8e>
 801426c:	e007      	b.n	801427e <_tx_queue_send+0x82>
 801426e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014270:	1d13      	adds	r3, r2, #4
 8014272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014276:	1d19      	adds	r1, r3, #4
 8014278:	64b9      	str	r1, [r7, #72]	; 0x48
 801427a:	6812      	ldr	r2, [r2, #0]
 801427c:	601a      	str	r2, [r3, #0]
 801427e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014280:	3b01      	subs	r3, #1
 8014282:	647b      	str	r3, [r7, #68]	; 0x44
 8014284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014286:	2b00      	cmp	r3, #0
 8014288:	d1f1      	bne.n	801426e <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	69db      	ldr	r3, [r3, #28]
 801428e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014290:	429a      	cmp	r2, r3
 8014292:	d102      	bne.n	801429a <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	699b      	ldr	r3, [r3, #24]
 8014298:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801429e:	625a      	str	r2, [r3, #36]	; 0x24
 80142a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142a2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80142a4:	6a3b      	ldr	r3, [r7, #32]
 80142a6:	f383 8810 	msr	PRIMASK, r3
}
 80142aa:	e0c8      	b.n	801443e <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142b0:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 80142b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142b4:	3b01      	subs	r3, #1
 80142b6:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 80142b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d103      	bne.n	80142c6 <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	2200      	movs	r2, #0
 80142c2:	629a      	str	r2, [r3, #40]	; 0x28
 80142c4:	e012      	b.n	80142ec <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80142c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80142ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142d2:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142d8:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80142da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142de:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 80142e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142e4:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 80142e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142ea:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142f0:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80142f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142f4:	2200      	movs	r2, #0
 80142f6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80142fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014300:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	689b      	ldr	r3, [r3, #8]
 8014306:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801430a:	1d13      	adds	r3, r2, #4
 801430c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801430e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014310:	1d19      	adds	r1, r3, #4
 8014312:	64b9      	str	r1, [r7, #72]	; 0x48
 8014314:	6812      	ldr	r2, [r2, #0]
 8014316:	601a      	str	r2, [r3, #0]
 8014318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801431a:	2b01      	cmp	r3, #1
 801431c:	d90e      	bls.n	801433c <_tx_queue_send+0x140>
 801431e:	e007      	b.n	8014330 <_tx_queue_send+0x134>
 8014320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014322:	1d13      	adds	r3, r2, #4
 8014324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014328:	1d19      	adds	r1, r3, #4
 801432a:	64b9      	str	r1, [r7, #72]	; 0x48
 801432c:	6812      	ldr	r2, [r2, #0]
 801432e:	601a      	str	r2, [r3, #0]
 8014330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014332:	3b01      	subs	r3, #1
 8014334:	647b      	str	r3, [r7, #68]	; 0x44
 8014336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014338:	2b00      	cmp	r3, #0
 801433a:	d1f1      	bne.n	8014320 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801433c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801433e:	2200      	movs	r2, #0
 8014340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014344:	4b40      	ldr	r3, [pc, #256]	; (8014448 <_tx_queue_send+0x24c>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	3301      	adds	r3, #1
 801434a:	4a3f      	ldr	r2, [pc, #252]	; (8014448 <_tx_queue_send+0x24c>)
 801434c:	6013      	str	r3, [r2, #0]
 801434e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014350:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014352:	69fb      	ldr	r3, [r7, #28]
 8014354:	f383 8810 	msr	PRIMASK, r3
}
 8014358:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 801435a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801435c:	f000 fd8c 	bl	8014e78 <_tx_thread_system_resume>
 8014360:	e06d      	b.n	801443e <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d062      	beq.n	801442e <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014368:	4b37      	ldr	r3, [pc, #220]	; (8014448 <_tx_queue_send+0x24c>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d008      	beq.n	8014382 <_tx_queue_send+0x186>
 8014370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014372:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014374:	69bb      	ldr	r3, [r7, #24]
 8014376:	f383 8810 	msr	PRIMASK, r3
}
 801437a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 801437c:	230b      	movs	r3, #11
 801437e:	643b      	str	r3, [r7, #64]	; 0x40
 8014380:	e05d      	b.n	801443e <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014382:	4b32      	ldr	r3, [pc, #200]	; (801444c <_tx_queue_send+0x250>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8014388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801438a:	4a31      	ldr	r2, [pc, #196]	; (8014450 <_tx_queue_send+0x254>)
 801438c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 801438e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014390:	68fa      	ldr	r2, [r7, #12]
 8014392:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8014394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014396:	68ba      	ldr	r2, [r7, #8]
 8014398:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 801439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801439c:	2200      	movs	r2, #0
 801439e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80143a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80143a8:	1c5a      	adds	r2, r3, #1
 80143aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 80143b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d109      	bne.n	80143ca <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143ba:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80143bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143c0:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80143c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143c6:	675a      	str	r2, [r3, #116]	; 0x74
 80143c8:	e011      	b.n	80143ee <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143ce:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80143d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143d4:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80143d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143da:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80143dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80143e0:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80143e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143e6:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80143e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143ec:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80143ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143f0:	1c5a      	adds	r2, r3, #1
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80143f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143f8:	2205      	movs	r2, #5
 80143fa:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80143fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143fe:	2201      	movs	r2, #1
 8014400:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014404:	687a      	ldr	r2, [r7, #4]
 8014406:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014408:	4b0f      	ldr	r3, [pc, #60]	; (8014448 <_tx_queue_send+0x24c>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	3301      	adds	r3, #1
 801440e:	4a0e      	ldr	r2, [pc, #56]	; (8014448 <_tx_queue_send+0x24c>)
 8014410:	6013      	str	r3, [r2, #0]
 8014412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014414:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	f383 8810 	msr	PRIMASK, r3
}
 801441c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801441e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014420:	f000 fe2a 	bl	8015078 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801442a:	643b      	str	r3, [r7, #64]	; 0x40
 801442c:	e007      	b.n	801443e <_tx_queue_send+0x242>
 801442e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014430:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	f383 8810 	msr	PRIMASK, r3
}
 8014438:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 801443a:	230b      	movs	r3, #11
 801443c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 801443e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8014440:	4618      	mov	r0, r3
 8014442:	3750      	adds	r7, #80	; 0x50
 8014444:	46bd      	mov	sp, r7
 8014446:	bd80      	pop	{r7, pc}
 8014448:	24014f54 	.word	0x24014f54
 801444c:	24014ebc 	.word	0x24014ebc
 8014450:	08013c7d 	.word	0x08013c7d

08014454 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b08e      	sub	sp, #56	; 0x38
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801445e:	f3ef 8310 	mrs	r3, PRIMASK
 8014462:	623b      	str	r3, [r7, #32]
    return(posture);
 8014464:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014466:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014468:	b672      	cpsid	i
    return(int_posture);
 801446a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 801446c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014472:	4a33      	ldr	r2, [pc, #204]	; (8014540 <_tx_semaphore_cleanup+0xec>)
 8014474:	4293      	cmp	r3, r2
 8014476:	d158      	bne.n	801452a <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801447e:	683a      	ldr	r2, [r7, #0]
 8014480:	429a      	cmp	r2, r3
 8014482:	d152      	bne.n	801452a <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014488:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 801448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801448c:	2b00      	cmp	r3, #0
 801448e:	d04c      	beq.n	801452a <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8014490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	4a2b      	ldr	r2, [pc, #172]	; (8014544 <_tx_semaphore_cleanup+0xf0>)
 8014496:	4293      	cmp	r3, r2
 8014498:	d147      	bne.n	801452a <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 801449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801449c:	691b      	ldr	r3, [r3, #16]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d043      	beq.n	801452a <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2200      	movs	r2, #0
 80144a6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80144a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144aa:	691b      	ldr	r3, [r3, #16]
 80144ac:	1e5a      	subs	r2, r3, #1
 80144ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b0:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80144b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b4:	691b      	ldr	r3, [r3, #16]
 80144b6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80144b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d103      	bne.n	80144c6 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80144be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144c0:	2200      	movs	r2, #0
 80144c2:	60da      	str	r2, [r3, #12]
 80144c4:	e013      	b.n	80144ee <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144ca:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144d0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80144d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144d6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80144d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144dc:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 80144de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144e0:	68db      	ldr	r3, [r3, #12]
 80144e2:	687a      	ldr	r2, [r7, #4]
 80144e4:	429a      	cmp	r2, r3
 80144e6:	d102      	bne.n	80144ee <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80144e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144ec:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144f2:	2b06      	cmp	r3, #6
 80144f4:	d119      	bne.n	801452a <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	220d      	movs	r2, #13
 80144fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80144fe:	4b12      	ldr	r3, [pc, #72]	; (8014548 <_tx_semaphore_cleanup+0xf4>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	3301      	adds	r3, #1
 8014504:	4a10      	ldr	r2, [pc, #64]	; (8014548 <_tx_semaphore_cleanup+0xf4>)
 8014506:	6013      	str	r3, [r2, #0]
 8014508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801450a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	f383 8810 	msr	PRIMASK, r3
}
 8014512:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f000 fcaf 	bl	8014e78 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801451a:	f3ef 8310 	mrs	r3, PRIMASK
 801451e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014520:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014522:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014524:	b672      	cpsid	i
    return(int_posture);
 8014526:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8014528:	637b      	str	r3, [r7, #52]	; 0x34
 801452a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801452c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	f383 8810 	msr	PRIMASK, r3
}
 8014534:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8014536:	bf00      	nop
 8014538:	3738      	adds	r7, #56	; 0x38
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	08014455 	.word	0x08014455
 8014544:	53454d41 	.word	0x53454d41
 8014548:	24014f54 	.word	0x24014f54

0801454c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b08a      	sub	sp, #40	; 0x28
 8014550:	af00      	add	r7, sp, #0
 8014552:	60f8      	str	r0, [r7, #12]
 8014554:	60b9      	str	r1, [r7, #8]
 8014556:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8014558:	221c      	movs	r2, #28
 801455a:	2100      	movs	r1, #0
 801455c:	68f8      	ldr	r0, [r7, #12]
 801455e:	f001 fe99 	bl	8016294 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	68ba      	ldr	r2, [r7, #8]
 8014566:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	687a      	ldr	r2, [r7, #4]
 801456c:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801456e:	f3ef 8310 	mrs	r3, PRIMASK
 8014572:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014574:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014576:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014578:	b672      	cpsid	i
    return(int_posture);
 801457a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 801457c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	4a18      	ldr	r2, [pc, #96]	; (80145e4 <_tx_semaphore_create+0x98>)
 8014582:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8014584:	4b18      	ldr	r3, [pc, #96]	; (80145e8 <_tx_semaphore_create+0x9c>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d109      	bne.n	80145a0 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 801458c:	4a17      	ldr	r2, [pc, #92]	; (80145ec <_tx_semaphore_create+0xa0>)
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	68fa      	ldr	r2, [r7, #12]
 8014596:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	68fa      	ldr	r2, [r7, #12]
 801459c:	619a      	str	r2, [r3, #24]
 801459e:	e011      	b.n	80145c4 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80145a0:	4b12      	ldr	r3, [pc, #72]	; (80145ec <_tx_semaphore_create+0xa0>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80145a6:	6a3b      	ldr	r3, [r7, #32]
 80145a8:	699b      	ldr	r3, [r3, #24]
 80145aa:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80145ac:	6a3b      	ldr	r3, [r7, #32]
 80145ae:	68fa      	ldr	r2, [r7, #12]
 80145b0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80145b2:	69fb      	ldr	r3, [r7, #28]
 80145b4:	68fa      	ldr	r2, [r7, #12]
 80145b6:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	69fa      	ldr	r2, [r7, #28]
 80145bc:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	6a3a      	ldr	r2, [r7, #32]
 80145c2:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 80145c4:	4b08      	ldr	r3, [pc, #32]	; (80145e8 <_tx_semaphore_create+0x9c>)
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	3301      	adds	r3, #1
 80145ca:	4a07      	ldr	r2, [pc, #28]	; (80145e8 <_tx_semaphore_create+0x9c>)
 80145cc:	6013      	str	r3, [r2, #0]
 80145ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145d0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	f383 8810 	msr	PRIMASK, r3
}
 80145d8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80145da:	2300      	movs	r3, #0
}
 80145dc:	4618      	mov	r0, r3
 80145de:	3728      	adds	r7, #40	; 0x28
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}
 80145e4:	53454d41 	.word	0x53454d41
 80145e8:	24014e88 	.word	0x24014e88
 80145ec:	24014e84 	.word	0x24014e84

080145f0 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b092      	sub	sp, #72	; 0x48
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80145f8:	f3ef 8310 	mrs	r3, PRIMASK
 80145fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80145fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014600:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014602:	b672      	cpsid	i
    return(int_posture);
 8014604:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8014606:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2200      	movs	r2, #0
 801460c:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 801460e:	4b3d      	ldr	r3, [pc, #244]	; (8014704 <_tx_semaphore_delete+0x114>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	3b01      	subs	r3, #1
 8014614:	4a3b      	ldr	r2, [pc, #236]	; (8014704 <_tx_semaphore_delete+0x114>)
 8014616:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8014618:	4b3a      	ldr	r3, [pc, #232]	; (8014704 <_tx_semaphore_delete+0x114>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d103      	bne.n	8014628 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8014620:	4b39      	ldr	r3, [pc, #228]	; (8014708 <_tx_semaphore_delete+0x118>)
 8014622:	2200      	movs	r2, #0
 8014624:	601a      	str	r2, [r3, #0]
 8014626:	e013      	b.n	8014650 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	695b      	ldr	r3, [r3, #20]
 801462c:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	699b      	ldr	r3, [r3, #24]
 8014632:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8014634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014638:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 801463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801463c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801463e:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8014640:	4b31      	ldr	r3, [pc, #196]	; (8014708 <_tx_semaphore_delete+0x118>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	687a      	ldr	r2, [r7, #4]
 8014646:	429a      	cmp	r2, r3
 8014648:	d102      	bne.n	8014650 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 801464a:	4a2f      	ldr	r2, [pc, #188]	; (8014708 <_tx_semaphore_delete+0x118>)
 801464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801464e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014650:	4b2e      	ldr	r3, [pc, #184]	; (801470c <_tx_semaphore_delete+0x11c>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	3301      	adds	r3, #1
 8014656:	4a2d      	ldr	r2, [pc, #180]	; (801470c <_tx_semaphore_delete+0x11c>)
 8014658:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	68db      	ldr	r3, [r3, #12]
 801465e:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2200      	movs	r2, #0
 8014664:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	691b      	ldr	r3, [r3, #16]
 801466a:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	2200      	movs	r2, #0
 8014670:	611a      	str	r2, [r3, #16]
 8014672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014674:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014678:	f383 8810 	msr	PRIMASK, r3
}
 801467c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 801467e:	e024      	b.n	80146ca <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8014680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014682:	3b01      	subs	r3, #1
 8014684:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014686:	f3ef 8310 	mrs	r3, PRIMASK
 801468a:	61fb      	str	r3, [r7, #28]
    return(posture);
 801468c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801468e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014690:	b672      	cpsid	i
    return(int_posture);
 8014692:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8014694:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014698:	2200      	movs	r2, #0
 801469a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 801469c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801469e:	2201      	movs	r2, #1
 80146a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80146a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146a8:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80146aa:	4b18      	ldr	r3, [pc, #96]	; (801470c <_tx_semaphore_delete+0x11c>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	3301      	adds	r3, #1
 80146b0:	4a16      	ldr	r2, [pc, #88]	; (801470c <_tx_semaphore_delete+0x11c>)
 80146b2:	6013      	str	r3, [r2, #0]
 80146b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146b6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80146b8:	6a3b      	ldr	r3, [r7, #32]
 80146ba:	f383 8810 	msr	PRIMASK, r3
}
 80146be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80146c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80146c2:	f000 fbd9 	bl	8014e78 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80146c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c8:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 80146ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d1d7      	bne.n	8014680 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80146d0:	f3ef 8310 	mrs	r3, PRIMASK
 80146d4:	613b      	str	r3, [r7, #16]
    return(posture);
 80146d6:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80146d8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80146da:	b672      	cpsid	i
    return(int_posture);
 80146dc:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80146de:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80146e0:	4b0a      	ldr	r3, [pc, #40]	; (801470c <_tx_semaphore_delete+0x11c>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	3b01      	subs	r3, #1
 80146e6:	4a09      	ldr	r2, [pc, #36]	; (801470c <_tx_semaphore_delete+0x11c>)
 80146e8:	6013      	str	r3, [r2, #0]
 80146ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146ec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80146ee:	697b      	ldr	r3, [r7, #20]
 80146f0:	f383 8810 	msr	PRIMASK, r3
}
 80146f4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80146f6:	f000 fb85 	bl	8014e04 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80146fa:	2300      	movs	r3, #0
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	3748      	adds	r7, #72	; 0x48
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}
 8014704:	24014e88 	.word	0x24014e88
 8014708:	24014e84 	.word	0x24014e84
 801470c:	24014f54 	.word	0x24014f54

08014710 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b08e      	sub	sp, #56	; 0x38
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
 8014718:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801471a:	2300      	movs	r3, #0
 801471c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801471e:	f3ef 8310 	mrs	r3, PRIMASK
 8014722:	623b      	str	r3, [r7, #32]
    return(posture);
 8014724:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014726:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014728:	b672      	cpsid	i
    return(int_posture);
 801472a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 801472c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	689b      	ldr	r3, [r3, #8]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d00a      	beq.n	801474c <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	689b      	ldr	r3, [r3, #8]
 801473a:	1e5a      	subs	r2, r3, #1
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	609a      	str	r2, [r3, #8]
 8014740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014742:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014744:	69bb      	ldr	r3, [r7, #24]
 8014746:	f383 8810 	msr	PRIMASK, r3
}
 801474a:	e068      	b.n	801481e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d05d      	beq.n	801480e <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014752:	4b35      	ldr	r3, [pc, #212]	; (8014828 <_tx_semaphore_get+0x118>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d008      	beq.n	801476c <_tx_semaphore_get+0x5c>
 801475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801475c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	f383 8810 	msr	PRIMASK, r3
}
 8014764:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8014766:	230d      	movs	r3, #13
 8014768:	637b      	str	r3, [r7, #52]	; 0x34
 801476a:	e058      	b.n	801481e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801476c:	4b2f      	ldr	r3, [pc, #188]	; (801482c <_tx_semaphore_get+0x11c>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8014772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014774:	4a2e      	ldr	r2, [pc, #184]	; (8014830 <_tx_semaphore_get+0x120>)
 8014776:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8014778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801477a:	687a      	ldr	r2, [r7, #4]
 801477c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 801477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014780:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014784:	1c5a      	adds	r2, r3, #1
 8014786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014788:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	691b      	ldr	r3, [r3, #16]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d109      	bne.n	80147a8 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014798:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 801479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801479c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801479e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 80147a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147a4:	675a      	str	r2, [r3, #116]	; 0x74
 80147a6:	e011      	b.n	80147cc <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	68db      	ldr	r3, [r3, #12]
 80147ac:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80147ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147b2:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80147b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147b8:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80147ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147be:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80147c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147c4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80147c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147ca:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	691b      	ldr	r3, [r3, #16]
 80147d0:	1c5a      	adds	r2, r3, #1
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80147d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147d8:	2206      	movs	r2, #6
 80147da:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80147dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147de:	2201      	movs	r2, #1
 80147e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80147e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147e4:	683a      	ldr	r2, [r7, #0]
 80147e6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80147e8:	4b0f      	ldr	r3, [pc, #60]	; (8014828 <_tx_semaphore_get+0x118>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	3301      	adds	r3, #1
 80147ee:	4a0e      	ldr	r2, [pc, #56]	; (8014828 <_tx_semaphore_get+0x118>)
 80147f0:	6013      	str	r3, [r2, #0]
 80147f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	f383 8810 	msr	PRIMASK, r3
}
 80147fc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80147fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014800:	f000 fc3a 	bl	8015078 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801480a:	637b      	str	r3, [r7, #52]	; 0x34
 801480c:	e007      	b.n	801481e <_tx_semaphore_get+0x10e>
 801480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014810:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f383 8810 	msr	PRIMASK, r3
}
 8014818:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 801481a:	230d      	movs	r3, #13
 801481c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 801481e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014820:	4618      	mov	r0, r3
 8014822:	3738      	adds	r7, #56	; 0x38
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	24014f54 	.word	0x24014f54
 801482c:	24014ebc 	.word	0x24014ebc
 8014830:	08014455 	.word	0x08014455

08014834 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b08c      	sub	sp, #48	; 0x30
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801483c:	f3ef 8310 	mrs	r3, PRIMASK
 8014840:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014842:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014844:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014846:	b672      	cpsid	i
    return(int_posture);
 8014848:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 801484a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	691b      	ldr	r3, [r3, #16]
 8014850:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8014852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014854:	2b00      	cmp	r3, #0
 8014856:	d10a      	bne.n	801486e <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	689b      	ldr	r3, [r3, #8]
 801485c:	1c5a      	adds	r2, r3, #1
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	609a      	str	r2, [r3, #8]
 8014862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014864:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	f383 8810 	msr	PRIMASK, r3
}
 801486c:	e033      	b.n	80148d6 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	68db      	ldr	r3, [r3, #12]
 8014872:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8014874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014876:	3b01      	subs	r3, #1
 8014878:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 801487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801487c:	2b00      	cmp	r3, #0
 801487e:	d103      	bne.n	8014888 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	2200      	movs	r2, #0
 8014884:	60da      	str	r2, [r3, #12]
 8014886:	e00e      	b.n	80148a6 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8014888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801488c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	6a3a      	ldr	r2, [r7, #32]
 8014892:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014898:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801489a:	6a3b      	ldr	r3, [r7, #32]
 801489c:	69fa      	ldr	r2, [r7, #28]
 801489e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80148a0:	69fb      	ldr	r3, [r7, #28]
 80148a2:	6a3a      	ldr	r2, [r7, #32]
 80148a4:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80148aa:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80148ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ae:	2200      	movs	r2, #0
 80148b0:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80148b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b4:	2200      	movs	r2, #0
 80148b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80148ba:	4b09      	ldr	r3, [pc, #36]	; (80148e0 <_tx_semaphore_put+0xac>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	3301      	adds	r3, #1
 80148c0:	4a07      	ldr	r2, [pc, #28]	; (80148e0 <_tx_semaphore_put+0xac>)
 80148c2:	6013      	str	r3, [r2, #0]
 80148c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148c6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	f383 8810 	msr	PRIMASK, r3
}
 80148ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80148d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148d2:	f000 fad1 	bl	8014e78 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80148d6:	2300      	movs	r3, #0
}
 80148d8:	4618      	mov	r0, r3
 80148da:	3730      	adds	r7, #48	; 0x30
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}
 80148e0:	24014f54 	.word	0x24014f54

080148e4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b092      	sub	sp, #72	; 0x48
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	60f8      	str	r0, [r7, #12]
 80148ec:	60b9      	str	r1, [r7, #8]
 80148ee:	607a      	str	r2, [r7, #4]
 80148f0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80148f2:	2300      	movs	r3, #0
 80148f4:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80148f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80148f8:	21ef      	movs	r1, #239	; 0xef
 80148fa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80148fc:	f001 fcca 	bl	8016294 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8014900:	22b0      	movs	r2, #176	; 0xb0
 8014902:	2100      	movs	r1, #0
 8014904:	68f8      	ldr	r0, [r7, #12]
 8014906:	f001 fcc5 	bl	8016294 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	68ba      	ldr	r2, [r7, #8]
 801490e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	683a      	ldr	r2, [r7, #0]
 801491a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014920:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014926:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801492c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014932:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801493a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014940:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	2220      	movs	r2, #32
 8014946:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801494a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801494c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801494e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014950:	3b01      	subs	r3, #1
 8014952:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014954:	4413      	add	r3, r2
 8014956:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801495c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 801495e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014962:	429a      	cmp	r2, r3
 8014964:	d007      	beq.n	8014976 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	2200      	movs	r2, #0
 801496a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	2200      	movs	r2, #0
 8014970:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8014974:	e006      	b.n	8014984 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801497a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014980:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	2203      	movs	r2, #3
 8014988:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	4a48      	ldr	r2, [pc, #288]	; (8014ab0 <_tx_thread_create+0x1cc>)
 801498e:	655a      	str	r2, [r3, #84]	; 0x54
 8014990:	68fa      	ldr	r2, [r7, #12]
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8014996:	4947      	ldr	r1, [pc, #284]	; (8014ab4 <_tx_thread_create+0x1d0>)
 8014998:	68f8      	ldr	r0, [r7, #12]
 801499a:	f7eb fd41 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801499e:	f3ef 8310 	mrs	r3, PRIMASK
 80149a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80149a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80149a6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80149a8:	b672      	cpsid	i
    return(int_posture);
 80149aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80149ac:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	4a41      	ldr	r2, [pc, #260]	; (8014ab8 <_tx_thread_create+0x1d4>)
 80149b2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80149b4:	4b41      	ldr	r3, [pc, #260]	; (8014abc <_tx_thread_create+0x1d8>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d10b      	bne.n	80149d4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80149bc:	4a40      	ldr	r2, [pc, #256]	; (8014ac0 <_tx_thread_create+0x1dc>)
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	68fa      	ldr	r2, [r7, #12]
 80149c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	68fa      	ldr	r2, [r7, #12]
 80149ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80149d2:	e016      	b.n	8014a02 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80149d4:	4b3a      	ldr	r3, [pc, #232]	; (8014ac0 <_tx_thread_create+0x1dc>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80149da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80149e0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80149e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149e4:	68fa      	ldr	r2, [r7, #12]
 80149e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80149ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ec:	68fa      	ldr	r2, [r7, #12]
 80149ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80149fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8014a02:	4b2e      	ldr	r3, [pc, #184]	; (8014abc <_tx_thread_create+0x1d8>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	3301      	adds	r3, #1
 8014a08:	4a2c      	ldr	r2, [pc, #176]	; (8014abc <_tx_thread_create+0x1d8>)
 8014a0a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014a0c:	4b2d      	ldr	r3, [pc, #180]	; (8014ac4 <_tx_thread_create+0x1e0>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	3301      	adds	r3, #1
 8014a12:	4a2c      	ldr	r2, [pc, #176]	; (8014ac4 <_tx_thread_create+0x1e0>)
 8014a14:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8014a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014a18:	2b01      	cmp	r3, #1
 8014a1a:	d129      	bne.n	8014a70 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014a1c:	f3ef 8305 	mrs	r3, IPSR
 8014a20:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8014a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8014a24:	4b28      	ldr	r3, [pc, #160]	; (8014ac8 <_tx_thread_create+0x1e4>)
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	4313      	orrs	r3, r2
 8014a2a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014a2e:	d30d      	bcc.n	8014a4c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8014a30:	4b26      	ldr	r3, [pc, #152]	; (8014acc <_tx_thread_create+0x1e8>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8014a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d009      	beq.n	8014a50 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8014a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014a40:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8014a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a48:	63da      	str	r2, [r3, #60]	; 0x3c
 8014a4a:	e001      	b.n	8014a50 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8014a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a52:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a54:	6a3b      	ldr	r3, [r7, #32]
 8014a56:	f383 8810 	msr	PRIMASK, r3
}
 8014a5a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8014a5c:	68f8      	ldr	r0, [r7, #12]
 8014a5e:	f000 fa0b 	bl	8014e78 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8014a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d01e      	beq.n	8014aa6 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8014a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014a6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8014a6e:	e01a      	b.n	8014aa6 <_tx_thread_create+0x1c2>
 8014a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a72:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	f383 8810 	msr	PRIMASK, r3
}
 8014a7a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8014a80:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014a82:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014a84:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014a86:	b672      	cpsid	i
    return(int_posture);
 8014a88:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8014a8a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8014a8c:	4b0d      	ldr	r3, [pc, #52]	; (8014ac4 <_tx_thread_create+0x1e0>)
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	3b01      	subs	r3, #1
 8014a92:	4a0c      	ldr	r2, [pc, #48]	; (8014ac4 <_tx_thread_create+0x1e0>)
 8014a94:	6013      	str	r3, [r2, #0]
 8014a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a98:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a9a:	69fb      	ldr	r3, [r7, #28]
 8014a9c:	f383 8810 	msr	PRIMASK, r3
}
 8014aa0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014aa2:	f000 f9af 	bl	8014e04 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8014aa6:	2300      	movs	r3, #0
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3748      	adds	r7, #72	; 0x48
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}
 8014ab0:	0801534d 	.word	0x0801534d
 8014ab4:	08014c6d 	.word	0x08014c6d
 8014ab8:	54485244 	.word	0x54485244
 8014abc:	24014ec8 	.word	0x24014ec8
 8014ac0:	24014ec4 	.word	0x24014ec4
 8014ac4:	24014f54 	.word	0x24014f54
 8014ac8:	2400006c 	.word	0x2400006c
 8014acc:	24014ec0 	.word	0x24014ec0

08014ad0 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8014ad0:	b480      	push	{r7}
 8014ad2:	b087      	sub	sp, #28
 8014ad4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8014ada:	60bb      	str	r3, [r7, #8]
    return(posture);
 8014adc:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8014ade:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ae0:	b672      	cpsid	i
    return(int_posture);
 8014ae2:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8014ae4:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014ae6:	4b08      	ldr	r3, [pc, #32]	; (8014b08 <_tx_thread_identify+0x38>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	613b      	str	r3, [r7, #16]
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	f383 8810 	msr	PRIMASK, r3
}
 8014af6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8014af8:	693b      	ldr	r3, [r7, #16]
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	371c      	adds	r7, #28
 8014afe:	46bd      	mov	sp, r7
 8014b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b04:	4770      	bx	lr
 8014b06:	bf00      	nop
 8014b08:	24014ebc 	.word	0x24014ebc

08014b0c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8014b10:	4b12      	ldr	r3, [pc, #72]	; (8014b5c <_tx_thread_initialize+0x50>)
 8014b12:	2200      	movs	r2, #0
 8014b14:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8014b16:	4b12      	ldr	r3, [pc, #72]	; (8014b60 <_tx_thread_initialize+0x54>)
 8014b18:	2200      	movs	r2, #0
 8014b1a:	601a      	str	r2, [r3, #0]
 8014b1c:	4b11      	ldr	r3, [pc, #68]	; (8014b64 <_tx_thread_initialize+0x58>)
 8014b1e:	2200      	movs	r2, #0
 8014b20:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014b22:	4b11      	ldr	r3, [pc, #68]	; (8014b68 <_tx_thread_initialize+0x5c>)
 8014b24:	2220      	movs	r2, #32
 8014b26:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8014b28:	2280      	movs	r2, #128	; 0x80
 8014b2a:	2100      	movs	r1, #0
 8014b2c:	480f      	ldr	r0, [pc, #60]	; (8014b6c <_tx_thread_initialize+0x60>)
 8014b2e:	f001 fbb1 	bl	8016294 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8014b32:	4b0f      	ldr	r3, [pc, #60]	; (8014b70 <_tx_thread_initialize+0x64>)
 8014b34:	2200      	movs	r2, #0
 8014b36:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8014b38:	4b0e      	ldr	r3, [pc, #56]	; (8014b74 <_tx_thread_initialize+0x68>)
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8014b3e:	4b0e      	ldr	r3, [pc, #56]	; (8014b78 <_tx_thread_initialize+0x6c>)
 8014b40:	2200      	movs	r2, #0
 8014b42:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8014b44:	4b0d      	ldr	r3, [pc, #52]	; (8014b7c <_tx_thread_initialize+0x70>)
 8014b46:	2200      	movs	r2, #0
 8014b48:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8014b4a:	4b0d      	ldr	r3, [pc, #52]	; (8014b80 <_tx_thread_initialize+0x74>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8014b52:	4a0b      	ldr	r2, [pc, #44]	; (8014b80 <_tx_thread_initialize+0x74>)
 8014b54:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8014b56:	bf00      	nop
 8014b58:	bd80      	pop	{r7, pc}
 8014b5a:	bf00      	nop
 8014b5c:	24014ebc 	.word	0x24014ebc
 8014b60:	24014ec0 	.word	0x24014ec0
 8014b64:	24014ecc 	.word	0x24014ecc
 8014b68:	24014ed0 	.word	0x24014ed0
 8014b6c:	24014ed4 	.word	0x24014ed4
 8014b70:	24014ec4 	.word	0x24014ec4
 8014b74:	24014ec8 	.word	0x24014ec8
 8014b78:	24014f54 	.word	0x24014f54
 8014b7c:	24014f58 	.word	0x24014f58
 8014b80:	24014f5c 	.word	0x24014f5c

08014b84 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b08c      	sub	sp, #48	; 0x30
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	60f8      	str	r0, [r7, #12]
 8014b8c:	60b9      	str	r1, [r7, #8]
 8014b8e:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014b90:	2300      	movs	r3, #0
 8014b92:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014b9a:	68ba      	ldr	r2, [r7, #8]
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d004      	beq.n	8014baa <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8014ba0:	68bb      	ldr	r3, [r7, #8]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d001      	beq.n	8014baa <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014baa:	f3ef 8310 	mrs	r3, PRIMASK
 8014bae:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8014bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8014bb2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014bb4:	b672      	cpsid	i
    return(int_posture);
 8014bb6:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8014bb8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014bc0:	68ba      	ldr	r2, [r7, #8]
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d902      	bls.n	8014bcc <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 8014bc6:	2318      	movs	r3, #24
 8014bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8014bca:	e03e      	b.n	8014c4a <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	68ba      	ldr	r2, [r7, #8]
 8014bda:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014be4:	68ba      	ldr	r2, [r7, #8]
 8014be6:	429a      	cmp	r2, r3
 8014be8:	d203      	bcs.n	8014bf2 <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	68ba      	ldr	r2, [r7, #8]
 8014bee:	63da      	str	r2, [r3, #60]	; 0x3c
 8014bf0:	e004      	b.n	8014bfc <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c00:	4b17      	ldr	r3, [pc, #92]	; (8014c60 <_tx_thread_preemption_change+0xdc>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	429a      	cmp	r2, r3
 8014c06:	d920      	bls.n	8014c4a <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8014c08:	4b15      	ldr	r3, [pc, #84]	; (8014c60 <_tx_thread_preemption_change+0xdc>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	68ba      	ldr	r2, [r7, #8]
 8014c0e:	429a      	cmp	r2, r3
 8014c10:	d91b      	bls.n	8014c4a <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8014c12:	4b14      	ldr	r3, [pc, #80]	; (8014c64 <_tx_thread_preemption_change+0xe0>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	68fa      	ldr	r2, [r7, #12]
 8014c18:	429a      	cmp	r2, r3
 8014c1a:	d116      	bne.n	8014c4a <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8014c1c:	4b10      	ldr	r3, [pc, #64]	; (8014c60 <_tx_thread_preemption_change+0xdc>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	4a11      	ldr	r2, [pc, #68]	; (8014c68 <_tx_thread_preemption_change+0xe4>)
 8014c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c26:	4a0f      	ldr	r2, [pc, #60]	; (8014c64 <_tx_thread_preemption_change+0xe0>)
 8014c28:	6013      	str	r3, [r2, #0]
 8014c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c2c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	f383 8810 	msr	PRIMASK, r3
}
 8014c34:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8014c36:	f000 f8e5 	bl	8014e04 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8014c3e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014c40:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014c42:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014c44:	b672      	cpsid	i
    return(int_posture);
 8014c46:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8014c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c4c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c4e:	693b      	ldr	r3, [r7, #16]
 8014c50:	f383 8810 	msr	PRIMASK, r3
}
 8014c54:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8014c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	3730      	adds	r7, #48	; 0x30
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	bd80      	pop	{r7, pc}
 8014c60:	24014ed0 	.word	0x24014ed0
 8014c64:	24014ec0 	.word	0x24014ec0
 8014c68:	24014ed4 	.word	0x24014ed4

08014c6c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b088      	sub	sp, #32
 8014c70:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014c72:	4b21      	ldr	r3, [pc, #132]	; (8014cf8 <_tx_thread_shell_entry+0x8c>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8014c78:	69fb      	ldr	r3, [r7, #28]
 8014c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c7c:	69fa      	ldr	r2, [r7, #28]
 8014c7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014c80:	4610      	mov	r0, r2
 8014c82:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8014c84:	4b1d      	ldr	r3, [pc, #116]	; (8014cfc <_tx_thread_shell_entry+0x90>)
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d003      	beq.n	8014c94 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8014c8c:	4b1b      	ldr	r3, [pc, #108]	; (8014cfc <_tx_thread_shell_entry+0x90>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	69f8      	ldr	r0, [r7, #28]
 8014c92:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014c94:	f3ef 8310 	mrs	r3, PRIMASK
 8014c98:	607b      	str	r3, [r7, #4]
    return(posture);
 8014c9a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8014c9c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014c9e:	b672      	cpsid	i
    return(int_posture);
 8014ca0:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8014ca2:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8014ca4:	69fb      	ldr	r3, [r7, #28]
 8014ca6:	2201      	movs	r2, #1
 8014ca8:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014caa:	69fb      	ldr	r3, [r7, #28]
 8014cac:	2201      	movs	r2, #1
 8014cae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8014cb0:	69fb      	ldr	r3, [r7, #28]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014cb6:	4b12      	ldr	r3, [pc, #72]	; (8014d00 <_tx_thread_shell_entry+0x94>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	3301      	adds	r3, #1
 8014cbc:	4a10      	ldr	r2, [pc, #64]	; (8014d00 <_tx_thread_shell_entry+0x94>)
 8014cbe:	6013      	str	r3, [r2, #0]
 8014cc0:	69bb      	ldr	r3, [r7, #24]
 8014cc2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014cc4:	68bb      	ldr	r3, [r7, #8]
 8014cc6:	f383 8810 	msr	PRIMASK, r3
}
 8014cca:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8014ccc:	f3ef 8314 	mrs	r3, CONTROL
 8014cd0:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8014cd2:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8014cd4:	617b      	str	r3, [r7, #20]
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	f023 0304 	bic.w	r3, r3, #4
 8014cdc:	617b      	str	r3, [r7, #20]
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	f383 8814 	msr	CONTROL, r3
}
 8014ce8:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8014cea:	69f8      	ldr	r0, [r7, #28]
 8014cec:	f000 f9c4 	bl	8015078 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8014cf0:	bf00      	nop
 8014cf2:	3720      	adds	r7, #32
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}
 8014cf8:	24014ebc 	.word	0x24014ebc
 8014cfc:	24014f58 	.word	0x24014f58
 8014d00:	24014f54 	.word	0x24014f54

08014d04 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b08e      	sub	sp, #56	; 0x38
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8014d10:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014d14:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014d16:	b672      	cpsid	i
    return(int_posture);
 8014d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8014d1a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014d1c:	4b35      	ldr	r3, [pc, #212]	; (8014df4 <_tx_thread_sleep+0xf0>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8014d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d108      	bne.n	8014d3a <_tx_thread_sleep+0x36>
 8014d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d2a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d2c:	6a3b      	ldr	r3, [r7, #32]
 8014d2e:	f383 8810 	msr	PRIMASK, r3
}
 8014d32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8014d34:	2313      	movs	r3, #19
 8014d36:	637b      	str	r3, [r7, #52]	; 0x34
 8014d38:	e056      	b.n	8014de8 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014d3a:	f3ef 8305 	mrs	r3, IPSR
 8014d3e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8014d40:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014d42:	4b2d      	ldr	r3, [pc, #180]	; (8014df8 <_tx_thread_sleep+0xf4>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	4313      	orrs	r3, r2
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d008      	beq.n	8014d5e <_tx_thread_sleep+0x5a>
 8014d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d4e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d50:	69bb      	ldr	r3, [r7, #24]
 8014d52:	f383 8810 	msr	PRIMASK, r3
}
 8014d56:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8014d58:	2313      	movs	r3, #19
 8014d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8014d5c:	e044      	b.n	8014de8 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8014d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d60:	4a26      	ldr	r2, [pc, #152]	; (8014dfc <_tx_thread_sleep+0xf8>)
 8014d62:	4293      	cmp	r3, r2
 8014d64:	d108      	bne.n	8014d78 <_tx_thread_sleep+0x74>
 8014d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d68:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d6a:	697b      	ldr	r3, [r7, #20]
 8014d6c:	f383 8810 	msr	PRIMASK, r3
}
 8014d70:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8014d72:	2313      	movs	r3, #19
 8014d74:	637b      	str	r3, [r7, #52]	; 0x34
 8014d76:	e037      	b.n	8014de8 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d108      	bne.n	8014d90 <_tx_thread_sleep+0x8c>
 8014d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d80:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d82:	693b      	ldr	r3, [r7, #16]
 8014d84:	f383 8810 	msr	PRIMASK, r3
}
 8014d88:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8014d8e:	e02b      	b.n	8014de8 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014d90:	4b1b      	ldr	r3, [pc, #108]	; (8014e00 <_tx_thread_sleep+0xfc>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d008      	beq.n	8014daa <_tx_thread_sleep+0xa6>
 8014d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d9a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	f383 8810 	msr	PRIMASK, r3
}
 8014da2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8014da4:	2313      	movs	r3, #19
 8014da6:	637b      	str	r3, [r7, #52]	; 0x34
 8014da8:	e01e      	b.n	8014de8 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8014daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dac:	2204      	movs	r2, #4
 8014dae:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014db2:	2201      	movs	r2, #1
 8014db4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014db8:	2200      	movs	r2, #0
 8014dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8014dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dc0:	687a      	ldr	r2, [r7, #4]
 8014dc2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014dc4:	4b0e      	ldr	r3, [pc, #56]	; (8014e00 <_tx_thread_sleep+0xfc>)
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	3301      	adds	r3, #1
 8014dca:	4a0d      	ldr	r2, [pc, #52]	; (8014e00 <_tx_thread_sleep+0xfc>)
 8014dcc:	6013      	str	r3, [r2, #0]
 8014dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	f383 8810 	msr	PRIMASK, r3
}
 8014dd8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014ddc:	f000 f94c 	bl	8015078 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014de6:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8014de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014dea:	4618      	mov	r0, r3
 8014dec:	3738      	adds	r7, #56	; 0x38
 8014dee:	46bd      	mov	sp, r7
 8014df0:	bd80      	pop	{r7, pc}
 8014df2:	bf00      	nop
 8014df4:	24014ebc 	.word	0x24014ebc
 8014df8:	2400006c 	.word	0x2400006c
 8014dfc:	24015004 	.word	0x24015004
 8014e00:	24014f54 	.word	0x24014f54

08014e04 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b089      	sub	sp, #36	; 0x24
 8014e08:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014e0a:	4b17      	ldr	r3, [pc, #92]	; (8014e68 <_tx_thread_system_preempt_check+0x64>)
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8014e10:	69fb      	ldr	r3, [r7, #28]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d121      	bne.n	8014e5a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8014e16:	4b15      	ldr	r3, [pc, #84]	; (8014e6c <_tx_thread_system_preempt_check+0x68>)
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8014e1c:	4b14      	ldr	r3, [pc, #80]	; (8014e70 <_tx_thread_system_preempt_check+0x6c>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8014e22:	69ba      	ldr	r2, [r7, #24]
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	429a      	cmp	r2, r3
 8014e28:	d017      	beq.n	8014e5a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8014e2a:	4b12      	ldr	r3, [pc, #72]	; (8014e74 <_tx_thread_system_preempt_check+0x70>)
 8014e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e30:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014e32:	f3ef 8305 	mrs	r3, IPSR
 8014e36:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014e38:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d10c      	bne.n	8014e58 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8014e42:	60fb      	str	r3, [r7, #12]
    return(posture);
 8014e44:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8014e46:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014e48:	b662      	cpsie	i
}
 8014e4a:	bf00      	nop
 8014e4c:	68bb      	ldr	r3, [r7, #8]
 8014e4e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f383 8810 	msr	PRIMASK, r3
}
 8014e56:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8014e58:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8014e5a:	bf00      	nop
 8014e5c:	3724      	adds	r7, #36	; 0x24
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e64:	4770      	bx	lr
 8014e66:	bf00      	nop
 8014e68:	24014f54 	.word	0x24014f54
 8014e6c:	24014ebc 	.word	0x24014ebc
 8014e70:	24014ec0 	.word	0x24014ec0
 8014e74:	e000ed04 	.word	0xe000ed04

08014e78 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b096      	sub	sp, #88	; 0x58
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014e80:	f3ef 8310 	mrs	r3, PRIMASK
 8014e84:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8014e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8014e88:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8014e8a:	b672      	cpsid	i
    return(int_posture);
 8014e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8014e8e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d005      	beq.n	8014ea4 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	334c      	adds	r3, #76	; 0x4c
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f000 fc13 	bl	80156c8 <_tx_timer_system_deactivate>
 8014ea2:	e002      	b.n	8014eaa <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8014eaa:	4b6c      	ldr	r3, [pc, #432]	; (801505c <_tx_thread_system_resume+0x1e4>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	3b01      	subs	r3, #1
 8014eb0:	4a6a      	ldr	r2, [pc, #424]	; (801505c <_tx_thread_system_resume+0x1e4>)
 8014eb2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	f040 8083 	bne.w	8014fc4 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	f000 8097 	beq.w	8014ff6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d172      	bne.n	8014fb6 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eda:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8014edc:	4a60      	ldr	r2, [pc, #384]	; (8015060 <_tx_thread_system_resume+0x1e8>)
 8014ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8014ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d154      	bne.n	8014f96 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8014eec:	495c      	ldr	r1, [pc, #368]	; (8015060 <_tx_thread_system_resume+0x1e8>)
 8014eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ef0:	687a      	ldr	r2, [r7, #4]
 8014ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	687a      	ldr	r2, [r7, #4]
 8014efa:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	687a      	ldr	r2, [r7, #4]
 8014f00:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8014f02:	2201      	movs	r2, #1
 8014f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f06:	fa02 f303 	lsl.w	r3, r2, r3
 8014f0a:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8014f0c:	4b55      	ldr	r3, [pc, #340]	; (8015064 <_tx_thread_system_resume+0x1ec>)
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f12:	4313      	orrs	r3, r2
 8014f14:	4a53      	ldr	r2, [pc, #332]	; (8015064 <_tx_thread_system_resume+0x1ec>)
 8014f16:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8014f18:	4b53      	ldr	r3, [pc, #332]	; (8015068 <_tx_thread_system_resume+0x1f0>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014f1e:	429a      	cmp	r2, r3
 8014f20:	d269      	bcs.n	8014ff6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8014f22:	4a51      	ldr	r2, [pc, #324]	; (8015068 <_tx_thread_system_resume+0x1f0>)
 8014f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f26:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8014f28:	4b50      	ldr	r3, [pc, #320]	; (801506c <_tx_thread_system_resume+0x1f4>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8014f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d103      	bne.n	8014f3c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8014f34:	4a4d      	ldr	r2, [pc, #308]	; (801506c <_tx_thread_system_resume+0x1f4>)
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	6013      	str	r3, [r2, #0]
 8014f3a:	e05c      	b.n	8014ff6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8014f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d257      	bcs.n	8014ff6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8014f46:	4a49      	ldr	r2, [pc, #292]	; (801506c <_tx_thread_system_resume+0x1f4>)
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6013      	str	r3, [r2, #0]
 8014f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f52:	f383 8810 	msr	PRIMASK, r3
}
 8014f56:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014f58:	4b40      	ldr	r3, [pc, #256]	; (801505c <_tx_thread_system_resume+0x1e4>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8014f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d174      	bne.n	801504e <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8014f64:	4b42      	ldr	r3, [pc, #264]	; (8015070 <_tx_thread_system_resume+0x1f8>)
 8014f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f6a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014f6c:	f3ef 8305 	mrs	r3, IPSR
 8014f70:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8014f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d10c      	bne.n	8014f92 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f78:	f3ef 8310 	mrs	r3, PRIMASK
 8014f7c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8014f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8014f80:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014f82:	b662      	cpsie	i
}
 8014f84:	bf00      	nop
 8014f86:	6a3b      	ldr	r3, [r7, #32]
 8014f88:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	f383 8810 	msr	PRIMASK, r3
}
 8014f90:	bf00      	nop
}
 8014f92:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8014f94:	e05b      	b.n	801504e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8014f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f9a:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8014f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f9e:	687a      	ldr	r2, [r7, #4]
 8014fa0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8014fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fa4:	687a      	ldr	r2, [r7, #4]
 8014fa6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014fac:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014fb2:	621a      	str	r2, [r3, #32]
 8014fb4:	e01f      	b.n	8014ff6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	2200      	movs	r2, #0
 8014fba:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2203      	movs	r2, #3
 8014fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8014fc2:	e018      	b.n	8014ff6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fc8:	2b01      	cmp	r3, #1
 8014fca:	d014      	beq.n	8014ff6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fd0:	2b02      	cmp	r3, #2
 8014fd2:	d010      	beq.n	8014ff6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d106      	bne.n	8014fea <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2200      	movs	r2, #0
 8014fe0:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8014fe8:	e005      	b.n	8014ff6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2200      	movs	r2, #0
 8014fee:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	2203      	movs	r2, #3
 8014ff4:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8014ff6:	4b1f      	ldr	r3, [pc, #124]	; (8015074 <_tx_thread_system_resume+0x1fc>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8014ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ffe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015000:	69bb      	ldr	r3, [r7, #24]
 8015002:	f383 8810 	msr	PRIMASK, r3
}
 8015006:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8015008:	4b18      	ldr	r3, [pc, #96]	; (801506c <_tx_thread_system_resume+0x1f4>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801500e:	429a      	cmp	r2, r3
 8015010:	d020      	beq.n	8015054 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015012:	4b12      	ldr	r3, [pc, #72]	; (801505c <_tx_thread_system_resume+0x1e4>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8015018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801501a:	2b00      	cmp	r3, #0
 801501c:	d11a      	bne.n	8015054 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801501e:	4b14      	ldr	r3, [pc, #80]	; (8015070 <_tx_thread_system_resume+0x1f8>)
 8015020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015024:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015026:	f3ef 8305 	mrs	r3, IPSR
 801502a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801502c:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 801502e:	2b00      	cmp	r3, #0
 8015030:	d10f      	bne.n	8015052 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015032:	f3ef 8310 	mrs	r3, PRIMASK
 8015036:	613b      	str	r3, [r7, #16]
    return(posture);
 8015038:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 801503a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801503c:	b662      	cpsie	i
}
 801503e:	bf00      	nop
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	f383 8810 	msr	PRIMASK, r3
}
 801504a:	bf00      	nop
}
 801504c:	e001      	b.n	8015052 <_tx_thread_system_resume+0x1da>
                                return;
 801504e:	bf00      	nop
 8015050:	e000      	b.n	8015054 <_tx_thread_system_resume+0x1dc>
 8015052:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8015054:	3758      	adds	r7, #88	; 0x58
 8015056:	46bd      	mov	sp, r7
 8015058:	bd80      	pop	{r7, pc}
 801505a:	bf00      	nop
 801505c:	24014f54 	.word	0x24014f54
 8015060:	24014ed4 	.word	0x24014ed4
 8015064:	24014ecc 	.word	0x24014ecc
 8015068:	24014ed0 	.word	0x24014ed0
 801506c:	24014ec0 	.word	0x24014ec0
 8015070:	e000ed04 	.word	0xe000ed04
 8015074:	24014ebc 	.word	0x24014ebc

08015078 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b09e      	sub	sp, #120	; 0x78
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8015080:	4b81      	ldr	r3, [pc, #516]	; (8015288 <_tx_thread_system_suspend+0x210>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015086:	f3ef 8310 	mrs	r3, PRIMASK
 801508a:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 801508c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 801508e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8015090:	b672      	cpsid	i
    return(int_posture);
 8015092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8015094:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8015096:	687a      	ldr	r2, [r7, #4]
 8015098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801509a:	429a      	cmp	r2, r3
 801509c:	d112      	bne.n	80150c4 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80150a2:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80150a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d008      	beq.n	80150bc <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80150aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80150ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150b0:	d004      	beq.n	80150bc <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	334c      	adds	r3, #76	; 0x4c
 80150b6:	4618      	mov	r0, r3
 80150b8:	f000 faa4 	bl	8015604 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	69db      	ldr	r3, [r3, #28]
 80150c0:	4a72      	ldr	r2, [pc, #456]	; (801528c <_tx_thread_system_suspend+0x214>)
 80150c2:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80150c4:	4b72      	ldr	r3, [pc, #456]	; (8015290 <_tx_thread_system_suspend+0x218>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	3b01      	subs	r3, #1
 80150ca:	4a71      	ldr	r2, [pc, #452]	; (8015290 <_tx_thread_system_suspend+0x218>)
 80150cc:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150d2:	2b01      	cmp	r3, #1
 80150d4:	f040 80a6 	bne.w	8015224 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2200      	movs	r2, #0
 80150dc:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150e2:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	6a1b      	ldr	r3, [r3, #32]
 80150e8:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80150ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	429a      	cmp	r2, r3
 80150f0:	d015      	beq.n	801511e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150f6:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80150f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80150fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80150fc:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80150fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015100:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015102:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8015104:	4a63      	ldr	r2, [pc, #396]	; (8015294 <_tx_thread_system_suspend+0x21c>)
 8015106:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801510c:	687a      	ldr	r2, [r7, #4]
 801510e:	429a      	cmp	r2, r3
 8015110:	d157      	bne.n	80151c2 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8015112:	4960      	ldr	r1, [pc, #384]	; (8015294 <_tx_thread_system_suspend+0x21c>)
 8015114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015116:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801511c:	e051      	b.n	80151c2 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 801511e:	4a5d      	ldr	r2, [pc, #372]	; (8015294 <_tx_thread_system_suspend+0x21c>)
 8015120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015122:	2100      	movs	r1, #0
 8015124:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8015128:	2201      	movs	r2, #1
 801512a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801512c:	fa02 f303 	lsl.w	r3, r2, r3
 8015130:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8015132:	4b59      	ldr	r3, [pc, #356]	; (8015298 <_tx_thread_system_suspend+0x220>)
 8015134:	681a      	ldr	r2, [r3, #0]
 8015136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015138:	43db      	mvns	r3, r3
 801513a:	4013      	ands	r3, r2
 801513c:	4a56      	ldr	r2, [pc, #344]	; (8015298 <_tx_thread_system_suspend+0x220>)
 801513e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8015140:	2300      	movs	r3, #0
 8015142:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8015144:	4b54      	ldr	r3, [pc, #336]	; (8015298 <_tx_thread_system_suspend+0x220>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 801514a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801514c:	2b00      	cmp	r3, #0
 801514e:	d12b      	bne.n	80151a8 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8015150:	4b52      	ldr	r3, [pc, #328]	; (801529c <_tx_thread_system_suspend+0x224>)
 8015152:	2220      	movs	r2, #32
 8015154:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8015156:	4b52      	ldr	r3, [pc, #328]	; (80152a0 <_tx_thread_system_suspend+0x228>)
 8015158:	2200      	movs	r2, #0
 801515a:	601a      	str	r2, [r3, #0]
 801515c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801515e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015162:	f383 8810 	msr	PRIMASK, r3
}
 8015166:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015168:	4b49      	ldr	r3, [pc, #292]	; (8015290 <_tx_thread_system_suspend+0x218>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 801516e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015170:	2b00      	cmp	r3, #0
 8015172:	f040 8081 	bne.w	8015278 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015176:	4b4b      	ldr	r3, [pc, #300]	; (80152a4 <_tx_thread_system_suspend+0x22c>)
 8015178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801517c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801517e:	f3ef 8305 	mrs	r3, IPSR
 8015182:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8015184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8015186:	2b00      	cmp	r3, #0
 8015188:	d10c      	bne.n	80151a4 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801518a:	f3ef 8310 	mrs	r3, PRIMASK
 801518e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8015190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8015192:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015194:	b662      	cpsie	i
}
 8015196:	bf00      	nop
 8015198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801519a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801519c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801519e:	f383 8810 	msr	PRIMASK, r3
}
 80151a2:	bf00      	nop
}
 80151a4:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80151a6:	e067      	b.n	8015278 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80151a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80151aa:	fa93 f3a3 	rbit	r3, r3
 80151ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80151b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80151b2:	fab3 f383 	clz	r3, r3
 80151b6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80151b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80151ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80151bc:	4413      	add	r3, r2
 80151be:	4a37      	ldr	r2, [pc, #220]	; (801529c <_tx_thread_system_suspend+0x224>)
 80151c0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80151c2:	4b37      	ldr	r3, [pc, #220]	; (80152a0 <_tx_thread_system_suspend+0x228>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	687a      	ldr	r2, [r7, #4]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d12b      	bne.n	8015224 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80151cc:	4b33      	ldr	r3, [pc, #204]	; (801529c <_tx_thread_system_suspend+0x224>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	4a30      	ldr	r2, [pc, #192]	; (8015294 <_tx_thread_system_suspend+0x21c>)
 80151d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151d6:	4a32      	ldr	r2, [pc, #200]	; (80152a0 <_tx_thread_system_suspend+0x228>)
 80151d8:	6013      	str	r3, [r2, #0]
 80151da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80151dc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80151de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e0:	f383 8810 	msr	PRIMASK, r3
}
 80151e4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80151e6:	4b2a      	ldr	r3, [pc, #168]	; (8015290 <_tx_thread_system_suspend+0x218>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 80151ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d144      	bne.n	801527c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80151f2:	4b2c      	ldr	r3, [pc, #176]	; (80152a4 <_tx_thread_system_suspend+0x22c>)
 80151f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151f8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80151fa:	f3ef 8305 	mrs	r3, IPSR
 80151fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8015200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8015202:	2b00      	cmp	r3, #0
 8015204:	d10c      	bne.n	8015220 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015206:	f3ef 8310 	mrs	r3, PRIMASK
 801520a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 801520e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015210:	b662      	cpsie	i
}
 8015212:	bf00      	nop
 8015214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015216:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015218:	6a3b      	ldr	r3, [r7, #32]
 801521a:	f383 8810 	msr	PRIMASK, r3
}
 801521e:	bf00      	nop
}
 8015220:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8015222:	e02b      	b.n	801527c <_tx_thread_system_suspend+0x204>
 8015224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015226:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015228:	69fb      	ldr	r3, [r7, #28]
 801522a:	f383 8810 	msr	PRIMASK, r3
}
 801522e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8015230:	4b1b      	ldr	r3, [pc, #108]	; (80152a0 <_tx_thread_system_suspend+0x228>)
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015236:	429a      	cmp	r2, r3
 8015238:	d022      	beq.n	8015280 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801523a:	4b15      	ldr	r3, [pc, #84]	; (8015290 <_tx_thread_system_suspend+0x218>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8015240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015242:	2b00      	cmp	r3, #0
 8015244:	d11c      	bne.n	8015280 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015246:	4b17      	ldr	r3, [pc, #92]	; (80152a4 <_tx_thread_system_suspend+0x22c>)
 8015248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801524c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801524e:	f3ef 8305 	mrs	r3, IPSR
 8015252:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015254:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8015256:	2b00      	cmp	r3, #0
 8015258:	d10c      	bne.n	8015274 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801525a:	f3ef 8310 	mrs	r3, PRIMASK
 801525e:	617b      	str	r3, [r7, #20]
    return(posture);
 8015260:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8015262:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015264:	b662      	cpsie	i
}
 8015266:	bf00      	nop
 8015268:	693b      	ldr	r3, [r7, #16]
 801526a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	f383 8810 	msr	PRIMASK, r3
}
 8015272:	bf00      	nop
}
 8015274:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8015276:	e003      	b.n	8015280 <_tx_thread_system_suspend+0x208>
                return;
 8015278:	bf00      	nop
 801527a:	e002      	b.n	8015282 <_tx_thread_system_suspend+0x20a>
            return;
 801527c:	bf00      	nop
 801527e:	e000      	b.n	8015282 <_tx_thread_system_suspend+0x20a>
    return;
 8015280:	bf00      	nop
}
 8015282:	3778      	adds	r7, #120	; 0x78
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}
 8015288:	24014ebc 	.word	0x24014ebc
 801528c:	240154c0 	.word	0x240154c0
 8015290:	24014f54 	.word	0x24014f54
 8015294:	24014ed4 	.word	0x24014ed4
 8015298:	24014ecc 	.word	0x24014ecc
 801529c:	24014ed0 	.word	0x24014ed0
 80152a0:	24014ec0 	.word	0x24014ec0
 80152a4:	e000ed04 	.word	0xe000ed04

080152a8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80152a8:	b480      	push	{r7}
 80152aa:	b087      	sub	sp, #28
 80152ac:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80152ae:	4b21      	ldr	r3, [pc, #132]	; (8015334 <_tx_thread_time_slice+0x8c>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80152b4:	f3ef 8310 	mrs	r3, PRIMASK
 80152b8:	60fb      	str	r3, [r7, #12]
    return(posture);
 80152ba:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80152bc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80152be:	b672      	cpsid	i
    return(int_posture);
 80152c0:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80152c2:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80152c4:	4b1c      	ldr	r3, [pc, #112]	; (8015338 <_tx_thread_time_slice+0x90>)
 80152c6:	2200      	movs	r2, #0
 80152c8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d024      	beq.n	801531a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d120      	bne.n	801531a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	69da      	ldr	r2, [r3, #28]
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	699b      	ldr	r3, [r3, #24]
 80152e4:	4a15      	ldr	r2, [pc, #84]	; (801533c <_tx_thread_time_slice+0x94>)
 80152e6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80152e8:	697b      	ldr	r3, [r7, #20]
 80152ea:	6a1b      	ldr	r3, [r3, #32]
 80152ec:	697a      	ldr	r2, [r7, #20]
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d013      	beq.n	801531a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80152f2:	697b      	ldr	r3, [r7, #20]
 80152f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d10d      	bne.n	801531a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80152fe:	697b      	ldr	r3, [r7, #20]
 8015300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015302:	697a      	ldr	r2, [r7, #20]
 8015304:	6a12      	ldr	r2, [r2, #32]
 8015306:	490e      	ldr	r1, [pc, #56]	; (8015340 <_tx_thread_time_slice+0x98>)
 8015308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801530c:	4b0d      	ldr	r3, [pc, #52]	; (8015344 <_tx_thread_time_slice+0x9c>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	4a0b      	ldr	r2, [pc, #44]	; (8015340 <_tx_thread_time_slice+0x98>)
 8015312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015316:	4a0c      	ldr	r2, [pc, #48]	; (8015348 <_tx_thread_time_slice+0xa0>)
 8015318:	6013      	str	r3, [r2, #0]
 801531a:	693b      	ldr	r3, [r7, #16]
 801531c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f383 8810 	msr	PRIMASK, r3
}
 8015324:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8015326:	bf00      	nop
 8015328:	371c      	adds	r7, #28
 801532a:	46bd      	mov	sp, r7
 801532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop
 8015334:	24014ebc 	.word	0x24014ebc
 8015338:	24014f64 	.word	0x24014f64
 801533c:	240154c0 	.word	0x240154c0
 8015340:	24014ed4 	.word	0x24014ed4
 8015344:	24014ed0 	.word	0x24014ed0
 8015348:	24014ec0 	.word	0x24014ec0

0801534c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b08a      	sub	sp, #40	; 0x28
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015358:	f3ef 8310 	mrs	r3, PRIMASK
 801535c:	617b      	str	r3, [r7, #20]
    return(posture);
 801535e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8015360:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015362:	b672      	cpsid	i
    return(int_posture);
 8015364:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8015366:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8015368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801536c:	2b04      	cmp	r3, #4
 801536e:	d10e      	bne.n	801538e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8015370:	4b13      	ldr	r3, [pc, #76]	; (80153c0 <_tx_thread_timeout+0x74>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	3301      	adds	r3, #1
 8015376:	4a12      	ldr	r2, [pc, #72]	; (80153c0 <_tx_thread_timeout+0x74>)
 8015378:	6013      	str	r3, [r2, #0]
 801537a:	6a3b      	ldr	r3, [r7, #32]
 801537c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	f383 8810 	msr	PRIMASK, r3
}
 8015384:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8015386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015388:	f7ff fd76 	bl	8014e78 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801538c:	e013      	b.n	80153b6 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015392:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8015394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015396:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801539a:	61bb      	str	r3, [r7, #24]
 801539c:	6a3b      	ldr	r3, [r7, #32]
 801539e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80153a0:	68bb      	ldr	r3, [r7, #8]
 80153a2:	f383 8810 	msr	PRIMASK, r3
}
 80153a6:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80153a8:	69fb      	ldr	r3, [r7, #28]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d003      	beq.n	80153b6 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80153ae:	69fb      	ldr	r3, [r7, #28]
 80153b0:	69b9      	ldr	r1, [r7, #24]
 80153b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80153b4:	4798      	blx	r3
}
 80153b6:	bf00      	nop
 80153b8:	3728      	adds	r7, #40	; 0x28
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	24014f54 	.word	0x24014f54

080153c4 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 80153c4:	b480      	push	{r7}
 80153c6:	b087      	sub	sp, #28
 80153c8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80153ca:	f3ef 8310 	mrs	r3, PRIMASK
 80153ce:	60bb      	str	r3, [r7, #8]
    return(posture);
 80153d0:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 80153d2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 80153d4:	b672      	cpsid	i
    return(int_posture);
 80153d6:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 80153d8:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 80153da:	4b08      	ldr	r3, [pc, #32]	; (80153fc <_tx_time_get+0x38>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	613b      	str	r3, [r7, #16]
 80153e0:	697b      	ldr	r3, [r7, #20]
 80153e2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	f383 8810 	msr	PRIMASK, r3
}
 80153ea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 80153ec:	693b      	ldr	r3, [r7, #16]
}
 80153ee:	4618      	mov	r0, r3
 80153f0:	371c      	adds	r7, #28
 80153f2:	46bd      	mov	sp, r7
 80153f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f8:	4770      	bx	lr
 80153fa:	bf00      	nop
 80153fc:	24014f60 	.word	0x24014f60

08015400 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b08a      	sub	sp, #40	; 0x28
 8015404:	af00      	add	r7, sp, #0
 8015406:	60f8      	str	r0, [r7, #12]
 8015408:	60b9      	str	r1, [r7, #8]
 801540a:	607a      	str	r2, [r7, #4]
 801540c:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 801540e:	222c      	movs	r2, #44	; 0x2c
 8015410:	2100      	movs	r1, #0
 8015412:	68f8      	ldr	r0, [r7, #12]
 8015414:	f000 ff3e 	bl	8016294 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	68ba      	ldr	r2, [r7, #8]
 801541c:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015422:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015428:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	687a      	ldr	r2, [r7, #4]
 801542e:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	683a      	ldr	r2, [r7, #0]
 8015434:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015436:	f3ef 8310 	mrs	r3, PRIMASK
 801543a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801543c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801543e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015440:	b672      	cpsid	i
    return(int_posture);
 8015442:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8015444:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	4a1c      	ldr	r2, [pc, #112]	; (80154bc <_tx_timer_create+0xbc>)
 801544a:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 801544c:	4b1c      	ldr	r3, [pc, #112]	; (80154c0 <_tx_timer_create+0xc0>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d109      	bne.n	8015468 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8015454:	4a1b      	ldr	r2, [pc, #108]	; (80154c4 <_tx_timer_create+0xc4>)
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	68fa      	ldr	r2, [r7, #12]
 801545e:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	68fa      	ldr	r2, [r7, #12]
 8015464:	629a      	str	r2, [r3, #40]	; 0x28
 8015466:	e011      	b.n	801548c <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8015468:	4b16      	ldr	r3, [pc, #88]	; (80154c4 <_tx_timer_create+0xc4>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 801546e:	6a3b      	ldr	r3, [r7, #32]
 8015470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015472:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8015474:	6a3b      	ldr	r3, [r7, #32]
 8015476:	68fa      	ldr	r2, [r7, #12]
 8015478:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 801547a:	69fb      	ldr	r3, [r7, #28]
 801547c:	68fa      	ldr	r2, [r7, #12]
 801547e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	69fa      	ldr	r2, [r7, #28]
 8015484:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	6a3a      	ldr	r2, [r7, #32]
 801548a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 801548c:	4b0c      	ldr	r3, [pc, #48]	; (80154c0 <_tx_timer_create+0xc0>)
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	3301      	adds	r3, #1
 8015492:	4a0b      	ldr	r2, [pc, #44]	; (80154c0 <_tx_timer_create+0xc0>)
 8015494:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8015496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015498:	2b01      	cmp	r3, #1
 801549a:	d104      	bne.n	80154a6 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	3308      	adds	r3, #8
 80154a0:	4618      	mov	r0, r3
 80154a2:	f000 f8af 	bl	8015604 <_tx_timer_system_activate>
 80154a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154a8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80154aa:	693b      	ldr	r3, [r7, #16]
 80154ac:	f383 8810 	msr	PRIMASK, r3
}
 80154b0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80154b2:	2300      	movs	r3, #0
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	3728      	adds	r7, #40	; 0x28
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd80      	pop	{r7, pc}
 80154bc:	4154494d 	.word	0x4154494d
 80154c0:	24014ffc 	.word	0x24014ffc
 80154c4:	24014ff8 	.word	0x24014ff8

080154c8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b084      	sub	sp, #16
 80154cc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80154ce:	f3ef 8310 	mrs	r3, PRIMASK
 80154d2:	607b      	str	r3, [r7, #4]
    return(posture);
 80154d4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80154d6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80154d8:	b672      	cpsid	i
    return(int_posture);
 80154da:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80154dc:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80154de:	4b09      	ldr	r3, [pc, #36]	; (8015504 <_tx_timer_expiration_process+0x3c>)
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	3301      	adds	r3, #1
 80154e4:	4a07      	ldr	r2, [pc, #28]	; (8015504 <_tx_timer_expiration_process+0x3c>)
 80154e6:	6013      	str	r3, [r2, #0]
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	f383 8810 	msr	PRIMASK, r3
}
 80154f2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80154f4:	4804      	ldr	r0, [pc, #16]	; (8015508 <_tx_timer_expiration_process+0x40>)
 80154f6:	f7ff fcbf 	bl	8014e78 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80154fa:	bf00      	nop
 80154fc:	3710      	adds	r7, #16
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}
 8015502:	bf00      	nop
 8015504:	24014f54 	.word	0x24014f54
 8015508:	24015004 	.word	0x24015004

0801550c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 801550c:	b590      	push	{r4, r7, lr}
 801550e:	b089      	sub	sp, #36	; 0x24
 8015510:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8015512:	4b28      	ldr	r3, [pc, #160]	; (80155b4 <_tx_timer_initialize+0xa8>)
 8015514:	2200      	movs	r2, #0
 8015516:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8015518:	4b27      	ldr	r3, [pc, #156]	; (80155b8 <_tx_timer_initialize+0xac>)
 801551a:	2200      	movs	r2, #0
 801551c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801551e:	4b27      	ldr	r3, [pc, #156]	; (80155bc <_tx_timer_initialize+0xb0>)
 8015520:	2200      	movs	r2, #0
 8015522:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8015524:	4b26      	ldr	r3, [pc, #152]	; (80155c0 <_tx_timer_initialize+0xb4>)
 8015526:	2200      	movs	r2, #0
 8015528:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801552a:	4b26      	ldr	r3, [pc, #152]	; (80155c4 <_tx_timer_initialize+0xb8>)
 801552c:	2200      	movs	r2, #0
 801552e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8015530:	2280      	movs	r2, #128	; 0x80
 8015532:	2100      	movs	r1, #0
 8015534:	4824      	ldr	r0, [pc, #144]	; (80155c8 <_tx_timer_initialize+0xbc>)
 8015536:	f000 fead 	bl	8016294 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 801553a:	4b24      	ldr	r3, [pc, #144]	; (80155cc <_tx_timer_initialize+0xc0>)
 801553c:	4a22      	ldr	r2, [pc, #136]	; (80155c8 <_tx_timer_initialize+0xbc>)
 801553e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8015540:	4b23      	ldr	r3, [pc, #140]	; (80155d0 <_tx_timer_initialize+0xc4>)
 8015542:	4a21      	ldr	r2, [pc, #132]	; (80155c8 <_tx_timer_initialize+0xbc>)
 8015544:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8015546:	4b23      	ldr	r3, [pc, #140]	; (80155d4 <_tx_timer_initialize+0xc8>)
 8015548:	4a23      	ldr	r2, [pc, #140]	; (80155d8 <_tx_timer_initialize+0xcc>)
 801554a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 801554c:	4b21      	ldr	r3, [pc, #132]	; (80155d4 <_tx_timer_initialize+0xc8>)
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	3304      	adds	r3, #4
 8015552:	4a20      	ldr	r2, [pc, #128]	; (80155d4 <_tx_timer_initialize+0xc8>)
 8015554:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8015556:	4b21      	ldr	r3, [pc, #132]	; (80155dc <_tx_timer_initialize+0xd0>)
 8015558:	4a21      	ldr	r2, [pc, #132]	; (80155e0 <_tx_timer_initialize+0xd4>)
 801555a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801555c:	4b21      	ldr	r3, [pc, #132]	; (80155e4 <_tx_timer_initialize+0xd8>)
 801555e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015562:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8015564:	4b20      	ldr	r3, [pc, #128]	; (80155e8 <_tx_timer_initialize+0xdc>)
 8015566:	2200      	movs	r2, #0
 8015568:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 801556a:	4b1c      	ldr	r3, [pc, #112]	; (80155dc <_tx_timer_initialize+0xd0>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	4a1d      	ldr	r2, [pc, #116]	; (80155e4 <_tx_timer_initialize+0xd8>)
 8015570:	6812      	ldr	r2, [r2, #0]
 8015572:	491d      	ldr	r1, [pc, #116]	; (80155e8 <_tx_timer_initialize+0xdc>)
 8015574:	6809      	ldr	r1, [r1, #0]
 8015576:	481c      	ldr	r0, [pc, #112]	; (80155e8 <_tx_timer_initialize+0xdc>)
 8015578:	6800      	ldr	r0, [r0, #0]
 801557a:	2400      	movs	r4, #0
 801557c:	9405      	str	r4, [sp, #20]
 801557e:	2400      	movs	r4, #0
 8015580:	9404      	str	r4, [sp, #16]
 8015582:	9003      	str	r0, [sp, #12]
 8015584:	9102      	str	r1, [sp, #8]
 8015586:	9201      	str	r2, [sp, #4]
 8015588:	9300      	str	r3, [sp, #0]
 801558a:	4b18      	ldr	r3, [pc, #96]	; (80155ec <_tx_timer_initialize+0xe0>)
 801558c:	4a18      	ldr	r2, [pc, #96]	; (80155f0 <_tx_timer_initialize+0xe4>)
 801558e:	4919      	ldr	r1, [pc, #100]	; (80155f4 <_tx_timer_initialize+0xe8>)
 8015590:	4819      	ldr	r0, [pc, #100]	; (80155f8 <_tx_timer_initialize+0xec>)
 8015592:	f7ff f9a7 	bl	80148e4 <_tx_thread_create>
 8015596:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d1e5      	bne.n	801556a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 801559e:	4b17      	ldr	r3, [pc, #92]	; (80155fc <_tx_timer_initialize+0xf0>)
 80155a0:	2200      	movs	r2, #0
 80155a2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80155a4:	4b16      	ldr	r3, [pc, #88]	; (8015600 <_tx_timer_initialize+0xf4>)
 80155a6:	2200      	movs	r2, #0
 80155a8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80155aa:	bf00      	nop
 80155ac:	370c      	adds	r7, #12
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd90      	pop	{r4, r7, pc}
 80155b2:	bf00      	nop
 80155b4:	24014f60 	.word	0x24014f60
 80155b8:	240154c0 	.word	0x240154c0
 80155bc:	24014f64 	.word	0x24014f64
 80155c0:	24014ff4 	.word	0x24014ff4
 80155c4:	24015000 	.word	0x24015000
 80155c8:	24014f68 	.word	0x24014f68
 80155cc:	24014fe8 	.word	0x24014fe8
 80155d0:	24014ff0 	.word	0x24014ff0
 80155d4:	24014fec 	.word	0x24014fec
 80155d8:	24014fe4 	.word	0x24014fe4
 80155dc:	240150b4 	.word	0x240150b4
 80155e0:	240150c0 	.word	0x240150c0
 80155e4:	240150b8 	.word	0x240150b8
 80155e8:	240150bc 	.word	0x240150bc
 80155ec:	4154494d 	.word	0x4154494d
 80155f0:	08015739 	.word	0x08015739
 80155f4:	080163a4 	.word	0x080163a4
 80155f8:	24015004 	.word	0x24015004
 80155fc:	24014ff8 	.word	0x24014ff8
 8015600:	24014ffc 	.word	0x24014ffc

08015604 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8015604:	b480      	push	{r7}
 8015606:	b089      	sub	sp, #36	; 0x24
 8015608:	af00      	add	r7, sp, #0
 801560a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8015612:	697b      	ldr	r3, [r7, #20]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d04a      	beq.n	80156ae <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8015618:	697b      	ldr	r3, [r7, #20]
 801561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801561e:	d046      	beq.n	80156ae <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	699b      	ldr	r3, [r3, #24]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d142      	bne.n	80156ae <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	2b20      	cmp	r3, #32
 801562c:	d902      	bls.n	8015634 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801562e:	231f      	movs	r3, #31
 8015630:	61bb      	str	r3, [r7, #24]
 8015632:	e002      	b.n	801563a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	3b01      	subs	r3, #1
 8015638:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801563a:	4b20      	ldr	r3, [pc, #128]	; (80156bc <_tx_timer_system_activate+0xb8>)
 801563c:	681a      	ldr	r2, [r3, #0]
 801563e:	69bb      	ldr	r3, [r7, #24]
 8015640:	009b      	lsls	r3, r3, #2
 8015642:	4413      	add	r3, r2
 8015644:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8015646:	4b1e      	ldr	r3, [pc, #120]	; (80156c0 <_tx_timer_system_activate+0xbc>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	69fa      	ldr	r2, [r7, #28]
 801564c:	429a      	cmp	r2, r3
 801564e:	d30b      	bcc.n	8015668 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8015650:	4b1b      	ldr	r3, [pc, #108]	; (80156c0 <_tx_timer_system_activate+0xbc>)
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	69fa      	ldr	r2, [r7, #28]
 8015656:	1ad3      	subs	r3, r2, r3
 8015658:	109b      	asrs	r3, r3, #2
 801565a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 801565c:	4b19      	ldr	r3, [pc, #100]	; (80156c4 <_tx_timer_system_activate+0xc0>)
 801565e:	681a      	ldr	r2, [r3, #0]
 8015660:	693b      	ldr	r3, [r7, #16]
 8015662:	009b      	lsls	r3, r3, #2
 8015664:	4413      	add	r3, r2
 8015666:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8015668:	69fb      	ldr	r3, [r7, #28]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d109      	bne.n	8015684 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	687a      	ldr	r2, [r7, #4]
 8015674:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	687a      	ldr	r2, [r7, #4]
 801567a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 801567c:	69fb      	ldr	r3, [r7, #28]
 801567e:	687a      	ldr	r2, [r7, #4]
 8015680:	601a      	str	r2, [r3, #0]
 8015682:	e011      	b.n	80156a8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8015684:	69fb      	ldr	r3, [r7, #28]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	695b      	ldr	r3, [r3, #20]
 801568e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	687a      	ldr	r2, [r7, #4]
 8015694:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	687a      	ldr	r2, [r7, #4]
 801569a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	68fa      	ldr	r2, [r7, #12]
 80156a0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	68ba      	ldr	r2, [r7, #8]
 80156a6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	69fa      	ldr	r2, [r7, #28]
 80156ac:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80156ae:	bf00      	nop
 80156b0:	3724      	adds	r7, #36	; 0x24
 80156b2:	46bd      	mov	sp, r7
 80156b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b8:	4770      	bx	lr
 80156ba:	bf00      	nop
 80156bc:	24014ff0 	.word	0x24014ff0
 80156c0:	24014fec 	.word	0x24014fec
 80156c4:	24014fe8 	.word	0x24014fe8

080156c8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80156c8:	b480      	push	{r7}
 80156ca:	b087      	sub	sp, #28
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	699b      	ldr	r3, [r3, #24]
 80156d4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d026      	beq.n	801572a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	691b      	ldr	r3, [r3, #16]
 80156e0:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80156e2:	687a      	ldr	r2, [r7, #4]
 80156e4:	693b      	ldr	r3, [r7, #16]
 80156e6:	429a      	cmp	r2, r3
 80156e8:	d108      	bne.n	80156fc <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	687a      	ldr	r2, [r7, #4]
 80156f0:	429a      	cmp	r2, r3
 80156f2:	d117      	bne.n	8015724 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	2200      	movs	r2, #0
 80156f8:	601a      	str	r2, [r3, #0]
 80156fa:	e013      	b.n	8015724 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	695b      	ldr	r3, [r3, #20]
 8015700:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	68fa      	ldr	r2, [r7, #12]
 8015706:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	693a      	ldr	r2, [r7, #16]
 801570c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	687a      	ldr	r2, [r7, #4]
 8015714:	429a      	cmp	r2, r3
 8015716:	d105      	bne.n	8015724 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	697a      	ldr	r2, [r7, #20]
 801571c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	693a      	ldr	r2, [r7, #16]
 8015722:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	2200      	movs	r2, #0
 8015728:	619a      	str	r2, [r3, #24]
    }
}
 801572a:	bf00      	nop
 801572c:	371c      	adds	r7, #28
 801572e:	46bd      	mov	sp, r7
 8015730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015734:	4770      	bx	lr
	...

08015738 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b098      	sub	sp, #96	; 0x60
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8015740:	2300      	movs	r3, #0
 8015742:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	4a73      	ldr	r2, [pc, #460]	; (8015914 <_tx_timer_thread_entry+0x1dc>)
 8015748:	4293      	cmp	r3, r2
 801574a:	f040 80de 	bne.w	801590a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801574e:	f3ef 8310 	mrs	r3, PRIMASK
 8015752:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8015754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8015756:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8015758:	b672      	cpsid	i
    return(int_posture);
 801575a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 801575c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 801575e:	4b6e      	ldr	r3, [pc, #440]	; (8015918 <_tx_timer_thread_entry+0x1e0>)
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d003      	beq.n	8015774 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	f107 020c 	add.w	r2, r7, #12
 8015772:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8015774:	4b68      	ldr	r3, [pc, #416]	; (8015918 <_tx_timer_thread_entry+0x1e0>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	2200      	movs	r2, #0
 801577a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 801577c:	4b66      	ldr	r3, [pc, #408]	; (8015918 <_tx_timer_thread_entry+0x1e0>)
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	3304      	adds	r3, #4
 8015782:	4a65      	ldr	r2, [pc, #404]	; (8015918 <_tx_timer_thread_entry+0x1e0>)
 8015784:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8015786:	4b64      	ldr	r3, [pc, #400]	; (8015918 <_tx_timer_thread_entry+0x1e0>)
 8015788:	681a      	ldr	r2, [r3, #0]
 801578a:	4b64      	ldr	r3, [pc, #400]	; (801591c <_tx_timer_thread_entry+0x1e4>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	429a      	cmp	r2, r3
 8015790:	d103      	bne.n	801579a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8015792:	4b63      	ldr	r3, [pc, #396]	; (8015920 <_tx_timer_thread_entry+0x1e8>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	4a60      	ldr	r2, [pc, #384]	; (8015918 <_tx_timer_thread_entry+0x1e0>)
 8015798:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 801579a:	4b62      	ldr	r3, [pc, #392]	; (8015924 <_tx_timer_thread_entry+0x1ec>)
 801579c:	2200      	movs	r2, #0
 801579e:	601a      	str	r2, [r3, #0]
 80157a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80157a2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80157a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157a6:	f383 8810 	msr	PRIMASK, r3
}
 80157aa:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80157ac:	f3ef 8310 	mrs	r3, PRIMASK
 80157b0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80157b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80157b4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80157b6:	b672      	cpsid	i
    return(int_posture);
 80157b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80157ba:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80157bc:	e07f      	b.n	80158be <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	691b      	ldr	r3, [r3, #16]
 80157c6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80157c8:	2300      	movs	r3, #0
 80157ca:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80157cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80157ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d102      	bne.n	80157da <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80157d4:	2300      	movs	r3, #0
 80157d6:	60fb      	str	r3, [r7, #12]
 80157d8:	e00e      	b.n	80157f8 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80157da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157dc:	695b      	ldr	r3, [r3, #20]
 80157de:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80157e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80157e4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80157e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80157e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80157ea:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80157ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157ee:	f107 020c 	add.w	r2, r7, #12
 80157f2:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80157f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157f6:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80157f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	2b20      	cmp	r3, #32
 80157fe:	d911      	bls.n	8015824 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8015800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8015808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801580a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 801580c:	2300      	movs	r3, #0
 801580e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8015810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015812:	f107 0208 	add.w	r2, r7, #8
 8015816:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8015818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801581a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801581c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801581e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015820:	60bb      	str	r3, [r7, #8]
 8015822:	e01a      	b.n	801585a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8015824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015826:	689b      	ldr	r3, [r3, #8]
 8015828:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 801582a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801582c:	68db      	ldr	r3, [r3, #12]
 801582e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8015830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015832:	685a      	ldr	r2, [r3, #4]
 8015834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015836:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8015838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d009      	beq.n	8015854 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8015840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015842:	f107 0208 	add.w	r2, r7, #8
 8015846:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8015848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801584a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801584c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 801584e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015850:	60bb      	str	r3, [r7, #8]
 8015852:	e002      	b.n	801585a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8015854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015856:	2200      	movs	r2, #0
 8015858:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 801585a:	4a33      	ldr	r2, [pc, #204]	; (8015928 <_tx_timer_thread_entry+0x1f0>)
 801585c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801585e:	6013      	str	r3, [r2, #0]
 8015860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015862:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015866:	f383 8810 	msr	PRIMASK, r3
}
 801586a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 801586c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801586e:	2b00      	cmp	r3, #0
 8015870:	d002      	beq.n	8015878 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8015872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015874:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015876:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015878:	f3ef 8310 	mrs	r3, PRIMASK
 801587c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8015880:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8015882:	b672      	cpsid	i
    return(int_posture);
 8015884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8015886:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8015888:	4b27      	ldr	r3, [pc, #156]	; (8015928 <_tx_timer_thread_entry+0x1f0>)
 801588a:	2200      	movs	r2, #0
 801588c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 801588e:	68bb      	ldr	r3, [r7, #8]
 8015890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015892:	429a      	cmp	r2, r3
 8015894:	d105      	bne.n	80158a2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8015896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015898:	2200      	movs	r2, #0
 801589a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 801589c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801589e:	f7ff feb1 	bl	8015604 <_tx_timer_system_activate>
 80158a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80158a6:	69bb      	ldr	r3, [r7, #24]
 80158a8:	f383 8810 	msr	PRIMASK, r3
}
 80158ac:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80158ae:	f3ef 8310 	mrs	r3, PRIMASK
 80158b2:	623b      	str	r3, [r7, #32]
    return(posture);
 80158b4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80158b6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80158b8:	b672      	cpsid	i
    return(int_posture);
 80158ba:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80158bc:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	f47f af7c 	bne.w	80157be <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80158c6:	4b17      	ldr	r3, [pc, #92]	; (8015924 <_tx_timer_thread_entry+0x1ec>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d116      	bne.n	80158fc <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80158ce:	4b17      	ldr	r3, [pc, #92]	; (801592c <_tx_timer_thread_entry+0x1f4>)
 80158d0:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80158d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158d4:	2203      	movs	r2, #3
 80158d6:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80158d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158da:	2201      	movs	r2, #1
 80158dc:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80158de:	4b14      	ldr	r3, [pc, #80]	; (8015930 <_tx_timer_thread_entry+0x1f8>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	3301      	adds	r3, #1
 80158e4:	4a12      	ldr	r2, [pc, #72]	; (8015930 <_tx_timer_thread_entry+0x1f8>)
 80158e6:	6013      	str	r3, [r2, #0]
 80158e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80158ec:	697b      	ldr	r3, [r7, #20]
 80158ee:	f383 8810 	msr	PRIMASK, r3
}
 80158f2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80158f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80158f6:	f7ff fbbf 	bl	8015078 <_tx_thread_system_suspend>
 80158fa:	e728      	b.n	801574e <_tx_timer_thread_entry+0x16>
 80158fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015900:	693b      	ldr	r3, [r7, #16]
 8015902:	f383 8810 	msr	PRIMASK, r3
}
 8015906:	bf00      	nop
            TX_DISABLE
 8015908:	e721      	b.n	801574e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 801590a:	bf00      	nop
 801590c:	3760      	adds	r7, #96	; 0x60
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}
 8015912:	bf00      	nop
 8015914:	4154494d 	.word	0x4154494d
 8015918:	24014ff0 	.word	0x24014ff0
 801591c:	24014fec 	.word	0x24014fec
 8015920:	24014fe8 	.word	0x24014fe8
 8015924:	24014ff4 	.word	0x24014ff4
 8015928:	24015000 	.word	0x24015000
 801592c:	24015004 	.word	0x24015004
 8015930:	24014f54 	.word	0x24014f54

08015934 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b08a      	sub	sp, #40	; 0x28
 8015938:	af00      	add	r7, sp, #0
 801593a:	60f8      	str	r0, [r7, #12]
 801593c:	60b9      	str	r1, [r7, #8]
 801593e:	607a      	str	r2, [r7, #4]
 8015940:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015942:	2300      	movs	r3, #0
 8015944:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d102      	bne.n	8015952 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801594c:	2302      	movs	r3, #2
 801594e:	627b      	str	r3, [r7, #36]	; 0x24
 8015950:	e029      	b.n	80159a6 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	4a2d      	ldr	r2, [pc, #180]	; (8015a0c <_txe_byte_allocate+0xd8>)
 8015958:	4293      	cmp	r3, r2
 801595a:	d002      	beq.n	8015962 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801595c:	2302      	movs	r3, #2
 801595e:	627b      	str	r3, [r7, #36]	; 0x24
 8015960:	e021      	b.n	80159a6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8015962:	68bb      	ldr	r3, [r7, #8]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d102      	bne.n	801596e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8015968:	2303      	movs	r3, #3
 801596a:	627b      	str	r3, [r7, #36]	; 0x24
 801596c:	e01b      	b.n	80159a6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d102      	bne.n	801597a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8015974:	2305      	movs	r3, #5
 8015976:	627b      	str	r3, [r7, #36]	; 0x24
 8015978:	e015      	b.n	80159a6 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	69db      	ldr	r3, [r3, #28]
 801597e:	687a      	ldr	r2, [r7, #4]
 8015980:	429a      	cmp	r2, r3
 8015982:	d902      	bls.n	801598a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8015984:	2305      	movs	r3, #5
 8015986:	627b      	str	r3, [r7, #36]	; 0x24
 8015988:	e00d      	b.n	80159a6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801598a:	683b      	ldr	r3, [r7, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d00a      	beq.n	80159a6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015990:	f3ef 8305 	mrs	r3, IPSR
 8015994:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8015996:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015998:	4b1d      	ldr	r3, [pc, #116]	; (8015a10 <_txe_byte_allocate+0xdc>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	4313      	orrs	r3, r2
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d001      	beq.n	80159a6 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80159a2:	2304      	movs	r3, #4
 80159a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80159a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d108      	bne.n	80159be <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80159ac:	4b19      	ldr	r3, [pc, #100]	; (8015a14 <_txe_byte_allocate+0xe0>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80159b2:	6a3b      	ldr	r3, [r7, #32]
 80159b4:	4a18      	ldr	r2, [pc, #96]	; (8015a18 <_txe_byte_allocate+0xe4>)
 80159b6:	4293      	cmp	r3, r2
 80159b8:	d101      	bne.n	80159be <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80159ba:	2313      	movs	r3, #19
 80159bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80159be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d114      	bne.n	80159ee <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80159c4:	f3ef 8305 	mrs	r3, IPSR
 80159c8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80159ca:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80159cc:	4b10      	ldr	r3, [pc, #64]	; (8015a10 <_txe_byte_allocate+0xdc>)
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	4313      	orrs	r3, r2
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d00b      	beq.n	80159ee <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80159d6:	f3ef 8305 	mrs	r3, IPSR
 80159da:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80159dc:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80159de:	4b0c      	ldr	r3, [pc, #48]	; (8015a10 <_txe_byte_allocate+0xdc>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	4313      	orrs	r3, r2
 80159e4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80159e8:	d201      	bcs.n	80159ee <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80159ea:	2313      	movs	r3, #19
 80159ec:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80159ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d106      	bne.n	8015a02 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	687a      	ldr	r2, [r7, #4]
 80159f8:	68b9      	ldr	r1, [r7, #8]
 80159fa:	68f8      	ldr	r0, [r7, #12]
 80159fc:	f7fc ff88 	bl	8012910 <_tx_byte_allocate>
 8015a00:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8015a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015a04:	4618      	mov	r0, r3
 8015a06:	3728      	adds	r7, #40	; 0x28
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}
 8015a0c:	42595445 	.word	0x42595445
 8015a10:	2400006c 	.word	0x2400006c
 8015a14:	24014ebc 	.word	0x24014ebc
 8015a18:	24015004 	.word	0x24015004

08015a1c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b092      	sub	sp, #72	; 0x48
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	60b9      	str	r1, [r7, #8]
 8015a26:	607a      	str	r2, [r7, #4]
 8015a28:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d102      	bne.n	8015a3a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015a34:	2302      	movs	r3, #2
 8015a36:	647b      	str	r3, [r7, #68]	; 0x44
 8015a38:	e075      	b.n	8015b26 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8015a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a3c:	2b34      	cmp	r3, #52	; 0x34
 8015a3e:	d002      	beq.n	8015a46 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015a40:	2302      	movs	r3, #2
 8015a42:	647b      	str	r3, [r7, #68]	; 0x44
 8015a44:	e06f      	b.n	8015b26 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015a46:	f3ef 8310 	mrs	r3, PRIMASK
 8015a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015a50:	b672      	cpsid	i
    return(int_posture);
 8015a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015a54:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015a56:	4b3b      	ldr	r3, [pc, #236]	; (8015b44 <_txe_byte_pool_create+0x128>)
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	3301      	adds	r3, #1
 8015a5c:	4a39      	ldr	r2, [pc, #228]	; (8015b44 <_txe_byte_pool_create+0x128>)
 8015a5e:	6013      	str	r3, [r2, #0]
 8015a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a62:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a66:	f383 8810 	msr	PRIMASK, r3
}
 8015a6a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8015a6c:	4b36      	ldr	r3, [pc, #216]	; (8015b48 <_txe_byte_pool_create+0x12c>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8015a72:	2300      	movs	r3, #0
 8015a74:	643b      	str	r3, [r7, #64]	; 0x40
 8015a76:	e009      	b.n	8015a8c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8015a78:	68fa      	ldr	r2, [r7, #12]
 8015a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	d00b      	beq.n	8015a98 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8015a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8015a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a88:	3301      	adds	r3, #1
 8015a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8015a8c:	4b2f      	ldr	r3, [pc, #188]	; (8015b4c <_txe_byte_pool_create+0x130>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d3f0      	bcc.n	8015a78 <_txe_byte_pool_create+0x5c>
 8015a96:	e000      	b.n	8015a9a <_txe_byte_pool_create+0x7e>
                break;
 8015a98:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8015a9e:	623b      	str	r3, [r7, #32]
    return(posture);
 8015aa0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015aa2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015aa4:	b672      	cpsid	i
    return(int_posture);
 8015aa6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015aa8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015aaa:	4b26      	ldr	r3, [pc, #152]	; (8015b44 <_txe_byte_pool_create+0x128>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	3b01      	subs	r3, #1
 8015ab0:	4a24      	ldr	r2, [pc, #144]	; (8015b44 <_txe_byte_pool_create+0x128>)
 8015ab2:	6013      	str	r3, [r2, #0]
 8015ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ab6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aba:	f383 8810 	msr	PRIMASK, r3
}
 8015abe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015ac0:	f7ff f9a0 	bl	8014e04 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8015ac4:	68fa      	ldr	r2, [r7, #12]
 8015ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	d102      	bne.n	8015ad2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8015acc:	2302      	movs	r3, #2
 8015ace:	647b      	str	r3, [r7, #68]	; 0x44
 8015ad0:	e029      	b.n	8015b26 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d102      	bne.n	8015ade <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8015ad8:	2303      	movs	r3, #3
 8015ada:	647b      	str	r3, [r7, #68]	; 0x44
 8015adc:	e023      	b.n	8015b26 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8015ade:	683b      	ldr	r3, [r7, #0]
 8015ae0:	2b63      	cmp	r3, #99	; 0x63
 8015ae2:	d802      	bhi.n	8015aea <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8015ae4:	2305      	movs	r3, #5
 8015ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8015ae8:	e01d      	b.n	8015b26 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015aea:	4b19      	ldr	r3, [pc, #100]	; (8015b50 <_txe_byte_pool_create+0x134>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015af2:	4a18      	ldr	r2, [pc, #96]	; (8015b54 <_txe_byte_pool_create+0x138>)
 8015af4:	4293      	cmp	r3, r2
 8015af6:	d101      	bne.n	8015afc <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015af8:	2313      	movs	r3, #19
 8015afa:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015afc:	f3ef 8305 	mrs	r3, IPSR
 8015b00:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015b02:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015b04:	4b14      	ldr	r3, [pc, #80]	; (8015b58 <_txe_byte_pool_create+0x13c>)
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	4313      	orrs	r3, r2
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d00b      	beq.n	8015b26 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015b0e:	f3ef 8305 	mrs	r3, IPSR
 8015b12:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015b14:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015b16:	4b10      	ldr	r3, [pc, #64]	; (8015b58 <_txe_byte_pool_create+0x13c>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	4313      	orrs	r3, r2
 8015b1c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015b20:	d201      	bcs.n	8015b26 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8015b22:	2313      	movs	r3, #19
 8015b24:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d106      	bne.n	8015b3a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8015b2c:	683b      	ldr	r3, [r7, #0]
 8015b2e:	687a      	ldr	r2, [r7, #4]
 8015b30:	68b9      	ldr	r1, [r7, #8]
 8015b32:	68f8      	ldr	r0, [r7, #12]
 8015b34:	f7fd f82e 	bl	8012b94 <_tx_byte_pool_create>
 8015b38:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	3748      	adds	r7, #72	; 0x48
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}
 8015b44:	24014f54 	.word	0x24014f54
 8015b48:	24014eac 	.word	0x24014eac
 8015b4c:	24014eb0 	.word	0x24014eb0
 8015b50:	24014ebc 	.word	0x24014ebc
 8015b54:	24015004 	.word	0x24015004
 8015b58:	2400006c 	.word	0x2400006c

08015b5c <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b094      	sub	sp, #80	; 0x50
 8015b60:	af02      	add	r7, sp, #8
 8015b62:	60f8      	str	r0, [r7, #12]
 8015b64:	60b9      	str	r1, [r7, #8]
 8015b66:	607a      	str	r2, [r7, #4]
 8015b68:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d102      	bne.n	8015b7a <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015b74:	2309      	movs	r3, #9
 8015b76:	647b      	str	r3, [r7, #68]	; 0x44
 8015b78:	e083      	b.n	8015c82 <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8015b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b7c:	2b38      	cmp	r3, #56	; 0x38
 8015b7e:	d002      	beq.n	8015b86 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015b80:	2309      	movs	r3, #9
 8015b82:	647b      	str	r3, [r7, #68]	; 0x44
 8015b84:	e07d      	b.n	8015c82 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015b86:	f3ef 8310 	mrs	r3, PRIMASK
 8015b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015b90:	b672      	cpsid	i
    return(int_posture);
 8015b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015b94:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015b96:	4b43      	ldr	r3, [pc, #268]	; (8015ca4 <_txe_queue_create+0x148>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	3301      	adds	r3, #1
 8015b9c:	4a41      	ldr	r2, [pc, #260]	; (8015ca4 <_txe_queue_create+0x148>)
 8015b9e:	6013      	str	r3, [r2, #0]
 8015ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ba2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba6:	f383 8810 	msr	PRIMASK, r3
}
 8015baa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8015bac:	4b3e      	ldr	r3, [pc, #248]	; (8015ca8 <_txe_queue_create+0x14c>)
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8015bb6:	e009      	b.n	8015bcc <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8015bb8:	68fa      	ldr	r2, [r7, #12]
 8015bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bbc:	429a      	cmp	r2, r3
 8015bbe:	d00b      	beq.n	8015bd8 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8015bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8015bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bc8:	3301      	adds	r3, #1
 8015bca:	643b      	str	r3, [r7, #64]	; 0x40
 8015bcc:	4b37      	ldr	r3, [pc, #220]	; (8015cac <_txe_queue_create+0x150>)
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	d3f0      	bcc.n	8015bb8 <_txe_queue_create+0x5c>
 8015bd6:	e000      	b.n	8015bda <_txe_queue_create+0x7e>
                break;
 8015bd8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015bda:	f3ef 8310 	mrs	r3, PRIMASK
 8015bde:	623b      	str	r3, [r7, #32]
    return(posture);
 8015be0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015be2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015be4:	b672      	cpsid	i
    return(int_posture);
 8015be6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015be8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015bea:	4b2e      	ldr	r3, [pc, #184]	; (8015ca4 <_txe_queue_create+0x148>)
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	3b01      	subs	r3, #1
 8015bf0:	4a2c      	ldr	r2, [pc, #176]	; (8015ca4 <_txe_queue_create+0x148>)
 8015bf2:	6013      	str	r3, [r2, #0]
 8015bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bf6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bfa:	f383 8810 	msr	PRIMASK, r3
}
 8015bfe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015c00:	f7ff f900 	bl	8014e04 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8015c04:	68fa      	ldr	r2, [r7, #12]
 8015c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	d102      	bne.n	8015c12 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8015c0c:	2309      	movs	r3, #9
 8015c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8015c10:	e037      	b.n	8015c82 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d102      	bne.n	8015c1e <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8015c18:	2303      	movs	r3, #3
 8015c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8015c1c:	e031      	b.n	8015c82 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d102      	bne.n	8015c2a <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8015c24:	2305      	movs	r3, #5
 8015c26:	647b      	str	r3, [r7, #68]	; 0x44
 8015c28:	e02b      	b.n	8015c82 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	2b10      	cmp	r3, #16
 8015c2e:	d902      	bls.n	8015c36 <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8015c30:	2305      	movs	r3, #5
 8015c32:	647b      	str	r3, [r7, #68]	; 0x44
 8015c34:	e025      	b.n	8015c82 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 8015c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c38:	089b      	lsrs	r3, r3, #2
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	d902      	bls.n	8015c46 <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8015c40:	2305      	movs	r3, #5
 8015c42:	647b      	str	r3, [r7, #68]	; 0x44
 8015c44:	e01d      	b.n	8015c82 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015c46:	4b1a      	ldr	r3, [pc, #104]	; (8015cb0 <_txe_queue_create+0x154>)
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c4e:	4a19      	ldr	r2, [pc, #100]	; (8015cb4 <_txe_queue_create+0x158>)
 8015c50:	4293      	cmp	r3, r2
 8015c52:	d101      	bne.n	8015c58 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015c54:	2313      	movs	r3, #19
 8015c56:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015c58:	f3ef 8305 	mrs	r3, IPSR
 8015c5c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015c5e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015c60:	4b15      	ldr	r3, [pc, #84]	; (8015cb8 <_txe_queue_create+0x15c>)
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	4313      	orrs	r3, r2
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d00b      	beq.n	8015c82 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015c6a:	f3ef 8305 	mrs	r3, IPSR
 8015c6e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015c70:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015c72:	4b11      	ldr	r3, [pc, #68]	; (8015cb8 <_txe_queue_create+0x15c>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	4313      	orrs	r3, r2
 8015c78:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015c7c:	d201      	bcs.n	8015c82 <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8015c7e:	2313      	movs	r3, #19
 8015c80:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d108      	bne.n	8015c9a <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8015c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c8a:	9300      	str	r3, [sp, #0]
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	687a      	ldr	r2, [r7, #4]
 8015c90:	68b9      	ldr	r1, [r7, #8]
 8015c92:	68f8      	ldr	r0, [r7, #12]
 8015c94:	f7fe f876 	bl	8013d84 <_tx_queue_create>
 8015c98:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	3748      	adds	r7, #72	; 0x48
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}
 8015ca4:	24014f54 	.word	0x24014f54
 8015ca8:	24014e8c 	.word	0x24014e8c
 8015cac:	24014e90 	.word	0x24014e90
 8015cb0:	24014ebc 	.word	0x24014ebc
 8015cb4:	24015004 	.word	0x24015004
 8015cb8:	2400006c 	.word	0x2400006c

08015cbc <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b088      	sub	sp, #32
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	60f8      	str	r0, [r7, #12]
 8015cc4:	60b9      	str	r1, [r7, #8]
 8015cc6:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d102      	bne.n	8015cd8 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015cd2:	2309      	movs	r3, #9
 8015cd4:	61fb      	str	r3, [r7, #28]
 8015cd6:	e025      	b.n	8015d24 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	4a18      	ldr	r2, [pc, #96]	; (8015d40 <_txe_queue_receive+0x84>)
 8015cde:	4293      	cmp	r3, r2
 8015ce0:	d002      	beq.n	8015ce8 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015ce2:	2309      	movs	r3, #9
 8015ce4:	61fb      	str	r3, [r7, #28]
 8015ce6:	e01d      	b.n	8015d24 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d102      	bne.n	8015cf4 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8015cee:	2303      	movs	r3, #3
 8015cf0:	61fb      	str	r3, [r7, #28]
 8015cf2:	e017      	b.n	8015d24 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d014      	beq.n	8015d24 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015cfa:	f3ef 8305 	mrs	r3, IPSR
 8015cfe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015d00:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015d02:	4b10      	ldr	r3, [pc, #64]	; (8015d44 <_txe_queue_receive+0x88>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	4313      	orrs	r3, r2
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d002      	beq.n	8015d12 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8015d0c:	2304      	movs	r3, #4
 8015d0e:	61fb      	str	r3, [r7, #28]
 8015d10:	e008      	b.n	8015d24 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8015d12:	4b0d      	ldr	r3, [pc, #52]	; (8015d48 <_txe_queue_receive+0x8c>)
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8015d18:	69bb      	ldr	r3, [r7, #24]
 8015d1a:	4a0c      	ldr	r2, [pc, #48]	; (8015d4c <_txe_queue_receive+0x90>)
 8015d1c:	4293      	cmp	r3, r2
 8015d1e:	d101      	bne.n	8015d24 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8015d20:	2304      	movs	r3, #4
 8015d22:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015d24:	69fb      	ldr	r3, [r7, #28]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d105      	bne.n	8015d36 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 8015d2a:	687a      	ldr	r2, [r7, #4]
 8015d2c:	68b9      	ldr	r1, [r7, #8]
 8015d2e:	68f8      	ldr	r0, [r7, #12]
 8015d30:	f7fe f89c 	bl	8013e6c <_tx_queue_receive>
 8015d34:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8015d36:	69fb      	ldr	r3, [r7, #28]
}
 8015d38:	4618      	mov	r0, r3
 8015d3a:	3720      	adds	r7, #32
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	bd80      	pop	{r7, pc}
 8015d40:	51554555 	.word	0x51554555
 8015d44:	2400006c 	.word	0x2400006c
 8015d48:	24014ebc 	.word	0x24014ebc
 8015d4c:	24015004 	.word	0x24015004

08015d50 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b088      	sub	sp, #32
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	60f8      	str	r0, [r7, #12]
 8015d58:	60b9      	str	r1, [r7, #8]
 8015d5a:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d102      	bne.n	8015d6c <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015d66:	2309      	movs	r3, #9
 8015d68:	61fb      	str	r3, [r7, #28]
 8015d6a:	e025      	b.n	8015db8 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	4a18      	ldr	r2, [pc, #96]	; (8015dd4 <_txe_queue_send+0x84>)
 8015d72:	4293      	cmp	r3, r2
 8015d74:	d002      	beq.n	8015d7c <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015d76:	2309      	movs	r3, #9
 8015d78:	61fb      	str	r3, [r7, #28]
 8015d7a:	e01d      	b.n	8015db8 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8015d7c:	68bb      	ldr	r3, [r7, #8]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d102      	bne.n	8015d88 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8015d82:	2303      	movs	r3, #3
 8015d84:	61fb      	str	r3, [r7, #28]
 8015d86:	e017      	b.n	8015db8 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d014      	beq.n	8015db8 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015d8e:	f3ef 8305 	mrs	r3, IPSR
 8015d92:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015d94:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015d96:	4b10      	ldr	r3, [pc, #64]	; (8015dd8 <_txe_queue_send+0x88>)
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	4313      	orrs	r3, r2
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d002      	beq.n	8015da6 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8015da0:	2304      	movs	r3, #4
 8015da2:	61fb      	str	r3, [r7, #28]
 8015da4:	e008      	b.n	8015db8 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8015da6:	4b0d      	ldr	r3, [pc, #52]	; (8015ddc <_txe_queue_send+0x8c>)
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8015dac:	69bb      	ldr	r3, [r7, #24]
 8015dae:	4a0c      	ldr	r2, [pc, #48]	; (8015de0 <_txe_queue_send+0x90>)
 8015db0:	4293      	cmp	r3, r2
 8015db2:	d101      	bne.n	8015db8 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8015db4:	2304      	movs	r3, #4
 8015db6:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015db8:	69fb      	ldr	r3, [r7, #28]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d105      	bne.n	8015dca <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 8015dbe:	687a      	ldr	r2, [r7, #4]
 8015dc0:	68b9      	ldr	r1, [r7, #8]
 8015dc2:	68f8      	ldr	r0, [r7, #12]
 8015dc4:	f7fe fa1a 	bl	80141fc <_tx_queue_send>
 8015dc8:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8015dca:	69fb      	ldr	r3, [r7, #28]
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3720      	adds	r7, #32
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}
 8015dd4:	51554555 	.word	0x51554555
 8015dd8:	2400006c 	.word	0x2400006c
 8015ddc:	24014ebc 	.word	0x24014ebc
 8015de0:	24015004 	.word	0x24015004

08015de4 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b092      	sub	sp, #72	; 0x48
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	60f8      	str	r0, [r7, #12]
 8015dec:	60b9      	str	r1, [r7, #8]
 8015dee:	607a      	str	r2, [r7, #4]
 8015df0:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015df2:	2300      	movs	r3, #0
 8015df4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d102      	bne.n	8015e02 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8015dfc:	230c      	movs	r3, #12
 8015dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8015e00:	e054      	b.n	8015eac <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8015e02:	683b      	ldr	r3, [r7, #0]
 8015e04:	2b1c      	cmp	r3, #28
 8015e06:	d002      	beq.n	8015e0e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8015e08:	230c      	movs	r3, #12
 8015e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8015e0c:	e04e      	b.n	8015eac <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8015e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015e16:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015e18:	b672      	cpsid	i
    return(int_posture);
 8015e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015e1c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015e1e:	4b36      	ldr	r3, [pc, #216]	; (8015ef8 <_txe_semaphore_create+0x114>)
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	3301      	adds	r3, #1
 8015e24:	4a34      	ldr	r2, [pc, #208]	; (8015ef8 <_txe_semaphore_create+0x114>)
 8015e26:	6013      	str	r3, [r2, #0]
 8015e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e2a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e2e:	f383 8810 	msr	PRIMASK, r3
}
 8015e32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8015e34:	4b31      	ldr	r3, [pc, #196]	; (8015efc <_txe_semaphore_create+0x118>)
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8015e3e:	e009      	b.n	8015e54 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8015e40:	68fa      	ldr	r2, [r7, #12]
 8015e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e44:	429a      	cmp	r2, r3
 8015e46:	d00b      	beq.n	8015e60 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8015e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e4a:	695b      	ldr	r3, [r3, #20]
 8015e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8015e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e50:	3301      	adds	r3, #1
 8015e52:	643b      	str	r3, [r7, #64]	; 0x40
 8015e54:	4b2a      	ldr	r3, [pc, #168]	; (8015f00 <_txe_semaphore_create+0x11c>)
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d3f0      	bcc.n	8015e40 <_txe_semaphore_create+0x5c>
 8015e5e:	e000      	b.n	8015e62 <_txe_semaphore_create+0x7e>
                break;
 8015e60:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015e62:	f3ef 8310 	mrs	r3, PRIMASK
 8015e66:	623b      	str	r3, [r7, #32]
    return(posture);
 8015e68:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015e6a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015e6c:	b672      	cpsid	i
    return(int_posture);
 8015e6e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015e70:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015e72:	4b21      	ldr	r3, [pc, #132]	; (8015ef8 <_txe_semaphore_create+0x114>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	3b01      	subs	r3, #1
 8015e78:	4a1f      	ldr	r2, [pc, #124]	; (8015ef8 <_txe_semaphore_create+0x114>)
 8015e7a:	6013      	str	r3, [r2, #0]
 8015e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e7e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e82:	f383 8810 	msr	PRIMASK, r3
}
 8015e86:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015e88:	f7fe ffbc 	bl	8014e04 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8015e8c:	68fa      	ldr	r2, [r7, #12]
 8015e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e90:	429a      	cmp	r2, r3
 8015e92:	d102      	bne.n	8015e9a <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8015e94:	230c      	movs	r3, #12
 8015e96:	647b      	str	r3, [r7, #68]	; 0x44
 8015e98:	e008      	b.n	8015eac <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015e9a:	4b1a      	ldr	r3, [pc, #104]	; (8015f04 <_txe_semaphore_create+0x120>)
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ea2:	4a19      	ldr	r2, [pc, #100]	; (8015f08 <_txe_semaphore_create+0x124>)
 8015ea4:	4293      	cmp	r3, r2
 8015ea6:	d101      	bne.n	8015eac <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015ea8:	2313      	movs	r3, #19
 8015eaa:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d114      	bne.n	8015edc <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015eb2:	f3ef 8305 	mrs	r3, IPSR
 8015eb6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015eb8:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015eba:	4b14      	ldr	r3, [pc, #80]	; (8015f0c <_txe_semaphore_create+0x128>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	4313      	orrs	r3, r2
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d00b      	beq.n	8015edc <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015ec4:	f3ef 8305 	mrs	r3, IPSR
 8015ec8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015eca:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015ecc:	4b0f      	ldr	r3, [pc, #60]	; (8015f0c <_txe_semaphore_create+0x128>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	4313      	orrs	r3, r2
 8015ed2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015ed6:	d201      	bcs.n	8015edc <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015ed8:	2313      	movs	r3, #19
 8015eda:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d105      	bne.n	8015eee <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8015ee2:	687a      	ldr	r2, [r7, #4]
 8015ee4:	68b9      	ldr	r1, [r7, #8]
 8015ee6:	68f8      	ldr	r0, [r7, #12]
 8015ee8:	f7fe fb30 	bl	801454c <_tx_semaphore_create>
 8015eec:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3748      	adds	r7, #72	; 0x48
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}
 8015ef8:	24014f54 	.word	0x24014f54
 8015efc:	24014e84 	.word	0x24014e84
 8015f00:	24014e88 	.word	0x24014e88
 8015f04:	24014ebc 	.word	0x24014ebc
 8015f08:	24015004 	.word	0x24015004
 8015f0c:	2400006c 	.word	0x2400006c

08015f10 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b086      	sub	sp, #24
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015f18:	2300      	movs	r3, #0
 8015f1a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d102      	bne.n	8015f28 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8015f22:	230c      	movs	r3, #12
 8015f24:	617b      	str	r3, [r7, #20]
 8015f26:	e01c      	b.n	8015f62 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	4a13      	ldr	r2, [pc, #76]	; (8015f7c <_txe_semaphore_delete+0x6c>)
 8015f2e:	4293      	cmp	r3, r2
 8015f30:	d002      	beq.n	8015f38 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8015f32:	230c      	movs	r3, #12
 8015f34:	617b      	str	r3, [r7, #20]
 8015f36:	e014      	b.n	8015f62 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015f38:	f3ef 8305 	mrs	r3, IPSR
 8015f3c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8015f3e:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015f40:	4b0f      	ldr	r3, [pc, #60]	; (8015f80 <_txe_semaphore_delete+0x70>)
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	4313      	orrs	r3, r2
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d002      	beq.n	8015f50 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8015f4a:	2313      	movs	r3, #19
 8015f4c:	617b      	str	r3, [r7, #20]
 8015f4e:	e008      	b.n	8015f62 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015f50:	4b0c      	ldr	r3, [pc, #48]	; (8015f84 <_txe_semaphore_delete+0x74>)
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8015f56:	693b      	ldr	r3, [r7, #16]
 8015f58:	4a0b      	ldr	r2, [pc, #44]	; (8015f88 <_txe_semaphore_delete+0x78>)
 8015f5a:	4293      	cmp	r3, r2
 8015f5c:	d101      	bne.n	8015f62 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015f5e:	2313      	movs	r3, #19
 8015f60:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015f62:	697b      	ldr	r3, [r7, #20]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d103      	bne.n	8015f70 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	f7fe fb41 	bl	80145f0 <_tx_semaphore_delete>
 8015f6e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8015f70:	697b      	ldr	r3, [r7, #20]
}
 8015f72:	4618      	mov	r0, r3
 8015f74:	3718      	adds	r7, #24
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	bf00      	nop
 8015f7c:	53454d41 	.word	0x53454d41
 8015f80:	2400006c 	.word	0x2400006c
 8015f84:	24014ebc 	.word	0x24014ebc
 8015f88:	24015004 	.word	0x24015004

08015f8c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b086      	sub	sp, #24
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
 8015f94:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015f96:	2300      	movs	r3, #0
 8015f98:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d102      	bne.n	8015fa6 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8015fa0:	230c      	movs	r3, #12
 8015fa2:	617b      	str	r3, [r7, #20]
 8015fa4:	e01f      	b.n	8015fe6 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	4a15      	ldr	r2, [pc, #84]	; (8016000 <_txe_semaphore_get+0x74>)
 8015fac:	4293      	cmp	r3, r2
 8015fae:	d002      	beq.n	8015fb6 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8015fb0:	230c      	movs	r3, #12
 8015fb2:	617b      	str	r3, [r7, #20]
 8015fb4:	e017      	b.n	8015fe6 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d014      	beq.n	8015fe6 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015fbc:	f3ef 8305 	mrs	r3, IPSR
 8015fc0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8015fc2:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015fc4:	4b0f      	ldr	r3, [pc, #60]	; (8016004 <_txe_semaphore_get+0x78>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	4313      	orrs	r3, r2
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d002      	beq.n	8015fd4 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8015fce:	2304      	movs	r3, #4
 8015fd0:	617b      	str	r3, [r7, #20]
 8015fd2:	e008      	b.n	8015fe6 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8015fd4:	4b0c      	ldr	r3, [pc, #48]	; (8016008 <_txe_semaphore_get+0x7c>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8015fda:	693b      	ldr	r3, [r7, #16]
 8015fdc:	4a0b      	ldr	r2, [pc, #44]	; (801600c <_txe_semaphore_get+0x80>)
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	d101      	bne.n	8015fe6 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8015fe2:	2304      	movs	r3, #4
 8015fe4:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d104      	bne.n	8015ff6 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8015fec:	6839      	ldr	r1, [r7, #0]
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f7fe fb8e 	bl	8014710 <_tx_semaphore_get>
 8015ff4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8015ff6:	697b      	ldr	r3, [r7, #20]
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	3718      	adds	r7, #24
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd80      	pop	{r7, pc}
 8016000:	53454d41 	.word	0x53454d41
 8016004:	2400006c 	.word	0x2400006c
 8016008:	24014ebc 	.word	0x24014ebc
 801600c:	24015004 	.word	0x24015004

08016010 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b084      	sub	sp, #16
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d102      	bne.n	8016024 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801601e:	230c      	movs	r3, #12
 8016020:	60fb      	str	r3, [r7, #12]
 8016022:	e00b      	b.n	801603c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	4a07      	ldr	r2, [pc, #28]	; (8016048 <_txe_semaphore_put+0x38>)
 801602a:	4293      	cmp	r3, r2
 801602c:	d002      	beq.n	8016034 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801602e:	230c      	movs	r3, #12
 8016030:	60fb      	str	r3, [r7, #12]
 8016032:	e003      	b.n	801603c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f7fe fbfd 	bl	8014834 <_tx_semaphore_put>
 801603a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801603c:	68fb      	ldr	r3, [r7, #12]
}
 801603e:	4618      	mov	r0, r3
 8016040:	3710      	adds	r7, #16
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}
 8016046:	bf00      	nop
 8016048:	53454d41 	.word	0x53454d41

0801604c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b09a      	sub	sp, #104	; 0x68
 8016050:	af06      	add	r7, sp, #24
 8016052:	60f8      	str	r0, [r7, #12]
 8016054:	60b9      	str	r1, [r7, #8]
 8016056:	607a      	str	r2, [r7, #4]
 8016058:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801605a:	2300      	movs	r3, #0
 801605c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d102      	bne.n	801606a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8016064:	230e      	movs	r3, #14
 8016066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016068:	e0bb      	b.n	80161e2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 801606a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801606c:	2bb0      	cmp	r3, #176	; 0xb0
 801606e:	d002      	beq.n	8016076 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8016070:	230e      	movs	r3, #14
 8016072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016074:	e0b5      	b.n	80161e2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016076:	f3ef 8310 	mrs	r3, PRIMASK
 801607a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801607e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8016080:	b672      	cpsid	i
    return(int_posture);
 8016082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8016084:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8016086:	4b64      	ldr	r3, [pc, #400]	; (8016218 <_txe_thread_create+0x1cc>)
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	3301      	adds	r3, #1
 801608c:	4a62      	ldr	r2, [pc, #392]	; (8016218 <_txe_thread_create+0x1cc>)
 801608e:	6013      	str	r3, [r2, #0]
 8016090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016092:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016096:	f383 8810 	msr	PRIMASK, r3
}
 801609a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 801609c:	2300      	movs	r3, #0
 801609e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80160a0:	4b5e      	ldr	r3, [pc, #376]	; (801621c <_txe_thread_create+0x1d0>)
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80160a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80160a8:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80160aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80160ac:	3b01      	subs	r3, #1
 80160ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80160b0:	4413      	add	r3, r2
 80160b2:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80160b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160b6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80160b8:	2300      	movs	r3, #0
 80160ba:	647b      	str	r3, [r7, #68]	; 0x44
 80160bc:	e02b      	b.n	8016116 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80160be:	68fa      	ldr	r2, [r7, #12]
 80160c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d101      	bne.n	80160ca <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80160c6:	2301      	movs	r3, #1
 80160c8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80160ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80160cc:	2b01      	cmp	r3, #1
 80160ce:	d028      	beq.n	8016122 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80160d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160d2:	68db      	ldr	r3, [r3, #12]
 80160d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80160d6:	429a      	cmp	r2, r3
 80160d8:	d308      	bcc.n	80160ec <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80160da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160dc:	691b      	ldr	r3, [r3, #16]
 80160de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d203      	bcs.n	80160ec <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80160e4:	2300      	movs	r3, #0
 80160e6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80160e8:	2301      	movs	r3, #1
 80160ea:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80160ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160ee:	68db      	ldr	r3, [r3, #12]
 80160f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160f2:	429a      	cmp	r2, r3
 80160f4:	d308      	bcc.n	8016108 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80160f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160f8:	691b      	ldr	r3, [r3, #16]
 80160fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160fc:	429a      	cmp	r2, r3
 80160fe:	d203      	bcs.n	8016108 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8016100:	2300      	movs	r3, #0
 8016102:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8016104:	2301      	movs	r3, #1
 8016106:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8016108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801610e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8016110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016112:	3301      	adds	r3, #1
 8016114:	647b      	str	r3, [r7, #68]	; 0x44
 8016116:	4b42      	ldr	r3, [pc, #264]	; (8016220 <_txe_thread_create+0x1d4>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801611c:	429a      	cmp	r2, r3
 801611e:	d3ce      	bcc.n	80160be <_txe_thread_create+0x72>
 8016120:	e000      	b.n	8016124 <_txe_thread_create+0xd8>
                break;
 8016122:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016124:	f3ef 8310 	mrs	r3, PRIMASK
 8016128:	61fb      	str	r3, [r7, #28]
    return(posture);
 801612a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801612c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801612e:	b672      	cpsid	i
    return(int_posture);
 8016130:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016132:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8016134:	4b38      	ldr	r3, [pc, #224]	; (8016218 <_txe_thread_create+0x1cc>)
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	3b01      	subs	r3, #1
 801613a:	4a37      	ldr	r2, [pc, #220]	; (8016218 <_txe_thread_create+0x1cc>)
 801613c:	6013      	str	r3, [r2, #0]
 801613e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016140:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016142:	6a3b      	ldr	r3, [r7, #32]
 8016144:	f383 8810 	msr	PRIMASK, r3
}
 8016148:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801614a:	f7fe fe5b 	bl	8014e04 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 801614e:	68fa      	ldr	r2, [r7, #12]
 8016150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016152:	429a      	cmp	r2, r3
 8016154:	d102      	bne.n	801615c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8016156:	230e      	movs	r3, #14
 8016158:	64fb      	str	r3, [r7, #76]	; 0x4c
 801615a:	e042      	b.n	80161e2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 801615c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801615e:	2b00      	cmp	r3, #0
 8016160:	d102      	bne.n	8016168 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8016162:	2303      	movs	r3, #3
 8016164:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016166:	e03c      	b.n	80161e2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d102      	bne.n	8016174 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801616e:	2303      	movs	r3, #3
 8016170:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016172:	e036      	b.n	80161e2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8016174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016176:	2bc7      	cmp	r3, #199	; 0xc7
 8016178:	d802      	bhi.n	8016180 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 801617a:	2305      	movs	r3, #5
 801617c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801617e:	e030      	b.n	80161e2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8016180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016182:	2b1f      	cmp	r3, #31
 8016184:	d902      	bls.n	801618c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8016186:	230f      	movs	r3, #15
 8016188:	64fb      	str	r3, [r7, #76]	; 0x4c
 801618a:	e02a      	b.n	80161e2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 801618c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801618e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016190:	429a      	cmp	r2, r3
 8016192:	d902      	bls.n	801619a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8016194:	2318      	movs	r3, #24
 8016196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016198:	e023      	b.n	80161e2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 801619a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801619c:	2b01      	cmp	r3, #1
 801619e:	d902      	bls.n	80161a6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80161a0:	2310      	movs	r3, #16
 80161a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80161a4:	e01d      	b.n	80161e2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80161a6:	4b1f      	ldr	r3, [pc, #124]	; (8016224 <_txe_thread_create+0x1d8>)
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80161ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ae:	4a1e      	ldr	r2, [pc, #120]	; (8016228 <_txe_thread_create+0x1dc>)
 80161b0:	4293      	cmp	r3, r2
 80161b2:	d101      	bne.n	80161b8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80161b4:	2313      	movs	r3, #19
 80161b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80161b8:	f3ef 8305 	mrs	r3, IPSR
 80161bc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80161be:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80161c0:	4b1a      	ldr	r3, [pc, #104]	; (801622c <_txe_thread_create+0x1e0>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	4313      	orrs	r3, r2
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d00b      	beq.n	80161e2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80161ca:	f3ef 8305 	mrs	r3, IPSR
 80161ce:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80161d0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80161d2:	4b16      	ldr	r3, [pc, #88]	; (801622c <_txe_thread_create+0x1e0>)
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	4313      	orrs	r3, r2
 80161d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80161dc:	d201      	bcs.n	80161e2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80161de:	2313      	movs	r3, #19
 80161e0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80161e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d112      	bne.n	801620e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80161e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80161ea:	9305      	str	r3, [sp, #20]
 80161ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80161ee:	9304      	str	r3, [sp, #16]
 80161f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80161f2:	9303      	str	r3, [sp, #12]
 80161f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161f6:	9302      	str	r3, [sp, #8]
 80161f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80161fa:	9301      	str	r3, [sp, #4]
 80161fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80161fe:	9300      	str	r3, [sp, #0]
 8016200:	683b      	ldr	r3, [r7, #0]
 8016202:	687a      	ldr	r2, [r7, #4]
 8016204:	68b9      	ldr	r1, [r7, #8]
 8016206:	68f8      	ldr	r0, [r7, #12]
 8016208:	f7fe fb6c 	bl	80148e4 <_tx_thread_create>
 801620c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 801620e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8016210:	4618      	mov	r0, r3
 8016212:	3750      	adds	r7, #80	; 0x50
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}
 8016218:	24014f54 	.word	0x24014f54
 801621c:	24014ec4 	.word	0x24014ec4
 8016220:	24014ec8 	.word	0x24014ec8
 8016224:	24014ebc 	.word	0x24014ebc
 8016228:	24015004 	.word	0x24015004
 801622c:	2400006c 	.word	0x2400006c

08016230 <__libc_init_array>:
 8016230:	b570      	push	{r4, r5, r6, lr}
 8016232:	4d0d      	ldr	r5, [pc, #52]	; (8016268 <__libc_init_array+0x38>)
 8016234:	4c0d      	ldr	r4, [pc, #52]	; (801626c <__libc_init_array+0x3c>)
 8016236:	1b64      	subs	r4, r4, r5
 8016238:	10a4      	asrs	r4, r4, #2
 801623a:	2600      	movs	r6, #0
 801623c:	42a6      	cmp	r6, r4
 801623e:	d109      	bne.n	8016254 <__libc_init_array+0x24>
 8016240:	4d0b      	ldr	r5, [pc, #44]	; (8016270 <__libc_init_array+0x40>)
 8016242:	4c0c      	ldr	r4, [pc, #48]	; (8016274 <__libc_init_array+0x44>)
 8016244:	f000 f82e 	bl	80162a4 <_init>
 8016248:	1b64      	subs	r4, r4, r5
 801624a:	10a4      	asrs	r4, r4, #2
 801624c:	2600      	movs	r6, #0
 801624e:	42a6      	cmp	r6, r4
 8016250:	d105      	bne.n	801625e <__libc_init_array+0x2e>
 8016252:	bd70      	pop	{r4, r5, r6, pc}
 8016254:	f855 3b04 	ldr.w	r3, [r5], #4
 8016258:	4798      	blx	r3
 801625a:	3601      	adds	r6, #1
 801625c:	e7ee      	b.n	801623c <__libc_init_array+0xc>
 801625e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016262:	4798      	blx	r3
 8016264:	3601      	adds	r6, #1
 8016266:	e7f2      	b.n	801624e <__libc_init_array+0x1e>
 8016268:	080163f8 	.word	0x080163f8
 801626c:	080163f8 	.word	0x080163f8
 8016270:	080163f8 	.word	0x080163f8
 8016274:	080163fc 	.word	0x080163fc

08016278 <memcpy>:
 8016278:	440a      	add	r2, r1
 801627a:	4291      	cmp	r1, r2
 801627c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016280:	d100      	bne.n	8016284 <memcpy+0xc>
 8016282:	4770      	bx	lr
 8016284:	b510      	push	{r4, lr}
 8016286:	f811 4b01 	ldrb.w	r4, [r1], #1
 801628a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801628e:	4291      	cmp	r1, r2
 8016290:	d1f9      	bne.n	8016286 <memcpy+0xe>
 8016292:	bd10      	pop	{r4, pc}

08016294 <memset>:
 8016294:	4402      	add	r2, r0
 8016296:	4603      	mov	r3, r0
 8016298:	4293      	cmp	r3, r2
 801629a:	d100      	bne.n	801629e <memset+0xa>
 801629c:	4770      	bx	lr
 801629e:	f803 1b01 	strb.w	r1, [r3], #1
 80162a2:	e7f9      	b.n	8016298 <memset+0x4>

080162a4 <_init>:
 80162a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162a6:	bf00      	nop
 80162a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162aa:	bc08      	pop	{r3}
 80162ac:	469e      	mov	lr, r3
 80162ae:	4770      	bx	lr

080162b0 <_fini>:
 80162b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162b2:	bf00      	nop
 80162b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162b6:	bc08      	pop	{r3}
 80162b8:	469e      	mov	lr, r3
 80162ba:	4770      	bx	lr
